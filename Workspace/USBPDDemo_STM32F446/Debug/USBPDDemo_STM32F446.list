
USBPDDemo_STM32F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08008bc0  08008bc0  00018bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d54  08008d54  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008d54  08008d54  00018d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d5c  08008d5c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008d5c  08008d5c  00018d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d64  08008d64  00018d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  20000078  08008de0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  08008de0  00020414  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cb5  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033a2  00000000  00000000  00033d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00037100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00037ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ce5  00000000  00000000  00038b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139ac  00000000  00000000  0005f7f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d382b  00000000  00000000  000731a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001469cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e74  00000000  00000000  00146a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008ba8 	.word	0x08008ba8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08008ba8 	.word	0x08008ba8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <_ZNK7FUSB30217fusb_send_messageEPK6pd_msg>:
#ifdef PD_DEBUG_OUTPUT
#include "stdio.h"
#endif
uint8_t fusb_read_byte(uint8_t addr);
bool fusb_write_byte(uint8_t addr, uint8_t byte);
void FUSB302::fusb_send_message(const pd_msg *msg) const {
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	static const uint8_t eop_seq[4] = { FUSB_FIFO_TX_JAM_CRC, FUSB_FIFO_TX_EOP,
	FUSB_FIFO_TX_TXOFF, FUSB_FIFO_TX_TXON };

	/* Get the length of the message: a two-octet header plus NUMOBJ four-octet
	 * data objects */
	uint8_t msg_len = 2 + 4 * PD_NUMOBJ_GET(msg);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	885b      	ldrh	r3, [r3, #2]
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	131b      	asrs	r3, r3, #12
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	f003 0307 	and.w	r3, r3, #7
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	3302      	adds	r3, #2
 80005d4:	73fb      	strb	r3, [r7, #15]

	/* Set the number of bytes to be transmitted in the packet */
	sop_seq[4] = FUSB_FIFO_TX_PACKSYM | msg_len;
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <_ZNK7FUSB30217fusb_send_messageEPK6pd_msg+0x74>)
 80005e0:	711a      	strb	r2, [r3, #4]

	/* Write all three parts of the message to the TX FIFO */
	bool result = I2CWrite(DeviceAddress, FUSB_FIFOS, 5, sop_seq);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	689c      	ldr	r4, [r3, #8]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	7818      	ldrb	r0, [r3, #0]
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <_ZNK7FUSB30217fusb_send_messageEPK6pd_msg+0x74>)
 80005ec:	2205      	movs	r2, #5
 80005ee:	2143      	movs	r1, #67	; 0x43
 80005f0:	47a0      	blx	r4
 80005f2:	4603      	mov	r3, r0
 80005f4:	73bb      	strb	r3, [r7, #14]
	if (!result) {
#ifdef PD_DEBUG_OUTPUT
		printf("I2CWrite failed 1\r\n");
#endif
	}
	result = I2CWrite(DeviceAddress, FUSB_FIFOS, msg_len,
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	689c      	ldr	r4, [r3, #8]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	7818      	ldrb	r0, [r3, #0]
			(uint8_t*) msg->bytes);
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	3302      	adds	r3, #2
	result = I2CWrite(DeviceAddress, FUSB_FIFOS, msg_len,
 8000602:	7bfa      	ldrb	r2, [r7, #15]
 8000604:	2143      	movs	r1, #67	; 0x43
 8000606:	47a0      	blx	r4
 8000608:	4603      	mov	r3, r0
 800060a:	73bb      	strb	r3, [r7, #14]
#ifdef PD_DEBUG_OUTPUT
		printf("I2CWrite failed 2\r\n");
#endif
	}

	result = I2CWrite(DeviceAddress, FUSB_FIFOS, 4, (uint8_t*) eop_seq);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	689c      	ldr	r4, [r3, #8]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	7818      	ldrb	r0, [r3, #0]
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <_ZNK7FUSB30217fusb_send_messageEPK6pd_msg+0x78>)
 8000616:	2204      	movs	r2, #4
 8000618:	2143      	movs	r1, #67	; 0x43
 800061a:	47a0      	blx	r4
 800061c:	4603      	mov	r3, r0
 800061e:	73bb      	strb	r3, [r7, #14]
#ifdef PD_DEBUG_OUTPUT
		printf("I2CWrite failed 3\r\n");
#endif
	}

}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	bd90      	pop	{r4, r7, pc}
 8000628:	20000000 	.word	0x20000000
 800062c:	08008c98 	.word	0x08008c98

08000630 <_ZNK7FUSB30215fusb_rx_pendingEv>:

bool FUSB302::fusb_rx_pending() const {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	return (fusb_read_byte(FUSB_STATUS1) & FUSB_STATUS1_RX_EMPTY)
 8000638:	2141      	movs	r1, #65	; 0x41
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f000 f9dc 	bl	80009f8 <_ZNK7FUSB30214fusb_read_byteEh>
 8000640:	4603      	mov	r3, r0
 8000642:	f003 0320 	and.w	r3, r3, #32
			!= FUSB_STATUS1_RX_EMPTY;
 8000646:	2b20      	cmp	r3, #32
 8000648:	bf14      	ite	ne
 800064a:	2301      	movne	r3, #1
 800064c:	2300      	moveq	r3, #0
 800064e:	b2db      	uxtb	r3, r3
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <_ZNK7FUSB30217fusb_read_messageEP6pd_msg>:

uint8_t FUSB302::fusb_read_message(pd_msg *msg) const {
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]

	// Read the header. If its not a SOP we dont actually want it at all
	// But on some revisions of the fusb if you dont both pick them up and read
	// them out of the fifo, it gets stuck
	// TODO this might need a tad more testing about how many bites we throw out, but believe it is correct
	uint8_t returnValue = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	73fb      	strb	r3, [r7, #15]
	if ((fusb_read_byte(FUSB_FIFOS) & FUSB_FIFO_RX_TOKEN_BITS)
 8000666:	2143      	movs	r1, #67	; 0x43
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 f9c5 	bl	80009f8 <_ZNK7FUSB30214fusb_read_byteEh>
 800066e:	4603      	mov	r3, r0
 8000670:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
			!= FUSB_FIFO_RX_SOP) {
 8000674:	2be0      	cmp	r3, #224	; 0xe0
 8000676:	bf14      	ite	ne
 8000678:	2301      	movne	r3, #1
 800067a:	2300      	moveq	r3, #0
 800067c:	b2db      	uxtb	r3, r3
	if ((fusb_read_byte(FUSB_FIFOS) & FUSB_FIFO_RX_TOKEN_BITS)
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <_ZNK7FUSB30217fusb_read_messageEP6pd_msg+0x2e>
		returnValue = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	73fb      	strb	r3, [r7, #15]
	}

	/* Read the message header into msg */
	I2CRead(DeviceAddress, FUSB_FIFOS, 2, msg->bytes);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	685c      	ldr	r4, [r3, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	7818      	ldrb	r0, [r3, #0]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	3302      	adds	r3, #2
 8000692:	2202      	movs	r2, #2
 8000694:	2143      	movs	r1, #67	; 0x43
 8000696:	47a0      	blx	r4
	/* Get the number of data objects */
	numobj = PD_NUMOBJ_GET(msg);
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	885b      	ldrh	r3, [r3, #2]
 800069c:	b29b      	uxth	r3, r3
 800069e:	131b      	asrs	r3, r3, #12
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	73bb      	strb	r3, [r7, #14]
	/* If there is at least one data object, read the data objects */
	if (numobj > 0) {
 80006a8:	7bbb      	ldrb	r3, [r7, #14]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d00b      	beq.n	80006c6 <_ZNK7FUSB30217fusb_read_messageEP6pd_msg+0x6e>
		I2CRead(DeviceAddress, FUSB_FIFOS, numobj * 4, msg->bytes + 2);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	685c      	ldr	r4, [r3, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7818      	ldrb	r0, [r3, #0]
 80006b6:	7bbb      	ldrb	r3, [r7, #14]
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	3302      	adds	r3, #2
 80006c0:	3302      	adds	r3, #2
 80006c2:	2143      	movs	r1, #67	; 0x43
 80006c4:	47a0      	blx	r4
	}
	/* Throw the CRC32 in the garbage, since the PHY already checked it. */
	I2CRead(DeviceAddress, FUSB_FIFOS, 4, garbage);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	685c      	ldr	r4, [r3, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	7818      	ldrb	r0, [r3, #0]
 80006ce:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <_ZNK7FUSB30217fusb_read_messageEP6pd_msg+0x88>)
 80006d0:	2204      	movs	r2, #4
 80006d2:	2143      	movs	r1, #67	; 0x43
 80006d4:	47a0      	blx	r4

	return returnValue;
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd90      	pop	{r4, r7, pc}
 80006e0:	20000094 	.word	0x20000094

080006e4 <_ZNK7FUSB30210fusb_setupEv>:

	/* Send a hard reset */
	fusb_write_byte(FUSB_CONTROL3, 0x07 | FUSB_CONTROL3_SEND_HARD_RESET);
}

bool FUSB302::fusb_setup() const {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	/* Fully reset the FUSB302B */
	if (!fusb_write_byte(FUSB_RESET, FUSB_RESET_SW_RES)) {
 80006ec:	2201      	movs	r2, #1
 80006ee:	210c      	movs	r1, #12
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 f99d 	bl	8000a30 <_ZNK7FUSB30215fusb_write_byteEhh>
 80006f6:	4603      	mov	r3, r0
 80006f8:	f083 0301 	eor.w	r3, r3, #1
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <_ZNK7FUSB30210fusb_setupEv+0x22>
		return false;
 8000702:	2300      	movs	r3, #0
 8000704:	e099      	b.n	800083a <_ZNK7FUSB30210fusb_setupEv+0x156>
	}
	osDelay(10);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	200a      	movs	r0, #10
 800070c:	4798      	blx	r3
	uint8_t tries = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	73fb      	strb	r3, [r7, #15]
	while (!fusb_read_id()) {
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f000 f94a 	bl	80009ac <_ZNK7FUSB30212fusb_read_idEv>
 8000718:	4603      	mov	r3, r0
 800071a:	f083 0301 	eor.w	r3, r3, #1
 800071e:	b2db      	uxtb	r3, r3
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00b      	beq.n	800073c <_ZNK7FUSB30210fusb_setupEv+0x58>
		osDelay(10);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	200a      	movs	r0, #10
 800072a:	4798      	blx	r3
		tries++;
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	3301      	adds	r3, #1
 8000730:	73fb      	strb	r3, [r7, #15]
		if (tries > 5) {
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	2b05      	cmp	r3, #5
 8000736:	d9ec      	bls.n	8000712 <_ZNK7FUSB30210fusb_setupEv+0x2e>
			return false; // Welp :(
 8000738:	2300      	movs	r3, #0
 800073a:	e07e      	b.n	800083a <_ZNK7FUSB30210fusb_setupEv+0x156>
		}
	}

	/* Turn on all power */
	if (!fusb_write_byte(FUSB_POWER, 0x0F)) {
 800073c:	220f      	movs	r2, #15
 800073e:	210b      	movs	r1, #11
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f000 f975 	bl	8000a30 <_ZNK7FUSB30215fusb_write_byteEhh>
 8000746:	4603      	mov	r3, r0
 8000748:	f083 0301 	eor.w	r3, r3, #1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <_ZNK7FUSB30210fusb_setupEv+0x72>
		return false;
 8000752:	2300      	movs	r3, #0
 8000754:	e071      	b.n	800083a <_ZNK7FUSB30210fusb_setupEv+0x156>
	}

	/* Set interrupt masks */
	// Setting to 0 so interrupts are allowed
	if (!fusb_write_byte(FUSB_MASK1, 0x00)) {
 8000756:	2200      	movs	r2, #0
 8000758:	210a      	movs	r1, #10
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f000 f968 	bl	8000a30 <_ZNK7FUSB30215fusb_write_byteEhh>
 8000760:	4603      	mov	r3, r0
 8000762:	f083 0301 	eor.w	r3, r3, #1
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <_ZNK7FUSB30210fusb_setupEv+0x8c>
		return false;
 800076c:	2300      	movs	r3, #0
 800076e:	e064      	b.n	800083a <_ZNK7FUSB30210fusb_setupEv+0x156>
	}
	if (!fusb_write_byte(FUSB_MASKA, 0x00)) {
 8000770:	2200      	movs	r2, #0
 8000772:	210e      	movs	r1, #14
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f000 f95b 	bl	8000a30 <_ZNK7FUSB30215fusb_write_byteEhh>
 800077a:	4603      	mov	r3, r0
 800077c:	f083 0301 	eor.w	r3, r3, #1
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <_ZNK7FUSB30210fusb_setupEv+0xa6>
		return false;
 8000786:	2300      	movs	r3, #0
 8000788:	e057      	b.n	800083a <_ZNK7FUSB30210fusb_setupEv+0x156>
	}
	if (!fusb_write_byte(FUSB_MASKB, 0x00)) {
 800078a:	2200      	movs	r2, #0
 800078c:	210f      	movs	r1, #15
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f000 f94e 	bl	8000a30 <_ZNK7FUSB30215fusb_write_byteEhh>
 8000794:	4603      	mov	r3, r0
 8000796:	f083 0301 	eor.w	r3, r3, #1
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <_ZNK7FUSB30210fusb_setupEv+0xc0>
		return false;
 80007a0:	2300      	movs	r3, #0
 80007a2:	e04a      	b.n	800083a <_ZNK7FUSB30210fusb_setupEv+0x156>
	}
	if (!fusb_write_byte(FUSB_CONTROL0, 0b11 << 2)) {
 80007a4:	220c      	movs	r2, #12
 80007a6:	2106      	movs	r1, #6
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 f941 	bl	8000a30 <_ZNK7FUSB30215fusb_write_byteEhh>
 80007ae:	4603      	mov	r3, r0
 80007b0:	f083 0301 	eor.w	r3, r3, #1
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <_ZNK7FUSB30210fusb_setupEv+0xda>
		return false;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e03d      	b.n	800083a <_ZNK7FUSB30210fusb_setupEv+0x156>
	}

	/* Enable automatic retransmission */
	if (!fusb_write_byte(FUSB_CONTROL3, 0x07)) {
 80007be:	2207      	movs	r2, #7
 80007c0:	2109      	movs	r1, #9
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 f934 	bl	8000a30 <_ZNK7FUSB30215fusb_write_byteEhh>
 80007c8:	4603      	mov	r3, r0
 80007ca:	f083 0301 	eor.w	r3, r3, #1
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <_ZNK7FUSB30210fusb_setupEv+0xf4>
		return false;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e030      	b.n	800083a <_ZNK7FUSB30210fusb_setupEv+0x156>
	}
	// set defaults
	if (!fusb_write_byte(FUSB_CONTROL2, 0x00)) {
 80007d8:	2200      	movs	r2, #0
 80007da:	2108      	movs	r1, #8
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f000 f927 	bl	8000a30 <_ZNK7FUSB30215fusb_write_byteEhh>
 80007e2:	4603      	mov	r3, r0
 80007e4:	f083 0301 	eor.w	r3, r3, #1
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <_ZNK7FUSB30210fusb_setupEv+0x10e>
		return false;
 80007ee:	2300      	movs	r3, #0
 80007f0:	e023      	b.n	800083a <_ZNK7FUSB30210fusb_setupEv+0x156>
	}
	/* Flush the RX buffer */
	if (!fusb_write_byte(FUSB_CONTROL1, FUSB_CONTROL1_RX_FLUSH)) {
 80007f2:	2204      	movs	r2, #4
 80007f4:	2107      	movs	r1, #7
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f000 f91a 	bl	8000a30 <_ZNK7FUSB30215fusb_write_byteEhh>
 80007fc:	4603      	mov	r3, r0
 80007fe:	f083 0301 	eor.w	r3, r3, #1
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <_ZNK7FUSB30210fusb_setupEv+0x128>
		return false;
 8000808:	2300      	movs	r3, #0
 800080a:	e016      	b.n	800083a <_ZNK7FUSB30210fusb_setupEv+0x156>
	}

	if (!runCCLineSelection()) {
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f000 f818 	bl	8000842 <_ZNK7FUSB30218runCCLineSelectionEv>
 8000812:	4603      	mov	r3, r0
 8000814:	f083 0301 	eor.w	r3, r3, #1
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <_ZNK7FUSB30210fusb_setupEv+0x13e>
		return false;
 800081e:	2300      	movs	r3, #0
 8000820:	e00b      	b.n	800083a <_ZNK7FUSB30210fusb_setupEv+0x156>
	}
	if (!fusb_reset()) {
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f000 f892 	bl	800094c <_ZNK7FUSB30210fusb_resetEv>
 8000828:	4603      	mov	r3, r0
 800082a:	f083 0301 	eor.w	r3, r3, #1
 800082e:	b2db      	uxtb	r3, r3
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <_ZNK7FUSB30210fusb_setupEv+0x154>
		return false;
 8000834:	2300      	movs	r3, #0
 8000836:	e000      	b.n	800083a <_ZNK7FUSB30210fusb_setupEv+0x156>
	}

	return true;
 8000838:	2301      	movs	r3, #1
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <_ZNK7FUSB30218runCCLineSelectionEv>:

bool FUSB302::runCCLineSelection() const {
 8000842:	b580      	push	{r7, lr}
 8000844:	b084      	sub	sp, #16
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]

	/* Measure CC1 */
	if (!fusb_write_byte(FUSB_SWITCHES0, 0x07)) {
 800084a:	2207      	movs	r2, #7
 800084c:	2102      	movs	r1, #2
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f000 f8ee 	bl	8000a30 <_ZNK7FUSB30215fusb_write_byteEhh>
 8000854:	4603      	mov	r3, r0
 8000856:	f083 0301 	eor.w	r3, r3, #1
 800085a:	b2db      	uxtb	r3, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <_ZNK7FUSB30218runCCLineSelectionEv+0x22>
		return false;
 8000860:	2300      	movs	r3, #0
 8000862:	e05d      	b.n	8000920 <_ZNK7FUSB30218runCCLineSelectionEv+0xde>
	}
	osDelay(10);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	200a      	movs	r0, #10
 800086a:	4798      	blx	r3
	uint8_t cc1 = fusb_read_byte(FUSB_STATUS0) & FUSB_STATUS0_BC_LVL;
 800086c:	2140      	movs	r1, #64	; 0x40
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f000 f8c2 	bl	80009f8 <_ZNK7FUSB30214fusb_read_byteEh>
 8000874:	4603      	mov	r3, r0
 8000876:	f003 0303 	and.w	r3, r3, #3
 800087a:	73fb      	strb	r3, [r7, #15]

	/* Measure CC2 */
	if (!fusb_write_byte(FUSB_SWITCHES0, 0x0B)) {
 800087c:	220b      	movs	r2, #11
 800087e:	2102      	movs	r1, #2
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f000 f8d5 	bl	8000a30 <_ZNK7FUSB30215fusb_write_byteEhh>
 8000886:	4603      	mov	r3, r0
 8000888:	f083 0301 	eor.w	r3, r3, #1
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <_ZNK7FUSB30218runCCLineSelectionEv+0x54>
		return false;
 8000892:	2300      	movs	r3, #0
 8000894:	e044      	b.n	8000920 <_ZNK7FUSB30218runCCLineSelectionEv+0xde>
	}
	osDelay(10);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	200a      	movs	r0, #10
 800089c:	4798      	blx	r3
	uint8_t cc2 = fusb_read_byte(FUSB_STATUS0) & FUSB_STATUS0_BC_LVL;
 800089e:	2140      	movs	r1, #64	; 0x40
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f000 f8a9 	bl	80009f8 <_ZNK7FUSB30214fusb_read_byteEh>
 80008a6:	4603      	mov	r3, r0
 80008a8:	f003 0303 	and.w	r3, r3, #3
 80008ac:	73bb      	strb	r3, [r7, #14]

	/* Select the correct CC line for BMC signaling; also enable AUTO_CRC */
	if (cc1 > cc2) {
 80008ae:	7bfa      	ldrb	r2, [r7, #15]
 80008b0:	7bbb      	ldrb	r3, [r7, #14]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d919      	bls.n	80008ea <_ZNK7FUSB30218runCCLineSelectionEv+0xa8>
		// TX_CC1|AUTO_CRC|SPECREV0
		if (!fusb_write_byte(FUSB_SWITCHES1, 0x25)) {
 80008b6:	2225      	movs	r2, #37	; 0x25
 80008b8:	2103      	movs	r1, #3
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f000 f8b8 	bl	8000a30 <_ZNK7FUSB30215fusb_write_byteEhh>
 80008c0:	4603      	mov	r3, r0
 80008c2:	f083 0301 	eor.w	r3, r3, #1
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <_ZNK7FUSB30218runCCLineSelectionEv+0x8e>
			return false;
 80008cc:	2300      	movs	r3, #0
 80008ce:	e027      	b.n	8000920 <_ZNK7FUSB30218runCCLineSelectionEv+0xde>
		}
		// PWDN1|PWDN2|MEAS_CC1
		if (!fusb_write_byte(FUSB_SWITCHES0, 0x07)) {
 80008d0:	2207      	movs	r2, #7
 80008d2:	2102      	movs	r1, #2
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f000 f8ab 	bl	8000a30 <_ZNK7FUSB30215fusb_write_byteEhh>
 80008da:	4603      	mov	r3, r0
 80008dc:	f083 0301 	eor.w	r3, r3, #1
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d01b      	beq.n	800091e <_ZNK7FUSB30218runCCLineSelectionEv+0xdc>
			return false;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e01a      	b.n	8000920 <_ZNK7FUSB30218runCCLineSelectionEv+0xde>
		}
	} else {
		// TX_CC2|AUTO_CRC|SPECREV0
		if (!fusb_write_byte(FUSB_SWITCHES1, 0x26)) {
 80008ea:	2226      	movs	r2, #38	; 0x26
 80008ec:	2103      	movs	r1, #3
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f000 f89e 	bl	8000a30 <_ZNK7FUSB30215fusb_write_byteEhh>
 80008f4:	4603      	mov	r3, r0
 80008f6:	f083 0301 	eor.w	r3, r3, #1
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <_ZNK7FUSB30218runCCLineSelectionEv+0xc2>
			return false;
 8000900:	2300      	movs	r3, #0
 8000902:	e00d      	b.n	8000920 <_ZNK7FUSB30218runCCLineSelectionEv+0xde>
		}
		// PWDN1|PWDN2|MEAS_CC2
		if (!fusb_write_byte(FUSB_SWITCHES0, 0x0B)) {
 8000904:	220b      	movs	r2, #11
 8000906:	2102      	movs	r1, #2
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f891 	bl	8000a30 <_ZNK7FUSB30215fusb_write_byteEhh>
 800090e:	4603      	mov	r3, r0
 8000910:	f083 0301 	eor.w	r3, r3, #1
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <_ZNK7FUSB30218runCCLineSelectionEv+0xdc>
			return false;
 800091a:	2300      	movs	r3, #0
 800091c:	e000      	b.n	8000920 <_ZNK7FUSB30218runCCLineSelectionEv+0xde>
		}
	}
	return true;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <_ZNK7FUSB30215fusb_get_statusEP11fusb_status>:
bool FUSB302::fusb_get_status(fusb_status *status) const {
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]

	/* Read the interrupt and status flags into status */
	return I2CRead(DeviceAddress, FUSB_STATUS0A, 7, status->bytes);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	685c      	ldr	r4, [r3, #4]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	7818      	ldrb	r0, [r3, #0]
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	2207      	movs	r2, #7
 800093e:	213c      	movs	r1, #60	; 0x3c
 8000940:	47a0      	blx	r4
 8000942:	4603      	mov	r3, r0
}
 8000944:	4618      	mov	r0, r3
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	bd90      	pop	{r4, r7, pc}

0800094c <_ZNK7FUSB30210fusb_resetEv>:
	FUSB_STATUS0) & FUSB_STATUS0_BC_LVL);

	return bc_lvl;
}

bool FUSB302::fusb_reset() const {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

	/* Flush the TX buffer */
	if (!fusb_write_byte(FUSB_CONTROL0, 0x44)) {
 8000954:	2244      	movs	r2, #68	; 0x44
 8000956:	2106      	movs	r1, #6
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f000 f869 	bl	8000a30 <_ZNK7FUSB30215fusb_write_byteEhh>
 800095e:	4603      	mov	r3, r0
 8000960:	f083 0301 	eor.w	r3, r3, #1
 8000964:	b2db      	uxtb	r3, r3
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <_ZNK7FUSB30210fusb_resetEv+0x22>
		return false;
 800096a:	2300      	movs	r3, #0
 800096c:	e01a      	b.n	80009a4 <_ZNK7FUSB30210fusb_resetEv+0x58>
	}
	/* Flush the RX buffer */
	if (!fusb_write_byte(FUSB_CONTROL1, FUSB_CONTROL1_RX_FLUSH)) {
 800096e:	2204      	movs	r2, #4
 8000970:	2107      	movs	r1, #7
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f000 f85c 	bl	8000a30 <_ZNK7FUSB30215fusb_write_byteEhh>
 8000978:	4603      	mov	r3, r0
 800097a:	f083 0301 	eor.w	r3, r3, #1
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <_ZNK7FUSB30210fusb_resetEv+0x3c>
		return false;
 8000984:	2300      	movs	r3, #0
 8000986:	e00d      	b.n	80009a4 <_ZNK7FUSB30210fusb_resetEv+0x58>
	}
	/* Reset the PD logic */
	if (!fusb_write_byte(FUSB_RESET, FUSB_RESET_PD_RESET)) {
 8000988:	2202      	movs	r2, #2
 800098a:	210c      	movs	r1, #12
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f000 f84f 	bl	8000a30 <_ZNK7FUSB30215fusb_write_byteEhh>
 8000992:	4603      	mov	r3, r0
 8000994:	f083 0301 	eor.w	r3, r3, #1
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <_ZNK7FUSB30210fusb_resetEv+0x56>
		return false;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <_ZNK7FUSB30210fusb_resetEv+0x58>
	}
	return true;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <_ZNK7FUSB30212fusb_read_idEv>:

bool FUSB302::fusb_read_id() const {
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
// Return true if read of the revision ID is sane
	uint8_t version = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73bb      	strb	r3, [r7, #14]

	bool res = I2CRead(DeviceAddress, FUSB_DEVICE_ID, 1, &version);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	685c      	ldr	r4, [r3, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	7818      	ldrb	r0, [r3, #0]
 80009c0:	f107 030e 	add.w	r3, r7, #14
 80009c4:	2201      	movs	r2, #1
 80009c6:	2101      	movs	r1, #1
 80009c8:	47a0      	blx	r4
 80009ca:	4603      	mov	r3, r0
 80009cc:	73fb      	strb	r3, [r7, #15]
	if (!res)
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
 80009d0:	f083 0301 	eor.w	r3, r3, #1
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <_ZNK7FUSB30212fusb_read_idEv+0x32>
		return res;
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	e008      	b.n	80009f0 <_ZNK7FUSB30212fusb_read_idEv+0x44>
	if (version == 0 || version == 0xFF)
 80009de:	7bbb      	ldrb	r3, [r7, #14]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d002      	beq.n	80009ea <_ZNK7FUSB30212fusb_read_idEv+0x3e>
 80009e4:	7bbb      	ldrb	r3, [r7, #14]
 80009e6:	2bff      	cmp	r3, #255	; 0xff
 80009e8:	d101      	bne.n	80009ee <_ZNK7FUSB30212fusb_read_idEv+0x42>
		return false;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e000      	b.n	80009f0 <_ZNK7FUSB30212fusb_read_idEv+0x44>
	return true;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd90      	pop	{r4, r7, pc}

080009f8 <_ZNK7FUSB30214fusb_read_byteEh>:
 * cfg: The FUSB302B to communicate with
 * addr: The memory address from which to read
 *
 * Returns the value read from addr.
 */
uint8_t FUSB302::fusb_read_byte(const uint8_t addr) const {
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	460b      	mov	r3, r1
 8000a02:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1];
	if (!I2CRead(DeviceAddress, addr, 1, (uint8_t*) data)) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	685c      	ldr	r4, [r3, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	7818      	ldrb	r0, [r3, #0]
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	78f9      	ldrb	r1, [r7, #3]
 8000a12:	2201      	movs	r2, #1
 8000a14:	47a0      	blx	r4
 8000a16:	4603      	mov	r3, r0
 8000a18:	f083 0301 	eor.w	r3, r3, #1
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <_ZNK7FUSB30214fusb_read_byteEh+0x2e>
		return 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e000      	b.n	8000a28 <_ZNK7FUSB30214fusb_read_byteEh+0x30>
	}
	return data[0];
 8000a26:	7b3b      	ldrb	r3, [r7, #12]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd90      	pop	{r4, r7, pc}

08000a30 <_ZNK7FUSB30215fusb_write_byteEhh>:
 *
 * cfg: The FUSB302B to communicate with
 * addr: The memory address to which we will write
 * byte: The value to write
 */
bool FUSB302::fusb_write_byte(const uint8_t addr, const uint8_t byte) const {
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	70fb      	strb	r3, [r7, #3]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	70bb      	strb	r3, [r7, #2]
	return I2CWrite(DeviceAddress, addr, 1, (uint8_t*) &byte);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	689c      	ldr	r4, [r3, #8]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	7818      	ldrb	r0, [r3, #0]
 8000a48:	1cbb      	adds	r3, r7, #2
 8000a4a:	78f9      	ldrb	r1, [r7, #3]
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	47a0      	blx	r4
 8000a50:	4603      	mov	r3, r0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd90      	pop	{r4, r7, pc}

08000a5a <_ZN12PolicyEngine18readPendingMessageEv>:
 */

#include "policy_engine.h"
#include <pd.h>
#include <string.h>
void PolicyEngine::readPendingMessage() {
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
  while (fusb.fusb_rx_pending()) {
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fde3 	bl	8000630 <_ZNK7FUSB30215fusb_rx_pendingEv>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d03b      	beq.n	8000ae8 <_ZN12PolicyEngine18readPendingMessageEv+0x8e>
    /* Read the message */
    if (fusb.fusb_read_message(&irqMessage) == 0) {
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	33f0      	adds	r3, #240	; 0xf0
 8000a76:	4619      	mov	r1, r3
 8000a78:	4610      	mov	r0, r2
 8000a7a:	f7ff fded 	bl	8000658 <_ZNK7FUSB30217fusb_read_messageEP6pd_msg>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	bf0c      	ite	eq
 8000a84:	2301      	moveq	r3, #1
 8000a86:	2300      	movne	r3, #0
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d026      	beq.n	8000adc <_ZN12PolicyEngine18readPendingMessageEv+0x82>
      /* If it's a Soft_Reset, go to the soft reset state */
      if (PD_MSGTYPE_GET(&irqMessage) == PD_MSGTYPE_SOFT_RESET && PD_NUMOBJ_GET(&irqMessage) == 0) {
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8000a94:	f003 031f 	and.w	r3, r3, #31
 8000a98:	2b0d      	cmp	r3, #13
 8000a9a:	d10c      	bne.n	8000ab6 <_ZN12PolicyEngine18readPendingMessageEv+0x5c>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8000aa2:	131b      	asrs	r3, r3, #12
 8000aa4:	f003 0307 	and.w	r3, r3, #7
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d104      	bne.n	8000ab6 <_ZN12PolicyEngine18readPendingMessageEv+0x5c>
        /* PE transitions to its reset state */
        notify(Notifications::RESET);
 8000aac:	2101      	movs	r1, #1
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f000 f8a3 	bl	8000bfa <_ZN12PolicyEngine6notifyENS_13NotificationsE>
 8000ab4:	e017      	b.n	8000ae6 <_ZN12PolicyEngine18readPendingMessageEv+0x8c>
      } else {
        /* Tell PolicyEngine to discard the message being transmitted */
        notify(Notifications::DISCARD);
 8000ab6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f000 f89d 	bl	8000bfa <_ZN12PolicyEngine6notifyENS_13NotificationsE>
        /* Pass the message to the policy engine. */
        incomingMessages.push(&irqMessage);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	33f0      	adds	r3, #240	; 0xf0
 8000aca:	4619      	mov	r1, r3
 8000acc:	4610      	mov	r0, r2
 8000ace:	f000 f855 	bl	8000b7c <_ZN10ringbufferI6pd_msgLj4EE4pushEPKS0_>

        notify(PolicyEngine::Notifications::MSG_RX);
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f000 f890 	bl	8000bfa <_ZN12PolicyEngine6notifyENS_13NotificationsE>
 8000ada:	e7c2      	b.n	8000a62 <_ZN12PolicyEngine18readPendingMessageEv+0x8>
      }
    } else {
      // Invalid message or SOP', still discard tx message
      /* Tell PolicyEngine to discard the message being transmitted */
      notify(Notifications::DISCARD);
 8000adc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f000 f88a 	bl	8000bfa <_ZN12PolicyEngine6notifyENS_13NotificationsE>
  while (fusb.fusb_rx_pending()) {
 8000ae6:	e7bc      	b.n	8000a62 <_ZN12PolicyEngine18readPendingMessageEv+0x8>
    }
  }
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <_ZN12PolicyEngine10IRQOccuredEv>:

bool PolicyEngine::IRQOccured() {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  fusb_status status;
  bool        returnValue = false;
 8000af8:	2300      	movs	r3, #0
 8000afa:	73fb      	strb	r3, [r7, #15]
  /* Read the FUSB302B status and interrupt registers */
  if (fusb.fusb_get_status(&status)) {
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f107 0208 	add.w	r2, r7, #8
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff0f 	bl	8000928 <_ZNK7FUSB30215fusb_get_statusEP11fusb_status>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d030      	beq.n	8000b72 <_ZN12PolicyEngine10IRQOccuredEv+0x82>

    /* If the I_GCRCSENT flag is set, tell the Protocol RX thread */
    // This means a message was received with a good CRC
    if (status.interruptb & FUSB_INTERRUPTB_I_GCRCSENT) {
 8000b10:	7afb      	ldrb	r3, [r7, #11]
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d004      	beq.n	8000b24 <_ZN12PolicyEngine10IRQOccuredEv+0x34>
      readPendingMessage();
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ff9d 	bl	8000a5a <_ZN12PolicyEngine18readPendingMessageEv>
      returnValue = true;
 8000b20:	2301      	movs	r3, #1
 8000b22:	73fb      	strb	r3, [r7, #15]
    }

    /* If the I_TXSENT or I_RETRYFAIL flag is set, tell the Protocol TX
     * thread */
    if (status.interrupta & FUSB_INTERRUPTA_I_TXSENT) {
 8000b24:	7abb      	ldrb	r3, [r7, #10]
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d006      	beq.n	8000b3c <_ZN12PolicyEngine10IRQOccuredEv+0x4c>
      notify(Notifications::I_TXSENT);
 8000b2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f000 f861 	bl	8000bfa <_ZN12PolicyEngine6notifyENS_13NotificationsE>
      returnValue = true;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	73fb      	strb	r3, [r7, #15]
    }
    if (status.interrupta & FUSB_INTERRUPTA_I_RETRYFAIL) {
 8000b3c:	7abb      	ldrb	r3, [r7, #10]
 8000b3e:	f003 0310 	and.w	r3, r3, #16
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d006      	beq.n	8000b54 <_ZN12PolicyEngine10IRQOccuredEv+0x64>
      notify(Notifications::I_RETRYFAIL);
 8000b46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f000 f855 	bl	8000bfa <_ZN12PolicyEngine6notifyENS_13NotificationsE>
      returnValue = true;
 8000b50:	2301      	movs	r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
    }

    /* If the I_OCP_TEMP and OVRTEMP flags are set, tell the Policy
     * Engine thread */
    if ((status.interrupta & FUSB_INTERRUPTA_I_OCP_TEMP) && (status.status1 & FUSB_STATUS1_OVRTEMP)) {
 8000b54:	7abb      	ldrb	r3, [r7, #10]
 8000b56:	b25b      	sxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	da0a      	bge.n	8000b72 <_ZN12PolicyEngine10IRQOccuredEv+0x82>
 8000b5c:	7b7b      	ldrb	r3, [r7, #13]
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d005      	beq.n	8000b72 <_ZN12PolicyEngine10IRQOccuredEv+0x82>
      notify(Notifications::I_OVRTEMP);
 8000b66:	2120      	movs	r1, #32
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f000 f846 	bl	8000bfa <_ZN12PolicyEngine6notifyENS_13NotificationsE>
      returnValue = true;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	73fb      	strb	r3, [r7, #15]
    }
  }
  return returnValue;
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <_ZN10ringbufferI6pd_msgLj4EE4pushEPKS0_>:
 */
template <typename T, size_t size> class ringbuffer {
public:
  explicit ringbuffer() : begin(0), end(0), wrap(false) {}

  void push(const T *data) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]

    memcpy(buffer + end, data, sizeof(T));
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000b8e:	015b      	lsls	r3, r3, #5
 8000b90:	4413      	add	r3, r2
 8000b92:	2220      	movs	r2, #32
 8000b94:	6839      	ldr	r1, [r7, #0]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f006 ffec 	bl	8007b74 <memcpy>
    // If going to wrap, push start along to maintain order
    if (begin == end && wrap) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d10d      	bne.n	8000bc8 <_ZN10ringbufferI6pd_msgLj4EE4pushEPKS0_+0x4c>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d008      	beq.n	8000bc8 <_ZN10ringbufferI6pd_msgLj4EE4pushEPKS0_+0x4c>
      begin = (begin + 1) % size;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	f003 0203 	and.w	r2, r3, #3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
    end = (end + 1) % size;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000bce:	3301      	adds	r3, #1
 8000bd0:	f003 0203 	and.w	r2, r3, #3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (begin == end) {
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d103      	bne.n	8000bf2 <_ZN10ringbufferI6pd_msgLj4EE4pushEPKS0_+0x76>
      wrap = true;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2201      	movs	r2, #1
 8000bee:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    }
  }
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_ZN12PolicyEngine6notifyENS_13NotificationsE>:
#include <pd.h>
#include <stdbool.h>
#ifdef PD_DEBUG_OUTPUT
#include "stdio.h"
#endif
void PolicyEngine::notify(PolicyEngine::Notifications notification) {
 8000bfa:	b480      	push	{r7}
 8000bfc:	b085      	sub	sp, #20
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
 8000c02:	6039      	str	r1, [r7, #0]
	uint32_t val = (uint32_t) notification;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	60fb      	str	r3, [r7, #12]
	currentEvents |= val;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	641a      	str	r2, [r3, #64]	; 0x40
#ifdef PD_DEBUG_OUTPUT
	printf("Notification received  %04X\r\n", (int) notification);
#endif

}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <_ZN12PolicyEngine14printStateNameEv>:
void PolicyEngine::printStateName() {
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
			"PESinkSendSoftResetResp", "PESinkSendNotSupported",
			"PESinkChunkReceived", "PESinkNotSupportedReceived",
			"PESinkSourceUnresponsive", };
	printf("Current state - %s\r\n", names[(int) state]);
#endif
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <_ZN12PolicyEngine6threadEv>:
bool PolicyEngine::thread() {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	switch (state) {
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8000c42:	2b18      	cmp	r3, #24
 8000c44:	f200 8117 	bhi.w	8000e76 <_ZN12PolicyEngine6threadEv+0x242>
 8000c48:	a201      	add	r2, pc, #4	; (adr r2, 8000c50 <_ZN12PolicyEngine6threadEv+0x1c>)
 8000c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4e:	bf00      	nop
 8000c50:	08000e41 	.word	0x08000e41
 8000c54:	08000e53 	.word	0x08000e53
 8000c58:	08000e65 	.word	0x08000e65
 8000c5c:	08000cb5 	.word	0x08000cb5
 8000c60:	08000cc7 	.word	0x08000cc7
 8000c64:	08000cd9 	.word	0x08000cd9
 8000c68:	08000ceb 	.word	0x08000ceb
 8000c6c:	08000cfd 	.word	0x08000cfd
 8000c70:	08000d0f 	.word	0x08000d0f
 8000c74:	08000d21 	.word	0x08000d21
 8000c78:	08000d33 	.word	0x08000d33
 8000c7c:	08000d45 	.word	0x08000d45
 8000c80:	08000d57 	.word	0x08000d57
 8000c84:	08000d69 	.word	0x08000d69
 8000c88:	08000d7b 	.word	0x08000d7b
 8000c8c:	08000d8d 	.word	0x08000d8d
 8000c90:	08000d9f 	.word	0x08000d9f
 8000c94:	08000db1 	.word	0x08000db1
 8000c98:	08000dc3 	.word	0x08000dc3
 8000c9c:	08000dd5 	.word	0x08000dd5
 8000ca0:	08000de7 	.word	0x08000de7
 8000ca4:	08000df9 	.word	0x08000df9
 8000ca8:	08000e0b 	.word	0x08000e0b
 8000cac:	08000e2f 	.word	0x08000e2f
 8000cb0:	08000e1d 	.word	0x08000e1d

	case PESinkStartup:
		state = pe_sink_startup();
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f000 f9ed 	bl	8001094 <_ZN12PolicyEngine15pe_sink_startupEv>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000cc4:	e0dc      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkDiscovery:
		state = pe_sink_discovery();
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f000 f9fa 	bl	80010c0 <_ZN12PolicyEngine17pe_sink_discoveryEv>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	461a      	mov	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000cd6:	e0d3      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSetupWaitCap:
		state = pe_sink_setup_wait_cap();
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f000 f9fc 	bl	80010d6 <_ZN12PolicyEngine22pe_sink_setup_wait_capEv>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000ce8:	e0ca      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkWaitCap:
		state = pe_sink_wait_cap();
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f000 fa03 	bl	80010f6 <_ZN12PolicyEngine16pe_sink_wait_capEv>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000cfa:	e0c1      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkEvalCap:
		state = pe_sink_eval_cap();
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 fa62 	bl	80011c6 <_ZN12PolicyEngine16pe_sink_eval_capEv>
 8000d02:	4603      	mov	r3, r0
 8000d04:	461a      	mov	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000d0c:	e0b8      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSelectCapTx:
		state = pe_sink_select_cap_tx();
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f000 fad1 	bl	80012b6 <_ZN12PolicyEngine21pe_sink_select_cap_txEv>
 8000d14:	4603      	mov	r3, r0
 8000d16:	461a      	mov	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000d1e:	e0af      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSelectCap:
		state = pe_sink_select_cap();
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f000 fade 	bl	80012e2 <_ZN12PolicyEngine18pe_sink_select_capEv>
 8000d26:	4603      	mov	r3, r0
 8000d28:	461a      	mov	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000d30:	e0a6      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkWaitCapResp:
		state = pe_sink_wait_cap_resp();
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f000 faeb 	bl	800130e <_ZN12PolicyEngine21pe_sink_wait_cap_respEv>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000d42:	e09d      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkTransitionSink:
		state = pe_sink_transition_sink();
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f000 fb62 	bl	800140e <_ZN12PolicyEngine23pe_sink_transition_sinkEv>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000d54:	e094      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkReady:
		state = pe_sink_ready();
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 fb92 	bl	8001480 <_ZN12PolicyEngine13pe_sink_readyEv>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	461a      	mov	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000d66:	e08b      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkGetSourceCap:
		state = pe_sink_get_source_cap();
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f000 fce0 	bl	800172e <_ZN12PolicyEngine22pe_sink_get_source_capEv>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461a      	mov	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000d78:	e082      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkGiveSinkCap:
		state = pe_sink_give_sink_cap();
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f000 fcf0 	bl	8001760 <_ZN12PolicyEngine21pe_sink_give_sink_capEv>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000d8a:	e079      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkHardReset:
		state = pe_sink_hard_reset();
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f000 fd07 	bl	80017a0 <_ZN12PolicyEngine18pe_sink_hard_resetEv>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000d9c:	e070      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkTransitionDefault:
		state = pe_sink_transition_default();
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f000 fd1a 	bl	80017d8 <_ZN12PolicyEngine26pe_sink_transition_defaultEv>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000dae:	e067      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkHandleSoftReset:
		state = pe_sink_soft_reset();
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f000 fd20 	bl	80017f6 <_ZN12PolicyEngine18pe_sink_soft_resetEv>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000dc0:	e05e      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSendSoftReset:
		state = pe_sink_send_soft_reset();
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 fd2d 	bl	8001822 <_ZN12PolicyEngine23pe_sink_send_soft_resetEv>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000dd2:	e055      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSendSoftResetTxOK:
		state = pe_sink_send_soft_reset_tx_ok();
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f000 fd3d 	bl	8001854 <_ZN12PolicyEngine29pe_sink_send_soft_reset_tx_okEv>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	461a      	mov	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000de4:	e04c      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSendSoftResetResp:
		state = pe_sink_send_soft_reset_resp();
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f000 fd45 	bl	8001876 <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000df6:	e043      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSendNotSupported:
		state = pe_sink_send_not_supported();
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 fd84 	bl	8001906 <_ZN12PolicyEngine26pe_sink_send_not_supportedEv>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	461a      	mov	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000e08:	e03a      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkChunkReceived:
		state = pe_sink_chunk_received();
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f000 fda8 	bl	8001960 <_ZN12PolicyEngine22pe_sink_chunk_receivedEv>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000e1a:	e031      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSourceUnresponsive:
		state = pe_sink_source_unresponsive();
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f000 fdbe 	bl	800199e <_ZN12PolicyEngine27pe_sink_source_unresponsiveEv>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000e2c:	e028      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkNotSupportedReceived:
		state = pe_sink_not_supported_received();
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 fda4 	bl	800197c <_ZN12PolicyEngine30pe_sink_not_supported_receivedEv>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000e3e:	e01f      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PEWaitingEvent:
		state = pe_sink_wait_event();
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f000 fdba 	bl	80019ba <_ZN12PolicyEngine18pe_sink_wait_eventEv>
 8000e46:	4603      	mov	r3, r0
 8000e48:	461a      	mov	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000e50:	e016      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PEWaitingMessageTx:
		state = pe_sink_wait_send_done();
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 fe54 	bl	8001b00 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000e62:	e00d      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	case PEWaitingMessageGoodCRC:
		state = pe_sink_wait_good_crc();
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 fdef 	bl	8001a48 <_ZN12PolicyEngine21pe_sink_wait_good_crcEv>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000e74:	e004      	b.n	8000e80 <_ZN12PolicyEngine6threadEv+0x24c>
	default:
		state = PESinkStartup;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2203      	movs	r2, #3
 8000e7a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8000e7e:	bf00      	nop
	}
	if (state != PEWaitingEvent) {
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d002      	beq.n	8000e90 <_ZN12PolicyEngine6threadEv+0x25c>
		printStateName();
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff fec8 	bl	8000c20 <_ZN12PolicyEngine14printStateNameEv>
	}
	return state != PEWaitingEvent;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	bf14      	ite	ne
 8000e9a:	2301      	movne	r3, #1
 8000e9c:	2300      	moveq	r3, #0
 8000e9e:	b2db      	uxtb	r3, r3
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <_ZN12PolicyEngine7isPD3_0Ev>:

bool PolicyEngine::isPD3_0() {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	return (hdr_template & PD_HDR_SPECREV) == PD_SPECREV_3_0;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000eb4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000eb8:	2b80      	cmp	r3, #128	; 0x80
 8000eba:	bf0c      	ite	eq
 8000ebc:	2301      	moveq	r3, #1
 8000ebe:	2300      	movne	r3, #0
 8000ec0:	b2db      	uxtb	r3, r3
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg>:
		}
	}
}
PolicyEngine::policy_engine_state PolicyEngine::pe_start_message_tx(
		PolicyEngine::policy_engine_state postTxState,
		PolicyEngine::policy_engine_state txFailState, pd_msg *msg) {
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	72fb      	strb	r3, [r7, #11]
 8000edc:	4613      	mov	r3, r2
 8000ede:	72bb      	strb	r3, [r7, #10]
#ifdef PD_DEBUG_OUTPUT
	printf("Starting message Tx - %02X\r\n", PD_MSGTYPE_GET(msg));
#endif
	if (PD_MSGTYPE_GET(msg) == PD_MSGTYPE_SOFT_RESET
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	885b      	ldrh	r3, [r3, #2]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	f003 031f 	and.w	r3, r3, #31
 8000eea:	2b0d      	cmp	r3, #13
 8000eec:	d10d      	bne.n	8000f0a <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg+0x3c>
			&& PD_NUMOBJ_GET(msg) == 0) {
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	885b      	ldrh	r3, [r3, #2]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	131b      	asrs	r3, r3, #12
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d105      	bne.n	8000f0a <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg+0x3c>
		/* Clear MessageIDCounter */
		_tx_messageidcounter = 0;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		return postTxState; // Message is "done"
 8000f06:	7afb      	ldrb	r3, [r7, #11]
 8000f08:	e032      	b.n	8000f70 <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg+0xa2>
	}
	postSendFailedState = txFailState;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	7aba      	ldrb	r2, [r7, #10]
 8000f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	postSendState = postTxState;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	7afa      	ldrb	r2, [r7, #11]
 8000f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	msg->hdr &= ~PD_HDR_MESSAGEID;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	885b      	ldrh	r3, [r3, #2]
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	805a      	strh	r2, [r3, #2]
	msg->hdr |= (_tx_messageidcounter % 8) << PD_HDR_MESSAGEID_SHIFT;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	885b      	ldrh	r3, [r3, #2]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	b21a      	sxth	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000f38:	025b      	lsls	r3, r3, #9
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	805a      	strh	r2, [r3, #2]

	/* PD 3.0 collision avoidance */
	if (PolicyEngine::isPD3_0()) {
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f7ff ffab 	bl	8000ea8 <_ZN12PolicyEngine7isPD3_0Ev>
		//    while (fusb_get_typec_current() != fusb_sink_tx_ok) {
		//      vTaskDelay(TICKS_10MS);
		//    }
	}
	/* Send the message to the PHY */
	fusb.fusb_send_message(msg);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fb2c 	bl	80005b4 <_ZNK7FUSB30217fusb_send_messageEPK6pd_msg>
#ifdef PD_DEBUG_OUTPUT
	printf("Message queued to send\r\n");
#endif

	// Setup waiting for notification
	return waitForEvent(PEWaitingMessageTx,
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f60:	f640 6201 	movw	r2, #3585	; 0xe01
 8000f64:	2101      	movs	r1, #1
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f000 f818 	bl	8000f9c <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8000f6c:	4603      	mov	r3, r0
			(uint32_t) Notifications::RESET | (uint32_t) Notifications::DISCARD
					| (uint32_t) Notifications::I_TXSENT
					| (uint32_t) Notifications::I_RETRYFAIL, 0xFFFFFFFF);
 8000f6e:	bf00      	nop
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <_ZN12PolicyEngine11clearEventsEm>:

void PolicyEngine::clearEvents(uint32_t notification) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	currentEvents &= ~notification;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>:

PolicyEngine::policy_engine_state PolicyEngine::waitForEvent(
		PolicyEngine::policy_engine_state evalState, uint32_t notification,
		uint32_t timeout) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	72fb      	strb	r3, [r7, #11]
	// Record the new state, and the desired notifications mask, then schedule the waiter state
	waitingEventsMask = notification;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	639a      	str	r2, [r3, #56]	; 0x38
#ifdef PD_DEBUG_OUTPUT
	printf("Waiting for events %04X\r\n", (int) notification);
#endif

	// If notification is already present, we can continue straight to eval state
	if (currentEvents & waitingEventsMask) {
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fba:	4013      	ands	r3, r2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x28>
		return evalState;
 8000fc0:	7afb      	ldrb	r3, [r7, #11]
 8000fc2:	e030      	b.n	8001026 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x8a>
	}
	//If waiting for message rx, but one is in the buffer, jump to eval
	if ((waitingEventsMask & (uint32_t) Notifications::MSG_RX)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d014      	beq.n	8000ffa <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x5e>
			== (uint32_t) Notifications::MSG_RX) {
		if (incomingMessages.getOccupied() > 0) {
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3364      	adds	r3, #100	; 0x64
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f82a 	bl	800102e <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	bf14      	ite	ne
 8000fe0:	2301      	movne	r3, #1
 8000fe2:	2300      	moveq	r3, #0
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d007      	beq.n	8000ffa <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x5e>
			currentEvents|=(uint32_t) Notifications::MSG_RX;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f043 0202 	orr.w	r2, r3, #2
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	641a      	str	r2, [r3, #64]	; 0x40
			return evalState;
 8000ff6:	7afb      	ldrb	r3, [r7, #11]
 8000ff8:	e015      	b.n	8001026 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x8a>
		}
	}
	postNotifcationEvalState = evalState;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	7afa      	ldrb	r2, [r7, #11]
 8000ffe:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	if (timeout == 0xFFFFFFFF) {
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001008:	d104      	bne.n	8001014 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x78>
		waitingEventsTimeout = 0xFFFFFFFF;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	63da      	str	r2, [r3, #60]	; 0x3c
 8001012:	e007      	b.n	8001024 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x88>
	} else {
		waitingEventsTimeout = getTimeStamp() + timeout;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	4798      	blx	r3
 800101a:	4602      	mov	r2, r0
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	441a      	add	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	return policy_engine_state::PEWaitingEvent;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>:
    if (wrap && (begin == 0)) {
      wrap = false;
    }
  }
  // Returns number of objects queued in the buffer
  size_t getOccupied() const {
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
    if (end == begin) {
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001042:	429a      	cmp	r2, r3
 8001044:	d108      	bne.n	8001058 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv+0x2a>
      return wrap ? size : 0;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv+0x26>
 8001050:	2304      	movs	r3, #4
 8001052:	e019      	b.n	8001088 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv+0x5a>
 8001054:	2300      	movs	r3, #0
 8001056:	e017      	b.n	8001088 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv+0x5a>
    } else if (end > begin) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001064:	429a      	cmp	r2, r3
 8001066:	d907      	bls.n	8001078 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv+0x4a>
      return end - begin;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	e007      	b.n	8001088 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv+0x5a>
    } else {
      return size + end - begin;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	3304      	adds	r3, #4
    }
  }
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <_ZN12PolicyEngine15pe_sink_startupEv>:
#include <stdbool.h>
#ifdef PD_DEBUG_OUTPUT
#include "stdio.h"
#endif

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_startup() {
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	/* We don't have an explicit contract currently */
	_explicit_contract = false;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	PPSTimerEnabled = false;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
	currentEvents = 0;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
	 * state: startup and exiting hard reset.  On startup, the protocol layer
	 * is reset by the startup procedure.  When exiting hard reset, the
	 * protocol layer is reset by the hard reset state machine.  Since it's
	 * already done somewhere else, there's no need to do it again here. */

	return PESinkDiscovery;
 80010b2:	2304      	movs	r3, #4
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_ZN12PolicyEngine17pe_sink_discoveryEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_discovery() {
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

	fusb.runCCLineSelection();

	*/

	return PESinkSetupWaitCap;
 80010c8:	2305      	movs	r3, #5
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <_ZN12PolicyEngine22pe_sink_setup_wait_capEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_setup_wait_cap() { //
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]

	return waitForEvent(policy_engine_state::PESinkWaitCap,
 80010de:	f242 7310 	movw	r3, #10000	; 0x2710
 80010e2:	2223      	movs	r2, #35	; 0x23
 80010e4:	2106      	movs	r1, #6
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ff58 	bl	8000f9c <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 80010ec:	4603      	mov	r3, r0
			(uint32_t) Notifications::MSG_RX
					| (uint32_t) Notifications::I_OVRTEMP
					| (uint32_t) Notifications::RESET,
			// Wait for cap timeout
			PD_T_TYPEC_SINK_WAIT_CAP);
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_ZN12PolicyEngine16pe_sink_wait_capEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_wait_cap() {
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b084      	sub	sp, #16
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
	/* Fetch a message from the protocol layer */
	uint32_t evt = currentEvents;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	60fb      	str	r3, [r7, #12]
	clearEvents();
 8001104:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff35 	bl	8000f78 <_ZN12PolicyEngine11clearEventsEm>
#ifdef PD_DEBUG_OUTPUT
	printf("Wait Cap Event %04X\r\n", (int) evt);
#endif

	/* If we're too hot, we shouldn't negotiate power yet */
	if (evt & (uint32_t) Notifications::I_OVRTEMP) {
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f003 0320 	and.w	r3, r3, #32
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <_ZN12PolicyEngine16pe_sink_wait_capEv+0x26>
		return PESinkSetupWaitCap;
 8001118:	2305      	movs	r3, #5
 800111a:	e050      	b.n	80011be <_ZN12PolicyEngine16pe_sink_wait_capEv+0xc8>
	}

	/* If we got a message */
	if (incomingMessages.getOccupied() > 0) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3364      	adds	r3, #100	; 0x64
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff84 	bl	800102e <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	bf14      	ite	ne
 800112c:	2301      	movne	r3, #1
 800112e:	2300      	moveq	r3, #0
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d042      	beq.n	80011bc <_ZN12PolicyEngine16pe_sink_wait_capEv+0xc6>
		/* Get the message */
		while (incomingMessages.getOccupied()) {
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3364      	adds	r3, #100	; 0x64
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff77 	bl	800102e <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	bf14      	ite	ne
 8001146:	2301      	movne	r3, #1
 8001148:	2300      	moveq	r3, #0
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d035      	beq.n	80011bc <_ZN12PolicyEngine16pe_sink_wait_capEv+0xc6>
			incomingMessages.pop(&tempMessage);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3344      	adds	r3, #68	; 0x44
 800115a:	4619      	mov	r1, r3
 800115c:	4610      	mov	r0, r2
 800115e:	f000 fd33 	bl	8001bc8 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_>
			/* If we got a Source_Capabilities message, read it. */
			if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_SOURCE_CAPABILITIES
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001168:	f003 031f 	and.w	r3, r3, #31
 800116c:	2b01      	cmp	r3, #1
 800116e:	d1e2      	bne.n	8001136 <_ZN12PolicyEngine16pe_sink_wait_capEv+0x40>
					&& PD_NUMOBJ_GET(&tempMessage) > 0) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001176:	131b      	asrs	r3, r3, #12
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	2b00      	cmp	r3, #0
 800117e:	ddda      	ble.n	8001136 <_ZN12PolicyEngine16pe_sink_wait_capEv+0x40>
#ifdef PD_DEBUG_OUTPUT
				printf("Source Capabilities message RX\r\n");
#endif

				/* First, determine what PD revision we're using */
				if ((hdr_template & PD_HDR_SPECREV) == PD_SPECREV_1_0) {
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001184:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d115      	bne.n	80011b8 <_ZN12PolicyEngine16pe_sink_wait_capEv+0xc2>
					/* If the other end is using at least version 3.0, we'll
					 * use version 3.0. */
					if ((tempMessage.hdr & PD_HDR_SPECREV) >= PD_SPECREV_3_0) {
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001192:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001196:	2b7f      	cmp	r3, #127	; 0x7f
 8001198:	dd07      	ble.n	80011aa <_ZN12PolicyEngine16pe_sink_wait_capEv+0xb4>
						hdr_template |= PD_SPECREV_3_0;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800119e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	85da      	strh	r2, [r3, #46]	; 0x2e
 80011a8:	e006      	b.n	80011b8 <_ZN12PolicyEngine16pe_sink_wait_capEv+0xc2>
						/* Otherwise, use 2.0.  Don't worry about the 1.0 case
						 * because we don't have hardware for PD 1.0 signaling. */
					} else {
						hdr_template |= PD_SPECREV_2_0;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80011ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	85da      	strh	r2, [r3, #46]	; 0x2e
					}
				}
				return PESinkEvalCap;
 80011b8:	2307      	movs	r3, #7
 80011ba:	e000      	b.n	80011be <_ZN12PolicyEngine16pe_sink_wait_capEv+0xc8>
			}
		}
	}

	/* If we failed to get a message, wait longer */
	return PESinkSetupWaitCap;
 80011bc:	2305      	movs	r3, #5
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <_ZN12PolicyEngine16pe_sink_eval_capEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_eval_cap() {
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
	/* If we have a Source_Capabilities message, remember the index of the
	 * first PPS APDO so we can check if the request is for a PPS APDO in
	 * PE_SNK_Select_Cap. */
	/* Start by assuming we won't find a PPS APDO (set the index greater
	 * than the maximum possible) */
	_pps_index = 0xFF;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	22ff      	movs	r2, #255	; 0xff
 80011d2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	/* New capabilities also means we can't be making a request from the
	 * same PPS APDO */
	/* Search for the first PPS APDO */
	for (int i = 0; i < PD_NUMOBJ_GET(&tempMessage); i++) {
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80011e0:	131b      	asrs	r3, r3, #12
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	da20      	bge.n	800122e <_ZN12PolicyEngine16pe_sink_eval_capEv+0x68>
		if ((tempMessage.obj[i] & PD_PDO_TYPE) == PD_PDO_TYPE_AUGMENTED
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	3310      	adds	r3, #16
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80011fc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001200:	d111      	bne.n	8001226 <_ZN12PolicyEngine16pe_sink_eval_capEv+0x60>
				&& (tempMessage.obj[i] & PD_APDO_TYPE) == PD_APDO_TYPE_PPS) {
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	3310      	adds	r3, #16
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d107      	bne.n	8001226 <_ZN12PolicyEngine16pe_sink_eval_capEv+0x60>
			_pps_index = i + 1;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	3301      	adds	r3, #1
 800121c:	b2da      	uxtb	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			break;
 8001224:	e003      	b.n	800122e <_ZN12PolicyEngine16pe_sink_eval_capEv+0x68>
	for (int i = 0; i < PD_NUMOBJ_GET(&tempMessage); i++) {
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3301      	adds	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	e7d5      	b.n	80011da <_ZN12PolicyEngine16pe_sink_eval_capEv+0x14>
		}
	}
	_unconstrained_power = tempMessage.obj[0] & PD_PDO_SRC_FIXED_UNCONSTRAINED;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001232:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	bf14      	ite	ne
 800123a:	2301      	movne	r3, #1
 800123c:	2300      	moveq	r3, #0
 800123e:	b2da      	uxtb	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Ask the DPM what to request */
	if (pdbs_dpm_evaluate_capability(&tempMessage, &_last_dpm_request)) {
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	f102 0044 	add.w	r0, r2, #68	; 0x44
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8001256:	4611      	mov	r1, r2
 8001258:	4798      	blx	r3
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d025      	beq.n	80012ac <_ZN12PolicyEngine16pe_sink_eval_capEv+0xe6>
		_last_dpm_request.hdr |= hdr_template;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800126a:	4313      	orrs	r3, r2
 800126c:	b29a      	uxth	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
		/* If we're using PD 3.0 */
		if ((hdr_template & PD_HDR_SPECREV) == PD_SPECREV_3_0) {
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001278:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800127c:	2b80      	cmp	r3, #128	; 0x80
 800127e:	d113      	bne.n	80012a8 <_ZN12PolicyEngine16pe_sink_eval_capEv+0xe2>
			/* If the request was for a PPS APDO, start time callbacks if not started
			 */
			if (PD_RDO_OBJPOS_GET(&_last_dpm_request) >= _pps_index) {
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001286:	0f1b      	lsrs	r3, r3, #28
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001292:	4293      	cmp	r3, r2
 8001294:	d304      	bcc.n	80012a0 <_ZN12PolicyEngine16pe_sink_eval_capEv+0xda>
				PPSTimerEnabled = true;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
 800129e:	e003      	b.n	80012a8 <_ZN12PolicyEngine16pe_sink_eval_capEv+0xe2>
			} else {
				PPSTimerEnabled = false;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
			}
		}
		return PESinkSelectCapTx;
 80012a8:	2308      	movs	r3, #8
 80012aa:	e000      	b.n	80012ae <_ZN12PolicyEngine16pe_sink_eval_capEv+0xe8>
	}

	return PESinkWaitCap;
 80012ac:	2306      	movs	r3, #6
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <_ZN12PolicyEngine21pe_sink_select_cap_txEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_select_cap_tx() {
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]

	/* Transmit the request */
	clearEvents(); // clear all pending incase of an rx while prepping
 80012be:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff fe58 	bl	8000f78 <_ZN12PolicyEngine11clearEventsEm>

#ifdef PD_DEBUG_OUTPUT
	printf("Sending desired capability\r\n");
#endif
	return pe_start_message_tx(policy_engine_state::PESinkSelectCap,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80012ce:	220f      	movs	r2, #15
 80012d0:	2109      	movs	r1, #9
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fdfb 	bl	8000ece <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg>
 80012d8:	4603      	mov	r3, r0
			PESinkHardReset, &_last_dpm_request);
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_ZN12PolicyEngine18pe_sink_select_capEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_select_cap() {
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
	// Have transmitted the selected cap, transition to waiting for the response
	clearEvents();
 80012ea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff fe42 	bl	8000f78 <_ZN12PolicyEngine11clearEventsEm>
	// wait for a response
	return waitForEvent(PESinkWaitCapResp,
 80012f4:	f640 238c 	movw	r3, #2700	; 0xa8c
 80012f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80012fc:	210a      	movs	r1, #10
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff fe4c 	bl	8000f9c <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8001304:	4603      	mov	r3, r0
			(uint32_t) Notifications::MSG_RX | (uint32_t) Notifications::RESET
					| (uint32_t) Notifications::TIMEOUT, PD_T_SENDER_RESPONSE);
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <_ZN12PolicyEngine21pe_sink_wait_cap_respEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_wait_cap_resp() {
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
	/* Wait for a response */
	clearEvents();
 8001316:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fe2c 	bl	8000f78 <_ZN12PolicyEngine11clearEventsEm>

	/* Get the response message */
	while (incomingMessages.getOccupied()) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3364      	adds	r3, #100	; 0x64
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fe82 	bl	800102e <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	bf14      	ite	ne
 8001330:	2301      	movne	r3, #1
 8001332:	2300      	moveq	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d05b      	beq.n	80013f2 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0xe4>
		incomingMessages.pop(&tempMessage);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3344      	adds	r3, #68	; 0x44
 8001344:	4619      	mov	r1, r3
 8001346:	4610      	mov	r0, r2
 8001348:	f000 fc3e 	bl	8001bc8 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_>
		/* If the source accepted our request, wait for the new power message*/
		if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_ACCEPT
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001352:	f003 031f 	and.w	r3, r3, #31
 8001356:	2b03      	cmp	r3, #3
 8001358:	d110      	bne.n	800137c <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x6e>
				&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001360:	131b      	asrs	r3, r3, #12
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	2b00      	cmp	r3, #0
 8001368:	d108      	bne.n	800137c <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x6e>
			return waitForEvent(PESinkTransitionSink,
 800136a:	f241 3388 	movw	r3, #5000	; 0x1388
 800136e:	2203      	movs	r2, #3
 8001370:	210b      	movs	r1, #11
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff fe12 	bl	8000f9c <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8001378:	4603      	mov	r3, r0
					(uint32_t) Notifications::MSG_RX
							| (uint32_t) Notifications::RESET,
					PD_T_PS_TRANSITION);
 800137a:	e044      	b.n	8001406 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0xf8>
			/* If the message was a Soft_Reset, do the soft reset procedure */
		} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_SOFT_RESET
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001382:	f003 031f 	and.w	r3, r3, #31
 8001386:	2b0d      	cmp	r3, #13
 8001388:	d109      	bne.n	800139e <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x90>
				&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001390:	131b      	asrs	r3, r3, #12
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x90>
			return PESinkHandleSoftReset;
 800139a:	2311      	movs	r3, #17
 800139c:	e033      	b.n	8001406 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0xf8>
			/* If the message was Wait or Reject */
		} else if ((PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_REJECT
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80013a4:	f003 031f 	and.w	r3, r3, #31
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d006      	beq.n	80013ba <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0xac>
				|| PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_WAIT)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80013b2:	f003 031f 	and.w	r3, r3, #31
 80013b6:	2b0c      	cmp	r3, #12
 80013b8:	d1b2      	bne.n	8001320 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x12>
				&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80013c0:	131b      	asrs	r3, r3, #12
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1aa      	bne.n	8001320 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x12>
#ifdef PD_DEBUG_OUTPUT
			printf("Requested Capabilities Rejected\r\n");
#endif
			/* If we don't have an explicit contract, wait for capabilities */
			if (!_explicit_contract) {
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013d0:	f083 0301 	eor.w	r3, r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0xd0>
				return PESinkSetupWaitCap;
 80013da:	2305      	movs	r3, #5
 80013dc:	e013      	b.n	8001406 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0xf8>
				/* If we do have an explicit contract, go to the ready state */
			} else {
				return waitForEvent(PESinkReady, (uint32_t) Notifications::ALL,
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80013e6:	210c      	movs	r1, #12
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fdd7 	bl	8000f9c <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 80013ee:	4603      	mov	r3, r0
						0xFFFFFFFF);
 80013f0:	e009      	b.n	8001406 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0xf8>
			}
		}
	}
	return waitForEvent(PESinkWaitCapResp,
 80013f2:	f640 238c 	movw	r3, #2700	; 0xa8c
 80013f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80013fa:	210a      	movs	r1, #10
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff fdcd 	bl	8000f9c <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8001402:	4603      	mov	r3, r0
			(uint32_t) Notifications::MSG_RX | (uint32_t) Notifications::RESET
					| (uint32_t) Notifications::TIMEOUT, PD_T_SENDER_RESPONSE);
 8001404:	bf00      	nop
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <_ZN12PolicyEngine23pe_sink_transition_sinkEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_transition_sink() {
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
	/* Wait for the PS_RDY message */
	clearEvents();
 8001416:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff fdac 	bl	8000f78 <_ZN12PolicyEngine11clearEventsEm>
	/* If we received a message, read it */
	while (incomingMessages.getOccupied()) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3364      	adds	r3, #100	; 0x64
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fe02 	bl	800102e <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	bf14      	ite	ne
 8001430:	2301      	movne	r3, #1
 8001432:	2300      	moveq	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d01d      	beq.n	8001476 <_ZN12PolicyEngine23pe_sink_transition_sinkEv+0x68>

		incomingMessages.pop(&tempMessage);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3344      	adds	r3, #68	; 0x44
 8001444:	4619      	mov	r1, r3
 8001446:	4610      	mov	r0, r2
 8001448:	f000 fbbe 	bl	8001bc8 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_>

		/* If we got a PS_RDY, handle it */
		if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_PS_RDY
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001452:	f003 031f 	and.w	r3, r3, #31
 8001456:	2b06      	cmp	r3, #6
 8001458:	d1e2      	bne.n	8001420 <_ZN12PolicyEngine23pe_sink_transition_sinkEv+0x12>
				&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001460:	131b      	asrs	r3, r3, #12
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1da      	bne.n	8001420 <_ZN12PolicyEngine23pe_sink_transition_sinkEv+0x12>
			/* We just finished negotiating an explicit contract */
			_explicit_contract = true;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

			/* Negotiation finished */
			return PESinkReady;
 8001472:	230c      	movs	r3, #12
 8001474:	e000      	b.n	8001478 <_ZN12PolicyEngine23pe_sink_transition_sinkEv+0x6a>
			/* If there was a protocol error, send a hard reset */
		}
	}
	// Timeout
	return PESinkSendSoftReset;
 8001476:	2312      	movs	r3, #18
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <_ZN12PolicyEngine13pe_sink_readyEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_ready() {
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	uint32_t evt = currentEvents;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	60fb      	str	r3, [r7, #12]
	clearEvents();
 800148e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fd70 	bl	8000f78 <_ZN12PolicyEngine11clearEventsEm>
	/* If SinkPPSPeriodicTimer ran out, send a new request */
	if (evt & (uint32_t) Notifications::PPS_REQUEST) {
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <_ZN12PolicyEngine13pe_sink_readyEv+0x26>
		return PESinkSelectCap;
 80014a2:	2309      	movs	r3, #9
 80014a4:	e13f      	b.n	8001726 <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
	}

	/* If we overheated, send a hard reset */
	if (evt & (uint32_t) Notifications::I_OVRTEMP) {
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f003 0320 	and.w	r3, r3, #32
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <_ZN12PolicyEngine13pe_sink_readyEv+0x34>
		return PESinkHardReset;
 80014b0:	230f      	movs	r3, #15
 80014b2:	e138      	b.n	8001726 <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
	}
	/* If the DPM wants us to, send a Get_Source_Cap message */
	if (evt & (uint32_t) Notifications::GET_SOURCE_CAP) {
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <_ZN12PolicyEngine13pe_sink_readyEv+0x42>
		return PESinkGetSourceCap;
 80014be:	230d      	movs	r3, #13
 80014c0:	e131      	b.n	8001726 <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
	}
	/* If the DPM wants new power, let it figure out what power it wants
	 * exactly.  This isn't exactly the transition from the spec (that would be
	 * SelectCap, not EvalCap), but this works better with the particular
	 * design of this firmware. */
	if (evt & (uint32_t) Notifications::NEW_POWER) {
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <_ZN12PolicyEngine13pe_sink_readyEv+0x50>
		/* Tell the protocol layer we're starting an AMS */
		return PESinkEvalCap;
 80014cc:	2307      	movs	r3, #7
 80014ce:	e12a      	b.n	8001726 <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
	}

	/* If we received a message */
	if (evt & (uint32_t) Notifications::MSG_RX) {
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 811b 	beq.w	8001712 <_ZN12PolicyEngine13pe_sink_readyEv+0x292>
		if (incomingMessages.getOccupied()) {
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3364      	adds	r3, #100	; 0x64
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fda4 	bl	800102e <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bf14      	ite	ne
 80014ec:	2301      	movne	r3, #1
 80014ee:	2300      	moveq	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 810d 	beq.w	8001712 <_ZN12PolicyEngine13pe_sink_readyEv+0x292>

			incomingMessages.pop(&tempMessage);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3344      	adds	r3, #68	; 0x44
 8001502:	4619      	mov	r1, r3
 8001504:	4610      	mov	r0, r2
 8001506:	f000 fb5f 	bl	8001bc8 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_>

			/* Ignore vendor-defined messages */
			if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_VENDOR_DEFINED
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001510:	f003 031f 	and.w	r3, r3, #31
 8001514:	2b0f      	cmp	r3, #15
 8001516:	d111      	bne.n	800153c <_ZN12PolicyEngine13pe_sink_readyEv+0xbc>
					&& PD_NUMOBJ_GET(&tempMessage) > 0) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800151e:	131b      	asrs	r3, r3, #12
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	2b00      	cmp	r3, #0
 8001526:	dd09      	ble.n	800153c <_ZN12PolicyEngine13pe_sink_readyEv+0xbc>
				return waitForEvent(PESinkReady, (uint32_t) Notifications::ALL);
 8001528:	f04f 33ff 	mov.w	r3, #4294967295
 800152c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001530:	210c      	movs	r1, #12
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff fd32 	bl	8000f9c <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8001538:	4603      	mov	r3, r0
 800153a:	e0f4      	b.n	8001726 <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* Ignore Ping messages */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_PING
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001542:	f003 031f 	and.w	r3, r3, #31
 8001546:	2b05      	cmp	r3, #5
 8001548:	d111      	bne.n	800156e <_ZN12PolicyEngine13pe_sink_readyEv+0xee>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001550:	131b      	asrs	r3, r3, #12
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	2b00      	cmp	r3, #0
 8001558:	d109      	bne.n	800156e <_ZN12PolicyEngine13pe_sink_readyEv+0xee>
				return waitForEvent(PESinkReady, (uint32_t) Notifications::ALL);
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001562:	210c      	movs	r1, #12
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff fd19 	bl	8000f9c <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 800156a:	4603      	mov	r3, r0
 800156c:	e0db      	b.n	8001726 <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* DR_Swap messages are not supported */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_DR_SWAP
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001574:	f003 031f 	and.w	r3, r3, #31
 8001578:	2b09      	cmp	r3, #9
 800157a:	d109      	bne.n	8001590 <_ZN12PolicyEngine13pe_sink_readyEv+0x110>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001582:	131b      	asrs	r3, r3, #12
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <_ZN12PolicyEngine13pe_sink_readyEv+0x110>
				return PESinkSendNotSupported;
 800158c:	2315      	movs	r3, #21
 800158e:	e0ca      	b.n	8001726 <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* Get_Source_Cap messages are not supported */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_GET_SOURCE_CAP
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001596:	f003 031f 	and.w	r3, r3, #31
 800159a:	2b07      	cmp	r3, #7
 800159c:	d109      	bne.n	80015b2 <_ZN12PolicyEngine13pe_sink_readyEv+0x132>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80015a4:	131b      	asrs	r3, r3, #12
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <_ZN12PolicyEngine13pe_sink_readyEv+0x132>
				return PESinkSendNotSupported;
 80015ae:	2315      	movs	r3, #21
 80015b0:	e0b9      	b.n	8001726 <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* PR_Swap messages are not supported */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_PR_SWAP
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80015b8:	f003 031f 	and.w	r3, r3, #31
 80015bc:	2b0a      	cmp	r3, #10
 80015be:	d109      	bne.n	80015d4 <_ZN12PolicyEngine13pe_sink_readyEv+0x154>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80015c6:	131b      	asrs	r3, r3, #12
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <_ZN12PolicyEngine13pe_sink_readyEv+0x154>
				return PESinkSendNotSupported;
 80015d0:	2315      	movs	r3, #21
 80015d2:	e0a8      	b.n	8001726 <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* VCONN_Swap messages are not supported */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_VCONN_SWAP
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80015da:	f003 031f 	and.w	r3, r3, #31
 80015de:	2b0b      	cmp	r3, #11
 80015e0:	d109      	bne.n	80015f6 <_ZN12PolicyEngine13pe_sink_readyEv+0x176>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80015e8:	131b      	asrs	r3, r3, #12
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <_ZN12PolicyEngine13pe_sink_readyEv+0x176>
				return PESinkSendNotSupported;
 80015f2:	2315      	movs	r3, #21
 80015f4:	e097      	b.n	8001726 <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* Request messages are not supported */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_REQUEST
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80015fc:	f003 031f 	and.w	r3, r3, #31
 8001600:	2b02      	cmp	r3, #2
 8001602:	d109      	bne.n	8001618 <_ZN12PolicyEngine13pe_sink_readyEv+0x198>
					&& PD_NUMOBJ_GET(&tempMessage) > 0) {
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800160a:	131b      	asrs	r3, r3, #12
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	2b00      	cmp	r3, #0
 8001612:	dd01      	ble.n	8001618 <_ZN12PolicyEngine13pe_sink_readyEv+0x198>
				return PESinkSendNotSupported;
 8001614:	2315      	movs	r3, #21
 8001616:	e086      	b.n	8001726 <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* Sink_Capabilities messages are not supported */
			} else if (PD_MSGTYPE_GET(&tempMessage)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800161e:	f003 031f 	and.w	r3, r3, #31
 8001622:	2b04      	cmp	r3, #4
 8001624:	d109      	bne.n	800163a <_ZN12PolicyEngine13pe_sink_readyEv+0x1ba>
					== PD_MSGTYPE_SINK_CAPABILITIES
					&& PD_NUMOBJ_GET(&tempMessage) > 0) {
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800162c:	131b      	asrs	r3, r3, #12
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	2b00      	cmp	r3, #0
 8001634:	dd01      	ble.n	800163a <_ZN12PolicyEngine13pe_sink_readyEv+0x1ba>
				return PESinkSendNotSupported;
 8001636:	2315      	movs	r3, #21
 8001638:	e075      	b.n	8001726 <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* Handle GotoMin messages */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_GOTOMIN
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001640:	f003 031f 	and.w	r3, r3, #31
 8001644:	2b02      	cmp	r3, #2
 8001646:	d109      	bne.n	800165c <_ZN12PolicyEngine13pe_sink_readyEv+0x1dc>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800164e:	131b      	asrs	r3, r3, #12
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <_ZN12PolicyEngine13pe_sink_readyEv+0x1dc>
				return PESinkSendNotSupported;
 8001658:	2315      	movs	r3, #21
 800165a:	e064      	b.n	8001726 <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* Evaluate new Source_Capabilities */
			} else if (PD_MSGTYPE_GET(&tempMessage)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	2b01      	cmp	r3, #1
 8001668:	d109      	bne.n	800167e <_ZN12PolicyEngine13pe_sink_readyEv+0x1fe>
					== PD_MSGTYPE_SOURCE_CAPABILITIES
					&& PD_NUMOBJ_GET(&tempMessage) > 0) {
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001670:	131b      	asrs	r3, r3, #12
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	2b00      	cmp	r3, #0
 8001678:	dd01      	ble.n	800167e <_ZN12PolicyEngine13pe_sink_readyEv+0x1fe>
				return PESinkEvalCap;
 800167a:	2307      	movs	r3, #7
 800167c:	e053      	b.n	8001726 <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* Give sink capabilities when asked */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_GET_SINK_CAP
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001684:	f003 031f 	and.w	r3, r3, #31
 8001688:	2b08      	cmp	r3, #8
 800168a:	d109      	bne.n	80016a0 <_ZN12PolicyEngine13pe_sink_readyEv+0x220>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001692:	131b      	asrs	r3, r3, #12
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <_ZN12PolicyEngine13pe_sink_readyEv+0x220>
				return PESinkGiveSinkCap;
 800169c:	230e      	movs	r3, #14
 800169e:	e042      	b.n	8001726 <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* If the message was a Soft_Reset, do the soft reset procedure */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_SOFT_RESET
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80016a6:	f003 031f 	and.w	r3, r3, #31
 80016aa:	2b0d      	cmp	r3, #13
 80016ac:	d109      	bne.n	80016c2 <_ZN12PolicyEngine13pe_sink_readyEv+0x242>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80016b4:	131b      	asrs	r3, r3, #12
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <_ZN12PolicyEngine13pe_sink_readyEv+0x242>
				return PESinkHandleSoftReset;
 80016be:	2311      	movs	r3, #17
 80016c0:	e031      	b.n	8001726 <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* PD 3.0 messges */
			} else if ((hdr_template & PD_HDR_SPECREV) == PD_SPECREV_3_0) {
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80016c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80016ca:	2b80      	cmp	r3, #128	; 0x80
 80016cc:	d121      	bne.n	8001712 <_ZN12PolicyEngine13pe_sink_readyEv+0x292>
				/* If the message is a multi-chunk extended message, let it
				 * time out. */
				if ((tempMessage.hdr & PD_HDR_EXT)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	da08      	bge.n	80016ec <_ZN12PolicyEngine13pe_sink_readyEv+0x26c>
						&& (PD_DATA_SIZE_GET(&tempMessage)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80016e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016e4:	2b1a      	cmp	r3, #26
 80016e6:	dd01      	ble.n	80016ec <_ZN12PolicyEngine13pe_sink_readyEv+0x26c>
								> PD_MAX_EXT_MSG_LEGACY_LEN)) {

					return PESinkChunkReceived;
 80016e8:	2316      	movs	r3, #22
 80016ea:	e01c      	b.n	8001726 <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
					/* Tell the DPM a message we sent got a response of
					 * Not_Supported. */
				} else if (PD_MSGTYPE_GET(&tempMessage)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	2b10      	cmp	r3, #16
 80016f8:	d109      	bne.n	800170e <_ZN12PolicyEngine13pe_sink_readyEv+0x28e>
						== PD_MSGTYPE_NOT_SUPPORTED
						&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001700:	131b      	asrs	r3, r3, #12
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <_ZN12PolicyEngine13pe_sink_readyEv+0x28e>

					return PESinkNotSupportedReceived;
 800170a:	2317      	movs	r3, #23
 800170c:	e00b      	b.n	8001726 <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
					/* If we got an unknown message, send a soft reset */
				} else {

					return PESinkSendSoftReset;
 800170e:	2312      	movs	r3, #18
 8001710:	e009      	b.n	8001726 <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				}
			}
		}
	}

	return waitForEvent(PESinkReady, (uint32_t) Notifications::ALL, 0xFFFFFFFF);
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800171a:	210c      	movs	r1, #12
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff fc3d 	bl	8000f9c <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8001722:	4603      	mov	r3, r0
 8001724:	bf00      	nop
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <_ZN12PolicyEngine22pe_sink_get_source_capEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_get_source_cap() {
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
	/* Get a message object */
	pd_msg *get_source_cap = &tempMessage;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3344      	adds	r3, #68	; 0x44
 800173a:	60fb      	str	r3, [r7, #12]
	/* Make a Get_Source_Cap message */
	get_source_cap->hdr = hdr_template | PD_MSGTYPE_GET_SOURCE_CAP
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001740:	f043 0307 	orr.w	r3, r3, #7
 8001744:	b29a      	uxth	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	805a      	strh	r2, [r3, #2]
			| PD_NUMOBJ(0);
	/* Transmit the Get_Source_Cap */
	// On fail -> hard reset, on send -> Sink Ready
	return pe_start_message_tx(PESinkReady, PESinkHardReset, get_source_cap);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	220f      	movs	r2, #15
 800174e:	210c      	movs	r1, #12
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fbbc 	bl	8000ece <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg>
 8001756:	4603      	mov	r3, r0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <_ZN12PolicyEngine21pe_sink_give_sink_capEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_give_sink_cap() {
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	/* Get a message object */
	pd_msg *snk_cap = &tempMessage;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3344      	adds	r3, #68	; 0x44
 800176c:	60fb      	str	r3, [r7, #12]
	/* Get our capabilities from the DPM */
	pdbs_dpm_get_sink_capability(snk_cap,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
			((hdr_template & PD_HDR_SPECREV) >= PD_SPECREV_3_0));
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8001776:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
	pdbs_dpm_get_sink_capability(snk_cap,
 800177a:	2a7f      	cmp	r2, #127	; 0x7f
 800177c:	bfcc      	ite	gt
 800177e:	2201      	movgt	r2, #1
 8001780:	2200      	movle	r2, #0
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	4611      	mov	r1, r2
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	4798      	blx	r3
	/* Transmit our capabilities */
	return pe_start_message_tx(PESinkReady, PESinkHardReset, snk_cap);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	220f      	movs	r2, #15
 800178e:	210c      	movs	r1, #12
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fb9c 	bl	8000ece <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg>
 8001796:	4603      	mov	r3, r0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_ZN12PolicyEngine18pe_sink_hard_resetEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_hard_reset() {
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	 * source is unresponsive. */

#ifdef PD_DEBUG_OUTPUT
	printf("Sending hard reset\r\n");
#endif
	if (_hard_reset_counter > PD_N_HARD_RESET_COUNT) {
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	dd01      	ble.n	80017b6 <_ZN12PolicyEngine18pe_sink_hard_resetEv+0x16>
		return PESinkSourceUnresponsive;
 80017b2:	2318      	movs	r3, #24
 80017b4:	e00a      	b.n	80017cc <_ZN12PolicyEngine18pe_sink_hard_resetEv+0x2c>
	}
	// So, we could send a hardreset here; however that will cause a power cycle
	// on the PSU end.. Which will then reset this MCU So therefore we went get
	// anywhere :)
	/* Increment HardResetCounter */
	_hard_reset_counter++;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	3301      	adds	r3, #1
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	b25a      	sxtb	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	return PESinkTransitionDefault;
 80017ca:	2310      	movs	r3, #16
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_ZN12PolicyEngine26pe_sink_transition_defaultEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_transition_default() {
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	_explicit_contract = false;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	/* There is no local hardware to reset. */
	/* Since we never change our data role from UFP, there is no reason to set
	 * it here. */

	return PESinkStartup;
 80017e8:	2303      	movs	r3, #3
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <_ZN12PolicyEngine18pe_sink_soft_resetEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_soft_reset() {
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b08a      	sub	sp, #40	; 0x28
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
	 * when a Soft_Reset message is received. */

	/* Get a message object */
	pd_msg accept;
	/* Make an soft reset message */
	accept.hdr = hdr_template | PD_MSGTYPE_SOFT_RESET | PD_NUMOBJ(0);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001802:	f043 030d 	orr.w	r3, r3, #13
 8001806:	b29b      	uxth	r3, r3
 8001808:	817b      	strh	r3, [r7, #10]
	/* Transmit the Accept */
	return pe_start_message_tx(PESinkSetupWaitCap, PESinkHardReset, &accept);
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	220f      	movs	r2, #15
 8001810:	2105      	movs	r1, #5
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff fb5b 	bl	8000ece <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg>
 8001818:	4603      	mov	r3, r0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3728      	adds	r7, #40	; 0x28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <_ZN12PolicyEngine23pe_sink_send_soft_resetEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_send_soft_reset() {
 8001822:	b580      	push	{r7, lr}
 8001824:	b084      	sub	sp, #16
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]

#ifdef PD_DEBUG_OUTPUT
	printf("Sending soft reset\r\n");
#endif
	/* Get a message object */
	pd_msg *softrst = &tempMessage;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3344      	adds	r3, #68	; 0x44
 800182e:	60fb      	str	r3, [r7, #12]
	/* Make a Soft_Reset message */
	softrst->hdr = hdr_template | PD_MSGTYPE_SOFT_RESET | PD_NUMOBJ(0);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001834:	f043 030d 	orr.w	r3, r3, #13
 8001838:	b29a      	uxth	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	805a      	strh	r2, [r3, #2]
	/* Transmit the soft reset */
	return pe_start_message_tx(PESinkSendSoftResetTxOK, PESinkHardReset,
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	220f      	movs	r2, #15
 8001842:	2113      	movs	r1, #19
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff fb42 	bl	8000ece <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg>
 800184a:	4603      	mov	r3, r0
			softrst);
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <_ZN12PolicyEngine29pe_sink_send_soft_reset_tx_okEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_send_soft_reset_tx_ok() {
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	// Transmit is good, wait for response event
	return waitForEvent(PESinkSendSoftResetResp,
 800185c:	f640 238c 	movw	r3, #2700	; 0xa8c
 8001860:	f241 0203 	movw	r2, #4099	; 0x1003
 8001864:	2114      	movs	r1, #20
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff fb98 	bl	8000f9c <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 800186c:	4603      	mov	r3, r0
			(uint32_t) Notifications::TIMEOUT | (uint32_t) Notifications::MSG_RX
					| (uint32_t) Notifications::RESET, PD_T_SENDER_RESPONSE);
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_send_soft_reset_resp() {
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]

	/* Wait for a response */
	clearEvents();
 800187e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fb78 	bl	8000f78 <_ZN12PolicyEngine11clearEventsEm>

	/* Get the response message */
	if (incomingMessages.getOccupied()) {
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3364      	adds	r3, #100	; 0x64
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fbce 	bl	800102e <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	bf14      	ite	ne
 8001898:	2301      	movne	r3, #1
 800189a:	2300      	moveq	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d02c      	beq.n	80018fc <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x86>

		incomingMessages.pop(&tempMessage);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3344      	adds	r3, #68	; 0x44
 80018ac:	4619      	mov	r1, r3
 80018ae:	4610      	mov	r0, r2
 80018b0:	f000 f98a 	bl	8001bc8 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_>

		/* If the source accepted our soft reset, wait for capabilities. */
		if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_ACCEPT
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80018ba:	f003 031f 	and.w	r3, r3, #31
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d109      	bne.n	80018d6 <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x60>
				&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80018c8:	131b      	asrs	r3, r3, #12
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x60>

			return PESinkSetupWaitCap;
 80018d2:	2305      	movs	r3, #5
 80018d4:	e013      	b.n	80018fe <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x88>
			/* If the message was a Soft_Reset, do the soft reset procedure */
		} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_SOFT_RESET
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	2b0d      	cmp	r3, #13
 80018e2:	d109      	bne.n	80018f8 <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x82>
				&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80018ea:	131b      	asrs	r3, r3, #12
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x82>
			return PESinkHandleSoftReset;
 80018f4:	2311      	movs	r3, #17
 80018f6:	e002      	b.n	80018fe <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x88>
			/* Otherwise, send a hard reset */
		} else {
			return PESinkHardReset;
 80018f8:	230f      	movs	r3, #15
 80018fa:	e000      	b.n	80018fe <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x88>
		}
	}
	return PESinkHardReset;
 80018fc:	230f      	movs	r3, #15
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_ZN12PolicyEngine26pe_sink_send_not_supportedEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_send_not_supported() {
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
	/* Get a message object */

#ifdef PD_DEBUG_OUTPUT
	printf("Sending not supported\r\n");
#endif
	if ((hdr_template & PD_HDR_SPECREV) == PD_SPECREV_2_0) {
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001912:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001916:	2b40      	cmp	r3, #64	; 0x40
 8001918:	d108      	bne.n	800192c <_ZN12PolicyEngine26pe_sink_send_not_supportedEv+0x26>
		/* Make a Reject message */
		tempMessage.hdr = hdr_template | PD_MSGTYPE_REJECT | PD_NUMOBJ(0);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800191e:	f043 0304 	orr.w	r3, r3, #4
 8001922:	b29a      	uxth	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800192a:	e00d      	b.n	8001948 <_ZN12PolicyEngine26pe_sink_send_not_supportedEv+0x42>
	} else if ((hdr_template & PD_HDR_SPECREV) == PD_SPECREV_3_0) {
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001930:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001934:	2b80      	cmp	r3, #128	; 0x80
 8001936:	d107      	bne.n	8001948 <_ZN12PolicyEngine26pe_sink_send_not_supportedEv+0x42>
		/* Make a Not_Supported message */
		tempMessage.hdr =
				hdr_template | PD_MSGTYPE_NOT_SUPPORTED | PD_NUMOBJ(0);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800193c:	f043 0310 	orr.w	r3, r3, #16
 8001940:	b29a      	uxth	r2, r3
		tempMessage.hdr =
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	}

	/* Transmit the message */
	return pe_start_message_tx(PESinkReady, PESinkSendSoftReset, &tempMessage);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3344      	adds	r3, #68	; 0x44
 800194c:	2212      	movs	r2, #18
 800194e:	210c      	movs	r1, #12
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff fabc 	bl	8000ece <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg>
 8001956:	4603      	mov	r3, r0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <_ZN12PolicyEngine22pe_sink_chunk_receivedEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_chunk_received() {
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

	/* Wait for tChunkingNotSupported */
	osDelay(PD_T_CHUNKING_NOT_SUPPORTED);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001970:	4798      	blx	r3

	return PESinkSendNotSupported;
 8001972:	2315      	movs	r3, #21
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <_ZN12PolicyEngine30pe_sink_not_supported_receivedEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_not_supported_received() {
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	/* Inform the Device Policy Manager that we received a Not_Supported
	 * message. */

	return waitForEvent(PESinkReady, (uint32_t) Notifications::ALL, 0xFFFFFFFF);
 8001984:	f04f 33ff 	mov.w	r3, #4294967295
 8001988:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800198c:	210c      	movs	r1, #12
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff fb04 	bl	8000f9c <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8001994:	4603      	mov	r3, r0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <_ZN12PolicyEngine27pe_sink_source_unresponsiveEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_source_unresponsive() {
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
	// Sit and chill, as PD is not working
	osDelay(PD_T_PD_DEBOUNCE);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019ae:	4798      	blx	r3

	return PESinkSourceUnresponsive;
 80019b0:	2318      	movs	r3, #24
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <_ZN12PolicyEngine18pe_sink_wait_eventEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_wait_event() {
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
	// Check timeout
	if (getTimeStamp() > waitingEventsTimeout) {
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	4798      	blx	r3
 80019c8:	4602      	mov	r2, r0
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ce:	429a      	cmp	r2, r3
 80019d0:	bf8c      	ite	hi
 80019d2:	2301      	movhi	r3, #1
 80019d4:	2300      	movls	r3, #0
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d004      	beq.n	80019e6 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x2c>
		notify(Notifications::TIMEOUT);
 80019dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff f90a 	bl	8000bfa <_ZN12PolicyEngine6notifyENS_13NotificationsE>
	}
	if (currentEvents & (uint32_t) Notifications::TIMEOUT) {
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d012      	beq.n	8001a18 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x5e>
		clearEvents();
 80019f2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff fabe 	bl	8000f78 <_ZN12PolicyEngine11clearEventsEm>
		if (postNotifcationEvalState>=PESinkHandleSoftReset && postNotifcationEvalState<=PESinkSendSoftResetResp){
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001a02:	2b10      	cmp	r3, #16
 8001a04:	d906      	bls.n	8001a14 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x5a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001a0c:	2b14      	cmp	r3, #20
 8001a0e:	d801      	bhi.n	8001a14 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x5a>
			//Timeout in soft reset, so reset state machine
			return PESinkStartup;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e015      	b.n	8001a40 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x86>
		}
		return PESinkSendSoftReset;
 8001a14:	2312      	movs	r3, #18
 8001a16:	e013      	b.n	8001a40 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x86>
	}
	if (currentEvents & (uint32_t) Notifications::RESET) {
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x6e>
		return PESinkTransitionDefault;
 8001a24:	2310      	movs	r3, #16
 8001a26:	e00b      	b.n	8001a40 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x86>
	}

	if (currentEvents & waitingEventsMask) {
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x84>
		return postNotifcationEvalState;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001a3c:	e000      	b.n	8001a40 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x86>
	}
	return policy_engine_state::PEWaitingEvent;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <_ZN12PolicyEngine21pe_sink_wait_good_crcEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_wait_good_crc() {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	clearEvents();
 8001a50:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff fa8f 	bl	8000f78 <_ZN12PolicyEngine11clearEventsEm>

	if (incomingMessages.getOccupied()) {
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3364      	adds	r3, #100	; 0x64
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fae5 	bl	800102e <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	bf14      	ite	ne
 8001a6a:	2301      	movne	r3, #1
 8001a6c:	2300      	moveq	r3, #0
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d03a      	beq.n	8001aea <_ZN12PolicyEngine21pe_sink_wait_good_crcEv+0xa2>
		// Wait for the Good CRC
		pd_msg goodcrc;
		/* Read the GoodCRC */
		incomingMessages.pop(&goodcrc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3364      	adds	r3, #100	; 0x64
 8001a78:	f107 0208 	add.w	r2, r7, #8
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 f8a2 	bl	8001bc8 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_>

		/* Check that the message is correct */
		if (PD_MSGTYPE_GET(&goodcrc) == PD_MSGTYPE_GOODCRC
 8001a84:	897b      	ldrh	r3, [r7, #10]
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d125      	bne.n	8001ada <_ZN12PolicyEngine21pe_sink_wait_good_crcEv+0x92>
				&& PD_NUMOBJ_GET(&goodcrc) == 0
 8001a8e:	897b      	ldrh	r3, [r7, #10]
 8001a90:	131b      	asrs	r3, r3, #12
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d11f      	bne.n	8001ada <_ZN12PolicyEngine21pe_sink_wait_good_crcEv+0x92>
				&& PD_MESSAGEID_GET(&goodcrc) == _tx_messageidcounter) {
 8001a9a:	897b      	ldrh	r3, [r7, #10]
 8001a9c:	125b      	asrs	r3, r3, #9
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d116      	bne.n	8001ada <_ZN12PolicyEngine21pe_sink_wait_good_crcEv+0x92>
			/* Increment MessageIDCounter */
			_tx_messageidcounter = (_tx_messageidcounter + 1) % 8;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	425a      	negs	r2, r3
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	f002 0207 	and.w	r2, r2, #7
 8001abe:	bf58      	it	pl
 8001ac0:	4253      	negpl	r3, r2
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

			notify(Notifications::TX_DONE);
 8001aca:	2104      	movs	r1, #4
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff f894 	bl	8000bfa <_ZN12PolicyEngine6notifyENS_13NotificationsE>
			return postSendState;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ad8:	e00e      	b.n	8001af8 <_ZN12PolicyEngine21pe_sink_wait_good_crcEv+0xb0>
		} else {
			notify(Notifications::TX_ERR);
 8001ada:	2108      	movs	r1, #8
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff f88c 	bl	8000bfa <_ZN12PolicyEngine6notifyENS_13NotificationsE>
			return postSendFailedState;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ae8:	e006      	b.n	8001af8 <_ZN12PolicyEngine21pe_sink_wait_good_crcEv+0xb0>
		}
	}
	notify(Notifications::TX_ERR);
 8001aea:	2108      	movs	r1, #8
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff f884 	bl	8000bfa <_ZN12PolicyEngine6notifyENS_13NotificationsE>
	return postSendFailedState;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3728      	adds	r7, #40	; 0x28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_wait_send_done() {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

	/* Waiting for response*/
	uint32_t evt = currentEvents;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	60fb      	str	r3, [r7, #12]
	clearEvents();
 8001b0e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fa30 	bl	8000f78 <_ZN12PolicyEngine11clearEventsEm>

	if ((uint32_t) evt & (uint32_t) Notifications::DISCARD) {
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d016      	beq.n	8001b50 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0x50>
		// increment the counter
		_tx_messageidcounter = (_tx_messageidcounter + 1) % 8;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001b28:	3301      	adds	r3, #1
 8001b2a:	425a      	negs	r2, r3
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	f002 0207 	and.w	r2, r2, #7
 8001b34:	bf58      	it	pl
 8001b36:	4253      	negpl	r3, r2
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		notify(Notifications::TX_ERR);
 8001b40:	2108      	movs	r1, #8
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff f859 	bl	8000bfa <_ZN12PolicyEngine6notifyENS_13NotificationsE>
		return postSendFailedState;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b4e:	e037      	b.n	8001bc0 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0xc0>
	}

	/* If the message was sent successfully */
	if ((uint32_t) evt & (uint32_t) Notifications::I_TXSENT) {
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d01e      	beq.n	8001b98 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0x98>

		clearEvents();
 8001b5a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fa0a 	bl	8000f78 <_ZN12PolicyEngine11clearEventsEm>
		if (incomingMessages.getOccupied()) {
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3364      	adds	r3, #100	; 0x64
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fa60 	bl	800102e <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf14      	ite	ne
 8001b74:	2301      	movne	r3, #1
 8001b76:	2300      	moveq	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d004      	beq.n	8001b88 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0x88>
			return pe_sink_wait_good_crc();
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ff62 	bl	8001a48 <_ZN12PolicyEngine21pe_sink_wait_good_crcEv>
 8001b84:	4603      	mov	r3, r0
 8001b86:	e01b      	b.n	8001bc0 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0xc0>
		} else {
			// No Good CRC has arrived, these should _normally_ come really fast, but users implementation may be lagging
			// Setup a callback for this state
			return waitForEvent(PEWaitingMessageGoodCRC,
 8001b88:	2364      	movs	r3, #100	; 0x64
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fa04 	bl	8000f9c <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8001b94:	4603      	mov	r3, r0
					(uint32_t) Notifications::MSG_RX, 100);
 8001b96:	e013      	b.n	8001bc0 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0xc0>
		}
	}
	/* If the message failed to be sent */
	if ((uint32_t) evt & (uint32_t) Notifications::I_RETRYFAIL) {
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d007      	beq.n	8001bb2 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0xb2>
		notify(Notifications::TX_ERR);
 8001ba2:	2108      	movs	r1, #8
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff f828 	bl	8000bfa <_ZN12PolicyEngine6notifyENS_13NotificationsE>
		return postSendFailedState;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bb0:	e006      	b.n	8001bc0 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0xc0>
	}

	/* Silence the compiler warning */
	notify(Notifications::TX_ERR);
 8001bb2:	2108      	movs	r1, #8
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff f820 	bl	8000bfa <_ZN12PolicyEngine6notifyENS_13NotificationsE>
	return postSendFailedState;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_>:
  void pop(T *dest) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
    if (getOccupied() == 0) {
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff fa2b 	bl	800102e <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	bf0c      	ite	eq
 8001bde:	2301      	moveq	r3, #1
 8001be0:	2300      	movne	r3, #0
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d125      	bne.n	8001c34 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_+0x6c>
    if (dest) {
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00a      	beq.n	8001c04 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_+0x3c>
      memcpy(dest, buffer + begin, sizeof(T));
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bf6:	015b      	lsls	r3, r3, #5
 8001bf8:	4413      	add	r3, r2
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	6838      	ldr	r0, [r7, #0]
 8001c00:	f005 ffb8 	bl	8007b74 <memcpy>
    begin = (begin + 1) % size;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	f003 0203 	and.w	r2, r3, #3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (wrap && (begin == 0)) {
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00a      	beq.n	8001c36 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_+0x6e>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d105      	bne.n	8001c36 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_+0x6e>
      wrap = false;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8001c32:	e000      	b.n	8001c36 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_+0x6e>
      return;
 8001c34:	bf00      	nop
  }
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <MX_DMA_Init+0x88>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a1e      	ldr	r2, [pc, #120]	; (8001cc4 <MX_DMA_Init+0x88>)
 8001c4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <MX_DMA_Init+0x88>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <MX_DMA_Init+0x88>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <MX_DMA_Init+0x88>)
 8001c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <MX_DMA_Init+0x88>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	200b      	movs	r0, #11
 8001c80:	f001 f8d1 	bl	8002e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c84:	200b      	movs	r0, #11
 8001c86:	f001 f8ea 	bl	8002e5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	2011      	movs	r0, #17
 8001c90:	f001 f8c9 	bl	8002e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001c94:	2011      	movs	r0, #17
 8001c96:	f001 f8e2 	bl	8002e5e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	203a      	movs	r0, #58	; 0x3a
 8001ca0:	f001 f8c1 	bl	8002e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001ca4:	203a      	movs	r0, #58	; 0x3a
 8001ca6:	f001 f8da 	bl	8002e5e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	2046      	movs	r0, #70	; 0x46
 8001cb0:	f001 f8b9 	bl	8002e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001cb4:	2046      	movs	r0, #70	; 0x46
 8001cb6:	f001 f8d2 	bl	8002e5e <HAL_NVIC_EnableIRQ>

}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800

08001cc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <MX_GPIO_Init+0x8c>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a1b      	ldr	r2, [pc, #108]	; (8001d54 <MX_GPIO_Init+0x8c>)
 8001ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <MX_GPIO_Init+0x8c>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <MX_GPIO_Init+0x8c>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a14      	ldr	r2, [pc, #80]	; (8001d54 <MX_GPIO_Init+0x8c>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <MX_GPIO_Init+0x8c>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <MX_GPIO_Init+0x8c>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a0d      	ldr	r2, [pc, #52]	; (8001d54 <MX_GPIO_Init+0x8c>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <MX_GPIO_Init+0x8c>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FUSB_IRQ_Pin;
 8001d32:	2320      	movs	r3, #32
 8001d34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FUSB_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	4619      	mov	r1, r3
 8001d46:	4804      	ldr	r0, [pc, #16]	; (8001d58 <MX_GPIO_Init+0x90>)
 8001d48:	f001 fc2e 	bl	80035a8 <HAL_GPIO_Init>

}
 8001d4c:	bf00      	nop
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020400 	.word	0x40020400

08001d5c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <MX_I2C1_Init+0x50>)
 8001d62:	4a13      	ldr	r2, [pc, #76]	; (8001db0 <MX_I2C1_Init+0x54>)
 8001d64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <MX_I2C1_Init+0x50>)
 8001d68:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <MX_I2C1_Init+0x58>)
 8001d6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <MX_I2C1_Init+0x50>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_I2C1_Init+0x50>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <MX_I2C1_Init+0x50>)
 8001d7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d80:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <MX_I2C1_Init+0x50>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <MX_I2C1_Init+0x50>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d8c:	4b07      	ldr	r3, [pc, #28]	; (8001dac <MX_I2C1_Init+0x50>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <MX_I2C1_Init+0x50>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d98:	4804      	ldr	r0, [pc, #16]	; (8001dac <MX_I2C1_Init+0x50>)
 8001d9a:	f001 fdb1 	bl	8003900 <HAL_I2C_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001da4:	f000 f948 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000098 	.word	0x20000098
 8001db0:	40005400 	.word	0x40005400
 8001db4:	000186a0 	.word	0x000186a0

08001db8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a50      	ldr	r2, [pc, #320]	; (8001f18 <HAL_I2C_MspInit+0x160>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	f040 8099 	bne.w	8001f0e <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	4b4e      	ldr	r3, [pc, #312]	; (8001f1c <HAL_I2C_MspInit+0x164>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	4a4d      	ldr	r2, [pc, #308]	; (8001f1c <HAL_I2C_MspInit+0x164>)
 8001de6:	f043 0302 	orr.w	r3, r3, #2
 8001dea:	6313      	str	r3, [r2, #48]	; 0x30
 8001dec:	4b4b      	ldr	r3, [pc, #300]	; (8001f1c <HAL_I2C_MspInit+0x164>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = FUSB_SCL_Pin|FUSB_SDA_Pin;
 8001df8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dfe:	2312      	movs	r3, #18
 8001e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e02:	2301      	movs	r3, #1
 8001e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	4842      	ldr	r0, [pc, #264]	; (8001f20 <HAL_I2C_MspInit+0x168>)
 8001e16:	f001 fbc7 	bl	80035a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b3f      	ldr	r3, [pc, #252]	; (8001f1c <HAL_I2C_MspInit+0x164>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	4a3e      	ldr	r2, [pc, #248]	; (8001f1c <HAL_I2C_MspInit+0x164>)
 8001e24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e28:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2a:	4b3c      	ldr	r3, [pc, #240]	; (8001f1c <HAL_I2C_MspInit+0x164>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001e36:	4b3b      	ldr	r3, [pc, #236]	; (8001f24 <HAL_I2C_MspInit+0x16c>)
 8001e38:	4a3b      	ldr	r2, [pc, #236]	; (8001f28 <HAL_I2C_MspInit+0x170>)
 8001e3a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001e3c:	4b39      	ldr	r3, [pc, #228]	; (8001f24 <HAL_I2C_MspInit+0x16c>)
 8001e3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e42:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e44:	4b37      	ldr	r3, [pc, #220]	; (8001f24 <HAL_I2C_MspInit+0x16c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e4a:	4b36      	ldr	r3, [pc, #216]	; (8001f24 <HAL_I2C_MspInit+0x16c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e50:	4b34      	ldr	r3, [pc, #208]	; (8001f24 <HAL_I2C_MspInit+0x16c>)
 8001e52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e56:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e58:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <HAL_I2C_MspInit+0x16c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e5e:	4b31      	ldr	r3, [pc, #196]	; (8001f24 <HAL_I2C_MspInit+0x16c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001e64:	4b2f      	ldr	r3, [pc, #188]	; (8001f24 <HAL_I2C_MspInit+0x16c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e6a:	4b2e      	ldr	r3, [pc, #184]	; (8001f24 <HAL_I2C_MspInit+0x16c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e70:	4b2c      	ldr	r3, [pc, #176]	; (8001f24 <HAL_I2C_MspInit+0x16c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001e76:	482b      	ldr	r0, [pc, #172]	; (8001f24 <HAL_I2C_MspInit+0x16c>)
 8001e78:	f001 f80c 	bl	8002e94 <HAL_DMA_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001e82:	f000 f8d9 	bl	8002038 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a26      	ldr	r2, [pc, #152]	; (8001f24 <HAL_I2C_MspInit+0x16c>)
 8001e8a:	639a      	str	r2, [r3, #56]	; 0x38
 8001e8c:	4a25      	ldr	r2, [pc, #148]	; (8001f24 <HAL_I2C_MspInit+0x16c>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001e92:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <HAL_I2C_MspInit+0x174>)
 8001e94:	4a26      	ldr	r2, [pc, #152]	; (8001f30 <HAL_I2C_MspInit+0x178>)
 8001e96:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001e98:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <HAL_I2C_MspInit+0x174>)
 8001e9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e9e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ea0:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <HAL_I2C_MspInit+0x174>)
 8001ea2:	2240      	movs	r2, #64	; 0x40
 8001ea4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <HAL_I2C_MspInit+0x174>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001eac:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <HAL_I2C_MspInit+0x174>)
 8001eae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eb2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_I2C_MspInit+0x174>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eba:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <HAL_I2C_MspInit+0x174>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <HAL_I2C_MspInit+0x174>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_I2C_MspInit+0x174>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ecc:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <HAL_I2C_MspInit+0x174>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001ed2:	4816      	ldr	r0, [pc, #88]	; (8001f2c <HAL_I2C_MspInit+0x174>)
 8001ed4:	f000 ffde 	bl	8002e94 <HAL_DMA_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8001ede:	f000 f8ab 	bl	8002038 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a11      	ldr	r2, [pc, #68]	; (8001f2c <HAL_I2C_MspInit+0x174>)
 8001ee6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ee8:	4a10      	ldr	r2, [pc, #64]	; (8001f2c <HAL_I2C_MspInit+0x174>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	201f      	movs	r0, #31
 8001ef4:	f000 ff97 	bl	8002e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001ef8:	201f      	movs	r0, #31
 8001efa:	f000 ffb0 	bl	8002e5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2100      	movs	r1, #0
 8001f02:	2020      	movs	r0, #32
 8001f04:	f000 ff8f 	bl	8002e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001f08:	2020      	movs	r0, #32
 8001f0a:	f000 ffa8 	bl	8002e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001f0e:	bf00      	nop
 8001f10:	3728      	adds	r7, #40	; 0x28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40005400 	.word	0x40005400
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020400 	.word	0x40020400
 8001f24:	200000ec 	.word	0x200000ec
 8001f28:	40026010 	.word	0x40026010
 8001f2c:	2000014c 	.word	0x2000014c
 8001f30:	400260a0 	.word	0x400260a0

08001f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f38:	f000 fe04 	bl	8002b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f3c:	f000 f810 	bl	8001f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f40:	f7ff fec2 	bl	8001cc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f44:	f7ff fe7a 	bl	8001c3c <MX_DMA_Init>
  MX_I2C1_Init();
 8001f48:	f7ff ff08 	bl	8001d5c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001f4c:	f000 f9c8 	bl	80022e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting\r\n");
 8001f50:	4802      	ldr	r0, [pc, #8]	; (8001f5c <main+0x28>)
 8001f52:	f005 feab 	bl	8007cac <puts>
  pd_user_main();
 8001f56:	f000 fb83 	bl	8002660 <pd_user_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f5a:	e7fe      	b.n	8001f5a <main+0x26>
 8001f5c:	08008bc0 	.word	0x08008bc0

08001f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b094      	sub	sp, #80	; 0x50
 8001f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f66:	f107 031c 	add.w	r3, r7, #28
 8001f6a:	2234      	movs	r2, #52	; 0x34
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f005 fe0e 	bl	8007b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f74:	f107 0308 	add.w	r3, r7, #8
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	4b29      	ldr	r3, [pc, #164]	; (8002030 <SystemClock_Config+0xd0>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	4a28      	ldr	r2, [pc, #160]	; (8002030 <SystemClock_Config+0xd0>)
 8001f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f92:	6413      	str	r3, [r2, #64]	; 0x40
 8001f94:	4b26      	ldr	r3, [pc, #152]	; (8002030 <SystemClock_Config+0xd0>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	4b23      	ldr	r3, [pc, #140]	; (8002034 <SystemClock_Config+0xd4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001fac:	4a21      	ldr	r2, [pc, #132]	; (8002034 <SystemClock_Config+0xd4>)
 8001fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <SystemClock_Config+0xd4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fc8:	2310      	movs	r3, #16
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fd4:	2308      	movs	r3, #8
 8001fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001fd8:	2354      	movs	r3, #84	; 0x54
 8001fda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	4618      	mov	r0, r3
 8001fee:	f004 fbe5 	bl	80067bc <HAL_RCC_OscConfig>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ff8:	f000 f81e 	bl	8002038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ffc:	230f      	movs	r3, #15
 8001ffe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002000:	2302      	movs	r3, #2
 8002002:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002004:	2300      	movs	r3, #0
 8002006:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800200c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002012:	f107 0308 	add.w	r3, r7, #8
 8002016:	2102      	movs	r1, #2
 8002018:	4618      	mov	r0, r3
 800201a:	f004 f90b 	bl	8006234 <HAL_RCC_ClockConfig>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002024:	f000 f808 	bl	8002038 <Error_Handler>
  }
}
 8002028:	bf00      	nop
 800202a:	3750      	adds	r7, #80	; 0x50
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40023800 	.word	0x40023800
 8002034:	40007000 	.word	0x40007000

08002038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800203c:	b672      	cpsid	i
}
 800203e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002040:	e7fe      	b.n	8002040 <Error_Handler+0x8>
	...

08002044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <HAL_MspInit+0x4c>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	4a0f      	ldr	r2, [pc, #60]	; (8002090 <HAL_MspInit+0x4c>)
 8002054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002058:	6453      	str	r3, [r2, #68]	; 0x44
 800205a:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <HAL_MspInit+0x4c>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	603b      	str	r3, [r7, #0]
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_MspInit+0x4c>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	4a08      	ldr	r2, [pc, #32]	; (8002090 <HAL_MspInit+0x4c>)
 8002070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002074:	6413      	str	r3, [r2, #64]	; 0x40
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_MspInit+0x4c>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800

08002094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002098:	e7fe      	b.n	8002098 <NMI_Handler+0x4>

0800209a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209e:	e7fe      	b.n	800209e <HardFault_Handler+0x4>

080020a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <MemManage_Handler+0x4>

080020a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020aa:	e7fe      	b.n	80020aa <BusFault_Handler+0x4>

080020ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <UsageFault_Handler+0x4>

080020b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e0:	f000 fd82 	bl	8002be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <DMA1_Stream0_IRQHandler+0x10>)
 80020ee:	f001 f811 	bl	8003114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200000ec 	.word	0x200000ec

080020fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <DMA1_Stream6_IRQHandler+0x10>)
 8002102:	f001 f807 	bl	8003114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	2000014c 	.word	0x2000014c

08002110 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <I2C1_EV_IRQHandler+0x10>)
 8002116:	f002 f857 	bl	80041c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000098 	.word	0x20000098

08002124 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <I2C1_ER_IRQHandler+0x10>)
 800212a:	f002 f9be 	bl	80044aa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000098 	.word	0x20000098

08002138 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <USART1_IRQHandler+0x10>)
 800213e:	f004 fe29 	bl	8006d94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200001b0 	.word	0x200001b0

0800214c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <DMA2_Stream2_IRQHandler+0x10>)
 8002152:	f000 ffdf 	bl	8003114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000254 	.word	0x20000254

08002160 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <DMA2_Stream7_IRQHandler+0x10>)
 8002166:	f000 ffd5 	bl	8003114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200001f4 	.word	0x200001f4

08002174 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	e00a      	b.n	800219c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002186:	f3af 8000 	nop.w
 800218a:	4601      	mov	r1, r0
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	60ba      	str	r2, [r7, #8]
 8002192:	b2ca      	uxtb	r2, r1
 8002194:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3301      	adds	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	dbf0      	blt.n	8002186 <_read+0x12>
	}

return len;
 80021a4:	687b      	ldr	r3, [r7, #4]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	e009      	b.n	80021d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	60ba      	str	r2, [r7, #8]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	3301      	adds	r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	429a      	cmp	r2, r3
 80021da:	dbf1      	blt.n	80021c0 <_write+0x12>
	}
	return len;
 80021dc:	687b      	ldr	r3, [r7, #4]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_close>:

int _close(int file)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
	return -1;
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800220e:	605a      	str	r2, [r3, #4]
	return 0;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <_isatty>:

int _isatty(int file)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
	return 1;
 8002226:	2301      	movs	r3, #1
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
	return 0;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002258:	4a14      	ldr	r2, [pc, #80]	; (80022ac <_sbrk+0x5c>)
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <_sbrk+0x60>)
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002264:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <_sbrk+0x64>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d102      	bne.n	8002272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <_sbrk+0x64>)
 800226e:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <_sbrk+0x68>)
 8002270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <_sbrk+0x64>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	429a      	cmp	r2, r3
 800227e:	d207      	bcs.n	8002290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002280:	f005 fc4e 	bl	8007b20 <__errno>
 8002284:	4603      	mov	r3, r0
 8002286:	220c      	movs	r2, #12
 8002288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800228a:	f04f 33ff 	mov.w	r3, #4294967295
 800228e:	e009      	b.n	80022a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <_sbrk+0x64>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <_sbrk+0x64>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <_sbrk+0x64>)
 80022a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022a2:	68fb      	ldr	r3, [r7, #12]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20020000 	.word	0x20020000
 80022b0:	00000400 	.word	0x00000400
 80022b4:	200001ac 	.word	0x200001ac
 80022b8:	20000418 	.word	0x20000418

080022bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <SystemInit+0x20>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c6:	4a05      	ldr	r2, [pc, #20]	; (80022dc <SystemInit+0x20>)
 80022c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022e4:	4b10      	ldr	r3, [pc, #64]	; (8002328 <MX_USART1_UART_Init+0x48>)
 80022e6:	4a11      	ldr	r2, [pc, #68]	; (800232c <MX_USART1_UART_Init+0x4c>)
 80022e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <MX_USART1_UART_Init+0x48>)
 80022ec:	4a10      	ldr	r2, [pc, #64]	; (8002330 <MX_USART1_UART_Init+0x50>)
 80022ee:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022f0:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <MX_USART1_UART_Init+0x48>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022f6:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <MX_USART1_UART_Init+0x48>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022fc:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <MX_USART1_UART_Init+0x48>)
 80022fe:	2200      	movs	r2, #0
 8002300:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <MX_USART1_UART_Init+0x48>)
 8002304:	220c      	movs	r2, #12
 8002306:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002308:	4b07      	ldr	r3, [pc, #28]	; (8002328 <MX_USART1_UART_Init+0x48>)
 800230a:	2200      	movs	r2, #0
 800230c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <MX_USART1_UART_Init+0x48>)
 8002310:	2200      	movs	r2, #0
 8002312:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002314:	4804      	ldr	r0, [pc, #16]	; (8002328 <MX_USART1_UART_Init+0x48>)
 8002316:	f004 fcef 	bl	8006cf8 <HAL_UART_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8002320:	f7ff fe8a 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
 8002328:	200001b0 	.word	0x200001b0
 800232c:	40011000 	.word	0x40011000
 8002330:	000f4240 	.word	0x000f4240

08002334 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a4c      	ldr	r2, [pc, #304]	; (8002484 <HAL_UART_MspInit+0x150>)
 8002352:	4293      	cmp	r3, r2
 8002354:	f040 8091 	bne.w	800247a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002358:	2300      	movs	r3, #0
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	4b4a      	ldr	r3, [pc, #296]	; (8002488 <HAL_UART_MspInit+0x154>)
 800235e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002360:	4a49      	ldr	r2, [pc, #292]	; (8002488 <HAL_UART_MspInit+0x154>)
 8002362:	f043 0310 	orr.w	r3, r3, #16
 8002366:	6453      	str	r3, [r2, #68]	; 0x44
 8002368:	4b47      	ldr	r3, [pc, #284]	; (8002488 <HAL_UART_MspInit+0x154>)
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	4b43      	ldr	r3, [pc, #268]	; (8002488 <HAL_UART_MspInit+0x154>)
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	4a42      	ldr	r2, [pc, #264]	; (8002488 <HAL_UART_MspInit+0x154>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6313      	str	r3, [r2, #48]	; 0x30
 8002384:	4b40      	ldr	r3, [pc, #256]	; (8002488 <HAL_UART_MspInit+0x154>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002390:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239e:	2303      	movs	r3, #3
 80023a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023a2:	2307      	movs	r3, #7
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4619      	mov	r1, r3
 80023ac:	4837      	ldr	r0, [pc, #220]	; (800248c <HAL_UART_MspInit+0x158>)
 80023ae:	f001 f8fb 	bl	80035a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80023b2:	4b37      	ldr	r3, [pc, #220]	; (8002490 <HAL_UART_MspInit+0x15c>)
 80023b4:	4a37      	ldr	r2, [pc, #220]	; (8002494 <HAL_UART_MspInit+0x160>)
 80023b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80023b8:	4b35      	ldr	r3, [pc, #212]	; (8002490 <HAL_UART_MspInit+0x15c>)
 80023ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023be:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023c0:	4b33      	ldr	r3, [pc, #204]	; (8002490 <HAL_UART_MspInit+0x15c>)
 80023c2:	2240      	movs	r2, #64	; 0x40
 80023c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c6:	4b32      	ldr	r3, [pc, #200]	; (8002490 <HAL_UART_MspInit+0x15c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023cc:	4b30      	ldr	r3, [pc, #192]	; (8002490 <HAL_UART_MspInit+0x15c>)
 80023ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023d4:	4b2e      	ldr	r3, [pc, #184]	; (8002490 <HAL_UART_MspInit+0x15c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023da:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <HAL_UART_MspInit+0x15c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80023e0:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <HAL_UART_MspInit+0x15c>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023e6:	4b2a      	ldr	r3, [pc, #168]	; (8002490 <HAL_UART_MspInit+0x15c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ec:	4b28      	ldr	r3, [pc, #160]	; (8002490 <HAL_UART_MspInit+0x15c>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80023f2:	4827      	ldr	r0, [pc, #156]	; (8002490 <HAL_UART_MspInit+0x15c>)
 80023f4:	f000 fd4e 	bl	8002e94 <HAL_DMA_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80023fe:	f7ff fe1b 	bl	8002038 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a22      	ldr	r2, [pc, #136]	; (8002490 <HAL_UART_MspInit+0x15c>)
 8002406:	635a      	str	r2, [r3, #52]	; 0x34
 8002408:	4a21      	ldr	r2, [pc, #132]	; (8002490 <HAL_UART_MspInit+0x15c>)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800240e:	4b22      	ldr	r3, [pc, #136]	; (8002498 <HAL_UART_MspInit+0x164>)
 8002410:	4a22      	ldr	r2, [pc, #136]	; (800249c <HAL_UART_MspInit+0x168>)
 8002412:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002414:	4b20      	ldr	r3, [pc, #128]	; (8002498 <HAL_UART_MspInit+0x164>)
 8002416:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800241a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800241c:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <HAL_UART_MspInit+0x164>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002422:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <HAL_UART_MspInit+0x164>)
 8002424:	2200      	movs	r2, #0
 8002426:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002428:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <HAL_UART_MspInit+0x164>)
 800242a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800242e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <HAL_UART_MspInit+0x164>)
 8002432:	2200      	movs	r2, #0
 8002434:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002436:	4b18      	ldr	r3, [pc, #96]	; (8002498 <HAL_UART_MspInit+0x164>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800243c:	4b16      	ldr	r3, [pc, #88]	; (8002498 <HAL_UART_MspInit+0x164>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002442:	4b15      	ldr	r3, [pc, #84]	; (8002498 <HAL_UART_MspInit+0x164>)
 8002444:	2200      	movs	r2, #0
 8002446:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002448:	4b13      	ldr	r3, [pc, #76]	; (8002498 <HAL_UART_MspInit+0x164>)
 800244a:	2200      	movs	r2, #0
 800244c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800244e:	4812      	ldr	r0, [pc, #72]	; (8002498 <HAL_UART_MspInit+0x164>)
 8002450:	f000 fd20 	bl	8002e94 <HAL_DMA_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800245a:	f7ff fded 	bl	8002038 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a0d      	ldr	r2, [pc, #52]	; (8002498 <HAL_UART_MspInit+0x164>)
 8002462:	639a      	str	r2, [r3, #56]	; 0x38
 8002464:	4a0c      	ldr	r2, [pc, #48]	; (8002498 <HAL_UART_MspInit+0x164>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2100      	movs	r1, #0
 800246e:	2025      	movs	r0, #37	; 0x25
 8002470:	f000 fcd9 	bl	8002e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002474:	2025      	movs	r0, #37	; 0x25
 8002476:	f000 fcf2 	bl	8002e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800247a:	bf00      	nop
 800247c:	3728      	adds	r7, #40	; 0x28
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40011000 	.word	0x40011000
 8002488:	40023800 	.word	0x40023800
 800248c:	40020000 	.word	0x40020000
 8002490:	200001f4 	.word	0x200001f4
 8002494:	400264b8 	.word	0x400264b8
 8002498:	20000254 	.word	0x20000254
 800249c:	40026440 	.word	0x40026440

080024a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024a4:	480d      	ldr	r0, [pc, #52]	; (80024dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024a6:	490e      	ldr	r1, [pc, #56]	; (80024e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024a8:	4a0e      	ldr	r2, [pc, #56]	; (80024e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ac:	e002      	b.n	80024b4 <LoopCopyDataInit>

080024ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b2:	3304      	adds	r3, #4

080024b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b8:	d3f9      	bcc.n	80024ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ba:	4a0b      	ldr	r2, [pc, #44]	; (80024e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024bc:	4c0b      	ldr	r4, [pc, #44]	; (80024ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80024be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c0:	e001      	b.n	80024c6 <LoopFillZerobss>

080024c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c4:	3204      	adds	r2, #4

080024c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c8:	d3fb      	bcc.n	80024c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024ca:	f7ff fef7 	bl	80022bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ce:	f005 fb2d 	bl	8007b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024d2:	f7ff fd2f 	bl	8001f34 <main>
  bx  lr    
 80024d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80024e4:	08008d68 	.word	0x08008d68
  ldr r2, =_sbss
 80024e8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80024ec:	20000414 	.word	0x20000414

080024f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024f0:	e7fe      	b.n	80024f0 <ADC_IRQHandler>

080024f2 <_ZN7FUSB302C1EhPFbhhhPhES2_PFvmE>:
class FUSB302 {
public:
  typedef bool (*I2CFunc)(const uint8_t deviceAddr, const uint8_t registerAdd, const uint8_t size, uint8_t *buf);
  typedef void (*DelayFunc)(uint32_t milliseconds);

  FUSB302(uint8_t address, I2CFunc read, I2CFunc write, DelayFunc delay) : DeviceAddress(address), I2CRead(read), I2CWrite(write), osDelay(delay){};
 80024f2:	b480      	push	{r7}
 80024f4:	b085      	sub	sp, #20
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	603b      	str	r3, [r7, #0]
 80024fe:	460b      	mov	r3, r1
 8002500:	72fb      	strb	r3, [r7, #11]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	7afa      	ldrb	r2, [r7, #11]
 8002506:	701a      	strb	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4618      	mov	r0, r3
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <_ZN12PolicyEngineC1E7FUSB302PFmvEPFvmEPFvP6pd_msgbEPFbPKS5_S6_E>:
   * Create a Sink_Capabilities message for our current capabilities.
   */
  typedef void (*SinkCapabilityFunc)(pd_msg *cap, const bool isPD3);
  typedef uint32_t (*TimestampFunc)();
  typedef void (*DelayFunc)(uint32_t milliseconds);
  PolicyEngine(FUSB302 fusbStruct, TimestampFunc getTimestampF, DelayFunc delayFuncF, SinkCapabilityFunc sinkCapabilities, EvaluateCapabilityFunc evalFunc)
 8002528:	b084      	sub	sp, #16
 800252a:	b590      	push	{r4, r7, lr}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	f107 001c 	add.w	r0, r7, #28
 8002536:	e880 000e 	stmia.w	r0, {r1, r2, r3}
      : fusb(fusbStruct),                               //
        getTimeStamp(getTimestampF),                    //
        pdbs_dpm_get_sink_capability(sinkCapabilities), //
        pdbs_dpm_evaluate_capability(evalFunc),         //
        osDelay(delayFuncF)                             //
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	461c      	mov	r4, r3
 800253e:	f107 031c 	add.w	r3, r7, #28
 8002542:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002544:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800254c:	611a      	str	r2, [r3, #16]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002552:	615a      	str	r2, [r3, #20]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002558:	619a      	str	r2, [r3, #24]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800255e:	61da      	str	r2, [r3, #28]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	639a      	str	r2, [r3, #56]	; 0x38
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	63da      	str	r2, [r3, #60]	; 0x3c
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3344      	adds	r3, #68	; 0x44
 8002570:	2220      	movs	r2, #32
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f005 fb0b 	bl	8007b90 <memset>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3364      	adds	r3, #100	; 0x64
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fa88 	bl	8002a94 <_ZN10ringbufferI6pd_msgLj4EEC1Ev>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	33f0      	adds	r3, #240	; 0xf0
 8002588:	2220      	movs	r2, #32
 800258a:	2100      	movs	r1, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f005 faff 	bl	8007b90 <memset>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002598:	2220      	movs	r2, #32
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f005 faf7 	bl	8007b90 <memset>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2203      	movs	r2, #3
 80025a6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  {
    hdr_template = PD_DATAROLE_UFP | PD_POWERROLE_SINK;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	85da      	strh	r2, [r3, #46]	; 0x2e
    _pps_index   = 0xFF;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	22ff      	movs	r2, #255	; 0xff
 80025b4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  };
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80025c4:	b004      	add	sp, #16
 80025c6:	4770      	bx	lr

080025c8 <_Z9irc_writehhhPh>:
#include <cstdio>
void pdbs_dpm_get_sink_capability(pd_msg *cap, const bool isPD3);
bool pdbs_dpm_evaluate_capability(const pd_msg *capabilities, pd_msg *request);

bool irc_write(const uint8_t deviceAddr, const uint8_t registerAdd,
		const uint8_t size, uint8_t *buf) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af04      	add	r7, sp, #16
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	4603      	mov	r3, r0
 80025d2:	71fb      	strb	r3, [r7, #7]
 80025d4:	460b      	mov	r3, r1
 80025d6:	71bb      	strb	r3, [r7, #6]
 80025d8:	4613      	mov	r3, r2
 80025da:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(&hi2c1, deviceAddr, registerAdd,
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	b299      	uxth	r1, r3
 80025e0:	79bb      	ldrb	r3, [r7, #6]
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	797b      	ldrb	r3, [r7, #5]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025ec:	9002      	str	r0, [sp, #8]
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	2301      	movs	r3, #1
 80025f6:	4806      	ldr	r0, [pc, #24]	; (8002610 <_Z9irc_writehhhPh+0x48>)
 80025f8:	f001 fac6 	bl	8003b88 <HAL_I2C_Mem_Write>
 80025fc:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, buf, size, 500) == HAL_OK;
 80025fe:	2b00      	cmp	r3, #0
 8002600:	bf0c      	ite	eq
 8002602:	2301      	moveq	r3, #1
 8002604:	2300      	movne	r3, #0
 8002606:	b2db      	uxtb	r3, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20000098 	.word	0x20000098

08002614 <_Z8irc_readhhhPh>:
bool irc_read(const uint8_t deviceAddr, const uint8_t registerAdd,
		const uint8_t size, uint8_t *buf) {
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af04      	add	r7, sp, #16
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	4603      	mov	r3, r0
 800261e:	71fb      	strb	r3, [r7, #7]
 8002620:	460b      	mov	r3, r1
 8002622:	71bb      	strb	r3, [r7, #6]
 8002624:	4613      	mov	r3, r2
 8002626:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(&hi2c1, deviceAddr, registerAdd,
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	b299      	uxth	r1, r3
 800262c:	79bb      	ldrb	r3, [r7, #6]
 800262e:	b29a      	uxth	r2, r3
 8002630:	797b      	ldrb	r3, [r7, #5]
 8002632:	b29b      	uxth	r3, r3
 8002634:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002638:	9002      	str	r0, [sp, #8]
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	2301      	movs	r3, #1
 8002642:	4806      	ldr	r0, [pc, #24]	; (800265c <_Z8irc_readhhhPh+0x48>)
 8002644:	f001 fb9a 	bl	8003d7c <HAL_I2C_Mem_Read>
 8002648:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, buf, size, 500) == HAL_OK;
 800264a:	2b00      	cmp	r3, #0
 800264c:	bf0c      	ite	eq
 800264e:	2301      	moveq	r3, #1
 8002650:	2300      	movne	r3, #0
 8002652:	b2db      	uxtb	r3, r3
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000098 	.word	0x20000098

08002660 <pd_user_main>:
FUSB302 fusb(FUSB302B_ADDR, irc_read, irc_write, HAL_Delay); // Create FUSB driver
PolicyEngine pe(fusb, HAL_GetTick, HAL_Delay, pdbs_dpm_get_sink_capability,
		pdbs_dpm_evaluate_capability);

volatile bool irqoccured = false;
void pd_user_main() {
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0

	if (fusb.fusb_read_id() && fusb.fusb_setup()) {
 8002664:	4822      	ldr	r0, [pc, #136]	; (80026f0 <pd_user_main+0x90>)
 8002666:	f7fe f9a1 	bl	80009ac <_ZNK7FUSB30212fusb_read_idEv>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <pd_user_main+0x20>
 8002670:	481f      	ldr	r0, [pc, #124]	; (80026f0 <pd_user_main+0x90>)
 8002672:	f7fe f837 	bl	80006e4 <_ZNK7FUSB30210fusb_setupEv>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <pd_user_main+0x20>
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <pd_user_main+0x22>
 8002680:	2300      	movs	r3, #0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d02e      	beq.n	80026e4 <pd_user_main+0x84>

		//FUSB detected, start code
		printf("FUSB Comms OK\r\n");
 8002686:	481b      	ldr	r0, [pc, #108]	; (80026f4 <pd_user_main+0x94>)
 8002688:	f005 fb10 	bl	8007cac <puts>
		irqoccured = true; //Force at least one read of the status regs at boot
 800268c:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <pd_user_main+0x98>)
 800268e:	2201      	movs	r2, #1
 8002690:	701a      	strb	r2, [r3, #0]
		for (;;) {
			printf(">Running thread \r\n");
 8002692:	481a      	ldr	r0, [pc, #104]	; (80026fc <pd_user_main+0x9c>)
 8002694:	f005 fb0a 	bl	8007cac <puts>
			while (pe.thread()) { //Iterate until its stable
 8002698:	4819      	ldr	r0, [pc, #100]	; (8002700 <pd_user_main+0xa0>)
 800269a:	f7fe facb 	bl	8000c34 <_ZN12PolicyEngine6threadEv>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d000      	beq.n	80026a6 <pd_user_main+0x46>
 80026a4:	e7f8      	b.n	8002698 <pd_user_main+0x38>
			}
			printf(">Waiting for events \r\n");
 80026a6:	4817      	ldr	r0, [pc, #92]	; (8002704 <pd_user_main+0xa4>)
 80026a8:	f005 fb00 	bl	8007cac <puts>
			while (irqoccured == false
 80026ac:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <pd_user_main+0x98>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	b2db      	uxtb	r3, r3
					&& (HAL_GPIO_ReadPin(FUSB_IRQ_GPIO_Port, FUSB_IRQ_Pin)
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d108      	bne.n	80026c8 <pd_user_main+0x68>
 80026b6:	2120      	movs	r1, #32
 80026b8:	4813      	ldr	r0, [pc, #76]	; (8002708 <pd_user_main+0xa8>)
 80026ba:	f001 f909 	bl	80038d0 <HAL_GPIO_ReadPin>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <pd_user_main+0x68>
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <pd_user_main+0x6a>
 80026c8:	2300      	movs	r3, #0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <pd_user_main+0x76>
							== GPIO_PIN_SET)) {
				HAL_Delay(3); // Must respond to messages < 20ms, so fast iteration or use an rtos to schedule
 80026ce:	2003      	movs	r0, #3
 80026d0:	f000 faaa 	bl	8002c28 <HAL_Delay>
			while (irqoccured == false
 80026d4:	e7ea      	b.n	80026ac <pd_user_main+0x4c>
			}
			irqoccured = false;
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <pd_user_main+0x98>)
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
			pe.IRQOccured();
 80026dc:	4808      	ldr	r0, [pc, #32]	; (8002700 <pd_user_main+0xa0>)
 80026de:	f7fe fa07 	bl	8000af0 <_ZN12PolicyEngine10IRQOccuredEv>
			printf(">Running thread \r\n");
 80026e2:	e7d6      	b.n	8002692 <pd_user_main+0x32>
		}
	} else {
		printf("FUSB Comms Failed\r\n");
 80026e4:	4809      	ldr	r0, [pc, #36]	; (800270c <pd_user_main+0xac>)
 80026e6:	f005 fae1 	bl	8007cac <puts>
	}
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200002b4 	.word	0x200002b4
 80026f4:	08008bcc 	.word	0x08008bcc
 80026f8:	200003fc 	.word	0x200003fc
 80026fc:	08008bdc 	.word	0x08008bdc
 8002700:	200002c4 	.word	0x200002c4
 8002704:	08008bf0 	.word	0x08008bf0
 8002708:	40020400 	.word	0x40020400
 800270c:	08008c08 	.word	0x08008c08

08002710 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_>:
	irqoccured = true;
}
/* The current draw when the output is disabled */
#define DPM_MIN_CURRENT PD_MA2PDI(100)

bool pdbs_dpm_evaluate_capability(const pd_msg *capabilities, pd_msg *request) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]

	/* Get the number of PDOs */
	uint8_t numobj = PD_NUMOBJ_GET(capabilities);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	885b      	ldrh	r3, [r3, #2]
 800271e:	b29b      	uxth	r3, r3
 8002720:	131b      	asrs	r3, r3, #12
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	767b      	strb	r3, [r7, #25]
	/* Get whether or not the power supply is constrained */

	/* Make sure we have configuration */
	/* Look at the PDOs to see if one matches our desires */
	// Look against USB_PD_Desired_Levels to select in order of preference
	uint8_t bestIndex = 0xFF;
 800272a:	23ff      	movs	r3, #255	; 0xff
 800272c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int bestIndexVoltage = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	623b      	str	r3, [r7, #32]
	int bestIndexCurrent = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	61fb      	str	r3, [r7, #28]
	bool bestIsPPS = false;
 8002738:	2300      	movs	r3, #0
 800273a:	76fb      	strb	r3, [r7, #27]
	for (uint8_t i = 0; i < numobj; i++) {
 800273c:	2300      	movs	r3, #0
 800273e:	76bb      	strb	r3, [r7, #26]
 8002740:	7eba      	ldrb	r2, [r7, #26]
 8002742:	7e7b      	ldrb	r3, [r7, #25]
 8002744:	429a      	cmp	r2, r3
 8002746:	f080 808d 	bcs.w	8002864 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x154>
		/* If we have a fixed PDO, its V equals our desired V, and its I is
		 * at least our desired I */
		if ((capabilities->obj[i] & PD_PDO_TYPE) == PD_PDO_TYPE_FIXED) {
 800274a:	7ebb      	ldrb	r3, [r7, #26]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d12f      	bne.n	80027bc <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0xac>
			// This is a fixed PDO entry
			// Evaluate if it can produve sufficient current based on the
			// tipResistance (ohms*10) V=I*R -> V/I => minimum resistance, if our tip
			// resistance is >= this then we can use this supply

			int voltage_mv = PD_PDV2MV(
 800275c:	7ebb      	ldrb	r3, [r7, #26]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	0a9b      	lsrs	r3, r3, #10
 8002768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800276c:	2232      	movs	r2, #50	; 0x32
 800276e:	fb02 f303 	mul.w	r3, r2, r3
 8002772:	613b      	str	r3, [r7, #16]
					PD_PDO_SRC_FIXED_VOLTAGE_GET(capabilities->obj[i])); // voltage in mV units
			int current_a_x100 = PD_PDO_SRC_FIXED_CURRENT_GET(
 8002774:	7ebb      	ldrb	r3, [r7, #26]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002782:	60fb      	str	r3, [r7, #12]
					capabilities->obj[i]);            // current in 10mA units
			printf("PD slot %d -> %d mV; %d mA\r\n", i, voltage_mv,
 8002784:	7eb9      	ldrb	r1, [r7, #26]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4872      	ldr	r0, [pc, #456]	; (800295c <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x24c>)
 8002794:	f005 fa04 	bl	8007ba0 <iprintf>
					current_a_x100 * 10);
			if (voltage_mv > bestIndexVoltage || bestIndex == 0xFF) {
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	429a      	cmp	r2, r3
 800279e:	dc03      	bgt.n	80027a8 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x98>
 80027a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027a4:	2bff      	cmp	r3, #255	; 0xff
 80027a6:	d159      	bne.n	800285c <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x14c>
				// Higher voltage and valid, select this instead
				bestIndex = i;
 80027a8:	7ebb      	ldrb	r3, [r7, #26]
 80027aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bestIndexVoltage = voltage_mv;
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	623b      	str	r3, [r7, #32]
				bestIndexCurrent = current_a_x100;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	61fb      	str	r3, [r7, #28]
				bestIsPPS = false;
 80027b6:	2300      	movs	r3, #0
 80027b8:	76fb      	strb	r3, [r7, #27]
 80027ba:	e04f      	b.n	800285c <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x14c>
			}
		} else if ((capabilities->obj[i] & PD_PDO_TYPE) == PD_PDO_TYPE_AUGMENTED
 80027bc:	7ebb      	ldrb	r3, [r7, #26]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80027ca:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80027ce:	d145      	bne.n	800285c <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x14c>
				&& (capabilities->obj[i] & PD_APDO_TYPE) == PD_APDO_TYPE_PPS) {
 80027d0:	7ebb      	ldrb	r3, [r7, #26]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d13c      	bne.n	800285c <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x14c>
			// If this is a PPS slot, calculate the max voltage in the PPS range that
			// can we be used and maintain
			uint16_t max_voltage = PD_PAV2MV(
 80027e2:	7ebb      	ldrb	r3, [r7, #26]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	0c5b      	lsrs	r3, r3, #17
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	461a      	mov	r2, r3
 80027f6:	0092      	lsls	r2, r2, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	461a      	mov	r2, r3
 80027fc:	0091      	lsls	r1, r2, #2
 80027fe:	461a      	mov	r2, r3
 8002800:	460b      	mov	r3, r1
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	82fb      	strh	r3, [r7, #22]
					PD_APDO_PPS_MAX_VOLTAGE_GET(capabilities->obj[i]));
			// uint16_t min_voltage =
			// PD_PAV2MV(PD_APDO_PPS_MIN_VOLTAGE_GET(capabilities->obj[i]));
			uint16_t max_current = PD_PAI2CA(
 8002808:	7ebb      	ldrb	r3, [r7, #26]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	b2db      	uxtb	r3, r3
 8002814:	b29b      	uxth	r3, r3
 8002816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800281a:	b29b      	uxth	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	0092      	lsls	r2, r2, #2
 8002820:	4413      	add	r3, r2
 8002822:	82bb      	strh	r3, [r7, #20]
					PD_APDO_PPS_CURRENT_GET(capabilities->obj[i])); // max current in 10mA units
			printf("PD PDO slot %d -> %d mV; %d mA\r\n", i, max_voltage,
 8002824:	7eb9      	ldrb	r1, [r7, #26]
 8002826:	8af8      	ldrh	r0, [r7, #22]
					max_current * 10);
 8002828:	8aba      	ldrh	r2, [r7, #20]
			printf("PD PDO slot %d -> %d mV; %d mA\r\n", i, max_voltage,
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4602      	mov	r2, r0
 8002834:	484a      	ldr	r0, [pc, #296]	; (8002960 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x250>)
 8002836:	f005 f9b3 	bl	8007ba0 <iprintf>
			// Using the current and tip resistance, calculate the ideal max voltage
			// if this is range, then we will work with this voltage
			// if this is not in range; then max_voltage can be safely selected
			if (max_voltage > bestIndexVoltage || bestIndex == 0xFF) {
 800283a:	8afb      	ldrh	r3, [r7, #22]
 800283c:	6a3a      	ldr	r2, [r7, #32]
 800283e:	429a      	cmp	r2, r3
 8002840:	db03      	blt.n	800284a <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x13a>
 8002842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002846:	2bff      	cmp	r3, #255	; 0xff
 8002848:	d108      	bne.n	800285c <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x14c>
				bestIndex = i;
 800284a:	7ebb      	ldrb	r3, [r7, #26]
 800284c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bestIndexVoltage = max_voltage;
 8002850:	8afb      	ldrh	r3, [r7, #22]
 8002852:	623b      	str	r3, [r7, #32]
				bestIndexCurrent = max_current;
 8002854:	8abb      	ldrh	r3, [r7, #20]
 8002856:	61fb      	str	r3, [r7, #28]
				bestIsPPS = true;
 8002858:	2301      	movs	r3, #1
 800285a:	76fb      	strb	r3, [r7, #27]
	for (uint8_t i = 0; i < numobj; i++) {
 800285c:	7ebb      	ldrb	r3, [r7, #26]
 800285e:	3301      	adds	r3, #1
 8002860:	76bb      	strb	r3, [r7, #26]
 8002862:	e76d      	b.n	8002740 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x30>
			}
		}
	}

	if (bestIndex != 0xFF) {
 8002864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002868:	2bff      	cmp	r3, #255	; 0xff
 800286a:	d053      	beq.n	8002914 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x204>
		printf("Found desired capability at index  %d, %d mV, %d mA\r\n",
 800286c:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002870:	69fa      	ldr	r2, [r7, #28]
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	6a3a      	ldr	r2, [r7, #32]
 800287c:	4839      	ldr	r0, [pc, #228]	; (8002964 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x254>)
 800287e:	f005 f98f 	bl	8007ba0 <iprintf>
				(int) bestIndex, bestIndexVoltage, bestIndexCurrent * 10);

		/* We got what we wanted, so build a request for that */
		request->hdr = PD_MSGTYPE_REQUEST | PD_NUMOBJ(1);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2200      	movs	r2, #0
 8002886:	f042 0202 	orr.w	r2, r2, #2
 800288a:	709a      	strb	r2, [r3, #2]
 800288c:	2200      	movs	r2, #0
 800288e:	f042 0210 	orr.w	r2, r2, #16
 8002892:	70da      	strb	r2, [r3, #3]
		if (bestIsPPS) {
 8002894:	7efb      	ldrb	r3, [r7, #27]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d021      	beq.n	80028de <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x1ce>
			request->obj[0] =
					PD_RDO_PROG_CURRENT_SET(
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3304      	adds	r3, #4
 800289e:	4a32      	ldr	r2, [pc, #200]	; (8002968 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x258>)
 80028a0:	fb82 1203 	smull	r1, r2, r2, r3
 80028a4:	1052      	asrs	r2, r2, #1
 80028a6:	17db      	asrs	r3, r3, #31
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
							PD_CA2PAI(bestIndexCurrent)) | PD_RDO_PROG_VOLTAGE_SET(PD_MV2PRV(bestIndexVoltage)) | PD_RDO_NO_USB_SUSPEND | PD_RDO_OBJPOS_SET(bestIndex + 1);
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	492d      	ldr	r1, [pc, #180]	; (8002968 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x258>)
 80028b2:	fb81 0103 	smull	r0, r1, r1, r3
 80028b6:	10c9      	asrs	r1, r1, #3
 80028b8:	17db      	asrs	r3, r3, #31
 80028ba:	1acb      	subs	r3, r1, r3
 80028bc:	0259      	lsls	r1, r3, #9
 80028be:	4b2b      	ldr	r3, [pc, #172]	; (800296c <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x25c>)
 80028c0:	400b      	ands	r3, r1
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80028c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028cc:	3301      	adds	r3, #1
 80028ce:	071b      	lsls	r3, r3, #28
 80028d0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80028d4:	4313      	orrs	r3, r2
 80028d6:	461a      	mov	r2, r3
			request->obj[0] =
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	605a      	str	r2, [r3, #4]
 80028dc:	e013      	b.n	8002906 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x1f6>
		} else {
			request->obj[0] =
					PD_RDO_FV_MAX_CURRENT_SET(
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
							bestIndexCurrent) | PD_RDO_FV_CURRENT_SET(bestIndexCurrent) | PD_RDO_NO_USB_SUSPEND | PD_RDO_OBJPOS_SET(bestIndex + 1);
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	0299      	lsls	r1, r3, #10
 80028e8:	4b21      	ldr	r3, [pc, #132]	; (8002970 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x260>)
 80028ea:	400b      	ands	r3, r1
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80028f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028f6:	3301      	adds	r3, #1
 80028f8:	071b      	lsls	r3, r3, #28
 80028fa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80028fe:	4313      	orrs	r3, r2
 8002900:	461a      	mov	r2, r3
			request->obj[0] =
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	605a      	str	r2, [r3, #4]
		}
		// USB Data
		request->obj[0] |= PD_RDO_USB_COMMS;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	e01d      	b.n	8002950 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x240>
	} else {
		/* Nothing matched (or no configuration), so get 5 V at low current */
		request->hdr = PD_MSGTYPE_REQUEST | PD_NUMOBJ(1);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2200      	movs	r2, #0
 8002918:	f042 0202 	orr.w	r2, r2, #2
 800291c:	709a      	strb	r2, [r3, #2]
 800291e:	2200      	movs	r2, #0
 8002920:	f042 0210 	orr.w	r2, r2, #16
 8002924:	70da      	strb	r2, [r3, #3]
		request->obj[0] =
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2200      	movs	r2, #0
 800292a:	f042 020a 	orr.w	r2, r2, #10
 800292e:	711a      	strb	r2, [r3, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8002936:	715a      	strb	r2, [r3, #5]
 8002938:	2200      	movs	r2, #0
 800293a:	719a      	strb	r2, [r3, #6]
 800293c:	2200      	movs	r2, #0
 800293e:	f042 0211 	orr.w	r2, r2, #17
 8002942:	71da      	strb	r2, [r3, #7]
		 * mismatch. */
		if (false /*TODO: Check if you have already negotiated*/) {
			request->obj[0] |= PD_RDO_CAP_MISMATCH;
		}
		// USB Data
		request->obj[0] |= PD_RDO_USB_COMMS;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	605a      	str	r2, [r3, #4]
	}
	// Even if we didnt match, we return true as we would still like to handshake
	// on 5V at the minimum
	return true;
 8002950:	2301      	movs	r3, #1
}
 8002952:	4618      	mov	r0, r3
 8002954:	3728      	adds	r7, #40	; 0x28
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	08008c1c 	.word	0x08008c1c
 8002960:	08008c3c 	.word	0x08008c3c
 8002964:	08008c60 	.word	0x08008c60
 8002968:	66666667 	.word	0x66666667
 800296c:	000ffe00 	.word	0x000ffe00
 8002970:	000ffc00 	.word	0x000ffc00

08002974 <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb>:

void pdbs_dpm_get_sink_capability(pd_msg *cap, const bool isPD3) {
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	70fb      	strb	r3, [r7, #3]
	/* Keep track of how many PDOs we've added */
	int numobj = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]

	// Must always have a PDO object for vSafe5V, indicate the bare minimum power required
	/* Minimum current, 5 V, and higher capability. */
	cap->obj[numobj++] =
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	60fa      	str	r2, [r7, #12]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	2200      	movs	r2, #0
 8002992:	f042 020a 	orr.w	r2, r2, #10
 8002996:	711a      	strb	r2, [r3, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f062 026f 	orn	r2, r2, #111	; 0x6f
 800299e:	715a      	strb	r2, [r3, #5]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	719a      	strb	r2, [r3, #6]
 80029a8:	2200      	movs	r2, #0
 80029aa:	71da      	strb	r2, [r3, #7]
					| PD_PDO_SNK_FIXED_VOLTAGE_SET(
							PD_MV2PDV(5000)) | PD_PDO_SNK_FIXED_CURRENT_SET(DPM_MIN_CURRENT);

	if (true) { // If requesting more than 5V
		/* Get the current we want */
		uint16_t voltage = 20 * 1000; // in mv => 20V
 80029ac:	f644 6320 	movw	r3, #20000	; 0x4e20
 80029b0:	817b      	strh	r3, [r7, #10]
		uint16_t current = 2 * 100;   // In centi-amps => 2A
 80029b2:	23c8      	movs	r3, #200	; 0xc8
 80029b4:	813b      	strh	r3, [r7, #8]

		/* Add a PDO for the desired power. */
		cap->obj[numobj++] =
				PD_PDO_TYPE_FIXED
						| PD_PDO_SNK_FIXED_VOLTAGE_SET(
 80029b6:	897b      	ldrh	r3, [r7, #10]
 80029b8:	4a33      	ldr	r2, [pc, #204]	; (8002a88 <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb+0x114>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	029b      	lsls	r3, r3, #10
 80029c4:	461a      	mov	r2, r3
 80029c6:	4b31      	ldr	r3, [pc, #196]	; (8002a8c <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb+0x118>)
 80029c8:	4013      	ands	r3, r2
								PD_MV2PDV(voltage)) | PD_PDO_SNK_FIXED_CURRENT_SET(current);
 80029ca:	893a      	ldrh	r2, [r7, #8]
 80029cc:	f3c2 0109 	ubfx	r1, r2, #0, #10
		cap->obj[numobj++] =
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	1c50      	adds	r0, r2, #1
 80029d4:	60f8      	str	r0, [r7, #12]
								PD_MV2PDV(voltage)) | PD_PDO_SNK_FIXED_CURRENT_SET(current);
 80029d6:	4319      	orrs	r1, r3
		cap->obj[numobj++] =
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	0093      	lsls	r3, r2, #2
 80029dc:	4403      	add	r3, r0
 80029de:	6059      	str	r1, [r3, #4]

		/* If we want more than 5 V, set the Higher Capability flag */
		if (PD_MV2PDV(voltage) != PD_MV2PDV(5000)) {
 80029e0:	897b      	ldrh	r3, [r7, #10]
 80029e2:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 80029e6:	3b08      	subs	r3, #8
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b31      	cmp	r3, #49	; 0x31
 80029ec:	d905      	bls.n	80029fa <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb+0x86>
			cap->obj[0] |= PD_PDO_SNK_FIXED_HIGHER_CAP;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	605a      	str	r2, [r3, #4]
		}
		/* If we're using PD 3.0, add a PPS APDO for our desired voltage */
		if (isPD3) {
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d025      	beq.n	8002a4c <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb+0xd8>
			cap->obj[numobj++] =
					PD_PDO_TYPE_AUGMENTED | PD_APDO_TYPE_PPS
							| PD_APDO_PPS_MAX_VOLTAGE_SET(
 8002a00:	897b      	ldrh	r3, [r7, #10]
 8002a02:	4a21      	ldr	r2, [pc, #132]	; (8002a88 <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb+0x114>)
 8002a04:	fba2 2303 	umull	r2, r3, r2, r3
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	045b      	lsls	r3, r3, #17
 8002a0e:	f003 72ff 	and.w	r2, r3, #33423360	; 0x1fe0000
									PD_MV2PAV(voltage)) | PD_APDO_PPS_MIN_VOLTAGE_SET(PD_MV2PAV(voltage)) | PD_APDO_PPS_CURRENT_SET(PD_CA2PAI(current));
 8002a12:	897b      	ldrh	r3, [r7, #10]
 8002a14:	491c      	ldr	r1, [pc, #112]	; (8002a88 <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb+0x114>)
 8002a16:	fba1 1303 	umull	r1, r3, r1, r3
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	431a      	orrs	r2, r3
 8002a24:	893b      	ldrh	r3, [r7, #8]
 8002a26:	3304      	adds	r3, #4
 8002a28:	4919      	ldr	r1, [pc, #100]	; (8002a90 <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb+0x11c>)
 8002a2a:	fb81 0103 	smull	r0, r1, r1, r3
 8002a2e:	1049      	asrs	r1, r1, #1
 8002a30:	17db      	asrs	r3, r3, #31
 8002a32:	1acb      	subs	r3, r1, r3
 8002a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a38:	431a      	orrs	r2, r3
			cap->obj[numobj++] =
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1c59      	adds	r1, r3, #1
 8002a3e:	60f9      	str	r1, [r7, #12]
									PD_MV2PAV(voltage)) | PD_APDO_PPS_MIN_VOLTAGE_SET(PD_MV2PAV(voltage)) | PD_APDO_PPS_CURRENT_SET(PD_CA2PAI(current));
 8002a40:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
			cap->obj[numobj++] =
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	605a      	str	r2, [r3, #4]
		}
	}
	/* Set the USB communications capable flag. */
	cap->obj[0] |= PD_PDO_SNK_FIXED_USB_COMMS;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	605a      	str	r2, [r3, #4]
	// if this device is unconstrained, set the flag
	cap->obj[0] |= PD_PDO_SNK_FIXED_UNCONSTRAINED;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	605a      	str	r2, [r3, #4]

	/* Set the Sink_Capabilities message header */
	cap->hdr = PD_MSGTYPE_SINK_CAPABILITIES | PD_NUMOBJ(numobj);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	031b      	lsls	r3, r3, #12
 8002a68:	b21b      	sxth	r3, r3
 8002a6a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002a6e:	b21b      	sxth	r3, r3
 8002a70:	f043 0304 	orr.w	r3, r3, #4
 8002a74:	b21b      	sxth	r3, r3
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	805a      	strh	r2, [r3, #2]
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	51eb851f 	.word	0x51eb851f
 8002a8c:	000ffc00 	.word	0x000ffc00
 8002a90:	66666667 	.word	0x66666667

08002a94 <_ZN10ringbufferI6pd_msgLj4EEC1Ev>:
  explicit ringbuffer() : begin(0), end(0), wrap(false) {}
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <_Z41__static_initialization_and_destruction_0ii>:
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af06      	add	r7, sp, #24
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d11b      	bne.n	8002b0c <_Z41__static_initialization_and_destruction_0ii+0x48>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d116      	bne.n	8002b0c <_Z41__static_initialization_and_destruction_0ii+0x48>
FUSB302 fusb(FUSB302B_ADDR, irc_read, irc_write, HAL_Delay); // Create FUSB driver
 8002ade:	4b0d      	ldr	r3, [pc, #52]	; (8002b14 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002ae4:	4a0d      	ldr	r2, [pc, #52]	; (8002b1c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002ae6:	2144      	movs	r1, #68	; 0x44
 8002ae8:	480d      	ldr	r0, [pc, #52]	; (8002b20 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002aea:	f7ff fd02 	bl	80024f2 <_ZN7FUSB302C1EhPFbhhhPhES2_PFvmE>
		pdbs_dpm_evaluate_capability);
 8002aee:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002af0:	4a0c      	ldr	r2, [pc, #48]	; (8002b24 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002af2:	9204      	str	r2, [sp, #16]
 8002af4:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002af6:	9203      	str	r2, [sp, #12]
 8002af8:	4a06      	ldr	r2, [pc, #24]	; (8002b14 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002afa:	9202      	str	r2, [sp, #8]
 8002afc:	4a0b      	ldr	r2, [pc, #44]	; (8002b2c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002afe:	9201      	str	r2, [sp, #4]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	9200      	str	r2, [sp, #0]
 8002b04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b06:	480a      	ldr	r0, [pc, #40]	; (8002b30 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002b08:	f7ff fd0e 	bl	8002528 <_ZN12PolicyEngineC1E7FUSB302PFmvEPFvmEPFvP6pd_msgbEPFbPKS5_S6_E>
}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	08002c29 	.word	0x08002c29
 8002b18:	080025c9 	.word	0x080025c9
 8002b1c:	08002615 	.word	0x08002615
 8002b20:	200002b4 	.word	0x200002b4
 8002b24:	08002711 	.word	0x08002711
 8002b28:	08002975 	.word	0x08002975
 8002b2c:	08002c11 	.word	0x08002c11
 8002b30:	200002c4 	.word	0x200002c4

08002b34 <_GLOBAL__sub_I__Z9irc_writehhhPh>:
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	f7ff ffc1 	bl	8002ac4 <_Z41__static_initialization_and_destruction_0ii>
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <HAL_Init+0x40>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a0d      	ldr	r2, [pc, #52]	; (8002b84 <HAL_Init+0x40>)
 8002b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_Init+0x40>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <HAL_Init+0x40>)
 8002b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <HAL_Init+0x40>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a07      	ldr	r2, [pc, #28]	; (8002b84 <HAL_Init+0x40>)
 8002b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b6c:	2003      	movs	r0, #3
 8002b6e:	f000 f94f 	bl	8002e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b72:	2000      	movs	r0, #0
 8002b74:	f000 f808 	bl	8002b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b78:	f7ff fa64 	bl	8002044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40023c00 	.word	0x40023c00

08002b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b90:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_InitTick+0x54>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <HAL_InitTick+0x58>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 f967 	bl	8002e7a <HAL_SYSTICK_Config>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e00e      	b.n	8002bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b0f      	cmp	r3, #15
 8002bba:	d80a      	bhi.n	8002bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	f000 f92f 	bl	8002e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bc8:	4a06      	ldr	r2, [pc, #24]	; (8002be4 <HAL_InitTick+0x5c>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e000      	b.n	8002bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20000008 	.word	0x20000008
 8002be0:	20000010 	.word	0x20000010
 8002be4:	2000000c 	.word	0x2000000c

08002be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_IncTick+0x20>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_IncTick+0x24>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <HAL_IncTick+0x24>)
 8002bfa:	6013      	str	r3, [r2, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20000010 	.word	0x20000010
 8002c0c:	20000400 	.word	0x20000400

08002c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return uwTick;
 8002c14:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <HAL_GetTick+0x14>)
 8002c16:	681b      	ldr	r3, [r3, #0]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	20000400 	.word	0x20000400

08002c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c30:	f7ff ffee 	bl	8002c10 <HAL_GetTick>
 8002c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d005      	beq.n	8002c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c42:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <HAL_Delay+0x44>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c4e:	bf00      	nop
 8002c50:	f7ff ffde 	bl	8002c10 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d8f7      	bhi.n	8002c50 <HAL_Delay+0x28>
  {
  }
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000010 	.word	0x20000010

08002c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ca2:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	60d3      	str	r3, [r2, #12]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	f003 0307 	and.w	r3, r3, #7
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	db0b      	blt.n	8002cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	f003 021f 	and.w	r2, r3, #31
 8002cec:	4907      	ldr	r1, [pc, #28]	; (8002d0c <__NVIC_EnableIRQ+0x38>)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	e000e100 	.word	0xe000e100

08002d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	6039      	str	r1, [r7, #0]
 8002d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	db0a      	blt.n	8002d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	490c      	ldr	r1, [pc, #48]	; (8002d5c <__NVIC_SetPriority+0x4c>)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	0112      	lsls	r2, r2, #4
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	440b      	add	r3, r1
 8002d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d38:	e00a      	b.n	8002d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	4908      	ldr	r1, [pc, #32]	; (8002d60 <__NVIC_SetPriority+0x50>)
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	3b04      	subs	r3, #4
 8002d48:	0112      	lsls	r2, r2, #4
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	761a      	strb	r2, [r3, #24]
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000e100 	.word	0xe000e100
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b089      	sub	sp, #36	; 0x24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f1c3 0307 	rsb	r3, r3, #7
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	bf28      	it	cs
 8002d82:	2304      	movcs	r3, #4
 8002d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	2b06      	cmp	r3, #6
 8002d8c:	d902      	bls.n	8002d94 <NVIC_EncodePriority+0x30>
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3b03      	subs	r3, #3
 8002d92:	e000      	b.n	8002d96 <NVIC_EncodePriority+0x32>
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d98:	f04f 32ff 	mov.w	r2, #4294967295
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43da      	mvns	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	401a      	ands	r2, r3
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dac:	f04f 31ff 	mov.w	r1, #4294967295
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	fa01 f303 	lsl.w	r3, r1, r3
 8002db6:	43d9      	mvns	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dbc:	4313      	orrs	r3, r2
         );
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3724      	adds	r7, #36	; 0x24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ddc:	d301      	bcc.n	8002de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dde:	2301      	movs	r3, #1
 8002de0:	e00f      	b.n	8002e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002de2:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <SysTick_Config+0x40>)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dea:	210f      	movs	r1, #15
 8002dec:	f04f 30ff 	mov.w	r0, #4294967295
 8002df0:	f7ff ff8e 	bl	8002d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <SysTick_Config+0x40>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dfa:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <SysTick_Config+0x40>)
 8002dfc:	2207      	movs	r2, #7
 8002dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	e000e010 	.word	0xe000e010

08002e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff ff29 	bl	8002c70 <__NVIC_SetPriorityGrouping>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b086      	sub	sp, #24
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
 8002e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e38:	f7ff ff3e 	bl	8002cb8 <__NVIC_GetPriorityGrouping>
 8002e3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	6978      	ldr	r0, [r7, #20]
 8002e44:	f7ff ff8e 	bl	8002d64 <NVIC_EncodePriority>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ff5d 	bl	8002d10 <__NVIC_SetPriority>
}
 8002e56:	bf00      	nop
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b082      	sub	sp, #8
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	4603      	mov	r3, r0
 8002e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ff31 	bl	8002cd4 <__NVIC_EnableIRQ>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff ffa2 	bl	8002dcc <SysTick_Config>
 8002e88:	4603      	mov	r3, r0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ea0:	f7ff feb6 	bl	8002c10 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e099      	b.n	8002fe4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ed0:	e00f      	b.n	8002ef2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ed2:	f7ff fe9d 	bl	8002c10 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d908      	bls.n	8002ef2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2203      	movs	r2, #3
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e078      	b.n	8002fe4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1e8      	bne.n	8002ed2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	4b38      	ldr	r3, [pc, #224]	; (8002fec <HAL_DMA_Init+0x158>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d107      	bne.n	8002f5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	4313      	orrs	r3, r2
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f023 0307 	bic.w	r3, r3, #7
 8002f72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d117      	bne.n	8002fb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00e      	beq.n	8002fb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 fa89 	bl	80034b0 <DMA_CheckFifoParam>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2240      	movs	r2, #64	; 0x40
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e016      	b.n	8002fe4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fa40 	bl	8003444 <DMA_CalcBaseAndBitshift>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fcc:	223f      	movs	r2, #63	; 0x3f
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	f010803f 	.word	0xf010803f

08002ff0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ffe:	f7ff fe07 	bl	8002c10 <HAL_GetTick>
 8003002:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d008      	beq.n	8003022 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2280      	movs	r2, #128	; 0x80
 8003014:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e052      	b.n	80030c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0216 	bic.w	r2, r2, #22
 8003030:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003040:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <HAL_DMA_Abort+0x62>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0208 	bic.w	r2, r2, #8
 8003060:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0201 	bic.w	r2, r2, #1
 8003070:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003072:	e013      	b.n	800309c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003074:	f7ff fdcc 	bl	8002c10 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b05      	cmp	r3, #5
 8003080:	d90c      	bls.n	800309c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2220      	movs	r2, #32
 8003086:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2203      	movs	r2, #3
 800308c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e015      	b.n	80030c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e4      	bne.n	8003074 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ae:	223f      	movs	r2, #63	; 0x3f
 80030b0:	409a      	lsls	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d004      	beq.n	80030ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2280      	movs	r2, #128	; 0x80
 80030e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00c      	b.n	8003108 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2205      	movs	r2, #5
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0201 	bic.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003120:	4b8e      	ldr	r3, [pc, #568]	; (800335c <HAL_DMA_IRQHandler+0x248>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a8e      	ldr	r2, [pc, #568]	; (8003360 <HAL_DMA_IRQHandler+0x24c>)
 8003126:	fba2 2303 	umull	r2, r3, r2, r3
 800312a:	0a9b      	lsrs	r3, r3, #10
 800312c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003132:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313e:	2208      	movs	r2, #8
 8003140:	409a      	lsls	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4013      	ands	r3, r2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d01a      	beq.n	8003180 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d013      	beq.n	8003180 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0204 	bic.w	r2, r2, #4
 8003166:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316c:	2208      	movs	r2, #8
 800316e:	409a      	lsls	r2, r3
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003178:	f043 0201 	orr.w	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003184:	2201      	movs	r2, #1
 8003186:	409a      	lsls	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4013      	ands	r3, r2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d012      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00b      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a2:	2201      	movs	r2, #1
 80031a4:	409a      	lsls	r2, r3
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	f043 0202 	orr.w	r2, r3, #2
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ba:	2204      	movs	r2, #4
 80031bc:	409a      	lsls	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d012      	beq.n	80031ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00b      	beq.n	80031ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d8:	2204      	movs	r2, #4
 80031da:	409a      	lsls	r2, r3
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e4:	f043 0204 	orr.w	r2, r3, #4
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f0:	2210      	movs	r2, #16
 80031f2:	409a      	lsls	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d043      	beq.n	8003284 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d03c      	beq.n	8003284 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320e:	2210      	movs	r2, #16
 8003210:	409a      	lsls	r2, r3
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d018      	beq.n	8003256 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d108      	bne.n	8003244 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d024      	beq.n	8003284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	4798      	blx	r3
 8003242:	e01f      	b.n	8003284 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01b      	beq.n	8003284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	4798      	blx	r3
 8003254:	e016      	b.n	8003284 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d107      	bne.n	8003274 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0208 	bic.w	r2, r2, #8
 8003272:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003288:	2220      	movs	r2, #32
 800328a:	409a      	lsls	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4013      	ands	r3, r2
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 808f 	beq.w	80033b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8087 	beq.w	80033b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032aa:	2220      	movs	r2, #32
 80032ac:	409a      	lsls	r2, r3
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b05      	cmp	r3, #5
 80032bc:	d136      	bne.n	800332c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0216 	bic.w	r2, r2, #22
 80032cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695a      	ldr	r2, [r3, #20]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d103      	bne.n	80032ee <HAL_DMA_IRQHandler+0x1da>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0208 	bic.w	r2, r2, #8
 80032fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003302:	223f      	movs	r2, #63	; 0x3f
 8003304:	409a      	lsls	r2, r3
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800331e:	2b00      	cmp	r3, #0
 8003320:	d07e      	beq.n	8003420 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	4798      	blx	r3
        }
        return;
 800332a:	e079      	b.n	8003420 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d01d      	beq.n	8003376 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10d      	bne.n	8003364 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334c:	2b00      	cmp	r3, #0
 800334e:	d031      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	4798      	blx	r3
 8003358:	e02c      	b.n	80033b4 <HAL_DMA_IRQHandler+0x2a0>
 800335a:	bf00      	nop
 800335c:	20000008 	.word	0x20000008
 8003360:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003368:	2b00      	cmp	r3, #0
 800336a:	d023      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	4798      	blx	r3
 8003374:	e01e      	b.n	80033b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10f      	bne.n	80033a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0210 	bic.w	r2, r2, #16
 8003392:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d032      	beq.n	8003422 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d022      	beq.n	800340e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2205      	movs	r2, #5
 80033cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0201 	bic.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	3301      	adds	r3, #1
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d307      	bcc.n	80033fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f2      	bne.n	80033e0 <HAL_DMA_IRQHandler+0x2cc>
 80033fa:	e000      	b.n	80033fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	4798      	blx	r3
 800341e:	e000      	b.n	8003422 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003420:	bf00      	nop
    }
  }
}
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003436:	b2db      	uxtb	r3, r3
}
 8003438:	4618      	mov	r0, r3
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	3b10      	subs	r3, #16
 8003454:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <DMA_CalcBaseAndBitshift+0x64>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	091b      	lsrs	r3, r3, #4
 800345c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800345e:	4a13      	ldr	r2, [pc, #76]	; (80034ac <DMA_CalcBaseAndBitshift+0x68>)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4413      	add	r3, r2
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b03      	cmp	r3, #3
 8003470:	d909      	bls.n	8003486 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800347a:	f023 0303 	bic.w	r3, r3, #3
 800347e:	1d1a      	adds	r2, r3, #4
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	659a      	str	r2, [r3, #88]	; 0x58
 8003484:	e007      	b.n	8003496 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800348e:	f023 0303 	bic.w	r3, r3, #3
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	aaaaaaab 	.word	0xaaaaaaab
 80034ac:	08008cb4 	.word	0x08008cb4

080034b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d11f      	bne.n	800350a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d856      	bhi.n	800357e <DMA_CheckFifoParam+0xce>
 80034d0:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <DMA_CheckFifoParam+0x28>)
 80034d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d6:	bf00      	nop
 80034d8:	080034e9 	.word	0x080034e9
 80034dc:	080034fb 	.word	0x080034fb
 80034e0:	080034e9 	.word	0x080034e9
 80034e4:	0800357f 	.word	0x0800357f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d046      	beq.n	8003582 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034f8:	e043      	b.n	8003582 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003502:	d140      	bne.n	8003586 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003508:	e03d      	b.n	8003586 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003512:	d121      	bne.n	8003558 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2b03      	cmp	r3, #3
 8003518:	d837      	bhi.n	800358a <DMA_CheckFifoParam+0xda>
 800351a:	a201      	add	r2, pc, #4	; (adr r2, 8003520 <DMA_CheckFifoParam+0x70>)
 800351c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003520:	08003531 	.word	0x08003531
 8003524:	08003537 	.word	0x08003537
 8003528:	08003531 	.word	0x08003531
 800352c:	08003549 	.word	0x08003549
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
      break;
 8003534:	e030      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d025      	beq.n	800358e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003546:	e022      	b.n	800358e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003550:	d11f      	bne.n	8003592 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003556:	e01c      	b.n	8003592 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d903      	bls.n	8003566 <DMA_CheckFifoParam+0xb6>
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b03      	cmp	r3, #3
 8003562:	d003      	beq.n	800356c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003564:	e018      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
      break;
 800356a:	e015      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00e      	beq.n	8003596 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	73fb      	strb	r3, [r7, #15]
      break;
 800357c:	e00b      	b.n	8003596 <DMA_CheckFifoParam+0xe6>
      break;
 800357e:	bf00      	nop
 8003580:	e00a      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      break;
 8003582:	bf00      	nop
 8003584:	e008      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      break;
 8003586:	bf00      	nop
 8003588:	e006      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      break;
 800358a:	bf00      	nop
 800358c:	e004      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      break;
 800358e:	bf00      	nop
 8003590:	e002      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      break;   
 8003592:	bf00      	nop
 8003594:	e000      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      break;
 8003596:	bf00      	nop
    }
  } 
  
  return status; 
 8003598:	7bfb      	ldrb	r3, [r7, #15]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop

080035a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b089      	sub	sp, #36	; 0x24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
 80035c2:	e165      	b.n	8003890 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035c4:	2201      	movs	r2, #1
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4013      	ands	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	429a      	cmp	r2, r3
 80035de:	f040 8154 	bne.w	800388a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d005      	beq.n	80035fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d130      	bne.n	800365c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	2203      	movs	r2, #3
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003630:	2201      	movs	r2, #1
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	091b      	lsrs	r3, r3, #4
 8003646:	f003 0201 	and.w	r2, r3, #1
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	2b03      	cmp	r3, #3
 8003666:	d017      	beq.n	8003698 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	2203      	movs	r2, #3
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d123      	bne.n	80036ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	08da      	lsrs	r2, r3, #3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3208      	adds	r2, #8
 80036ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	220f      	movs	r2, #15
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	08da      	lsrs	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3208      	adds	r2, #8
 80036e6:	69b9      	ldr	r1, [r7, #24]
 80036e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	2203      	movs	r2, #3
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 0203 	and.w	r2, r3, #3
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80ae 	beq.w	800388a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	4b5d      	ldr	r3, [pc, #372]	; (80038a8 <HAL_GPIO_Init+0x300>)
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	4a5c      	ldr	r2, [pc, #368]	; (80038a8 <HAL_GPIO_Init+0x300>)
 8003738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800373c:	6453      	str	r3, [r2, #68]	; 0x44
 800373e:	4b5a      	ldr	r3, [pc, #360]	; (80038a8 <HAL_GPIO_Init+0x300>)
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800374a:	4a58      	ldr	r2, [pc, #352]	; (80038ac <HAL_GPIO_Init+0x304>)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	089b      	lsrs	r3, r3, #2
 8003750:	3302      	adds	r3, #2
 8003752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	220f      	movs	r2, #15
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a4f      	ldr	r2, [pc, #316]	; (80038b0 <HAL_GPIO_Init+0x308>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d025      	beq.n	80037c2 <HAL_GPIO_Init+0x21a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a4e      	ldr	r2, [pc, #312]	; (80038b4 <HAL_GPIO_Init+0x30c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d01f      	beq.n	80037be <HAL_GPIO_Init+0x216>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a4d      	ldr	r2, [pc, #308]	; (80038b8 <HAL_GPIO_Init+0x310>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d019      	beq.n	80037ba <HAL_GPIO_Init+0x212>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a4c      	ldr	r2, [pc, #304]	; (80038bc <HAL_GPIO_Init+0x314>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d013      	beq.n	80037b6 <HAL_GPIO_Init+0x20e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a4b      	ldr	r2, [pc, #300]	; (80038c0 <HAL_GPIO_Init+0x318>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00d      	beq.n	80037b2 <HAL_GPIO_Init+0x20a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a4a      	ldr	r2, [pc, #296]	; (80038c4 <HAL_GPIO_Init+0x31c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d007      	beq.n	80037ae <HAL_GPIO_Init+0x206>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a49      	ldr	r2, [pc, #292]	; (80038c8 <HAL_GPIO_Init+0x320>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d101      	bne.n	80037aa <HAL_GPIO_Init+0x202>
 80037a6:	2306      	movs	r3, #6
 80037a8:	e00c      	b.n	80037c4 <HAL_GPIO_Init+0x21c>
 80037aa:	2307      	movs	r3, #7
 80037ac:	e00a      	b.n	80037c4 <HAL_GPIO_Init+0x21c>
 80037ae:	2305      	movs	r3, #5
 80037b0:	e008      	b.n	80037c4 <HAL_GPIO_Init+0x21c>
 80037b2:	2304      	movs	r3, #4
 80037b4:	e006      	b.n	80037c4 <HAL_GPIO_Init+0x21c>
 80037b6:	2303      	movs	r3, #3
 80037b8:	e004      	b.n	80037c4 <HAL_GPIO_Init+0x21c>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e002      	b.n	80037c4 <HAL_GPIO_Init+0x21c>
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <HAL_GPIO_Init+0x21c>
 80037c2:	2300      	movs	r3, #0
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	f002 0203 	and.w	r2, r2, #3
 80037ca:	0092      	lsls	r2, r2, #2
 80037cc:	4093      	lsls	r3, r2
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037d4:	4935      	ldr	r1, [pc, #212]	; (80038ac <HAL_GPIO_Init+0x304>)
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	089b      	lsrs	r3, r3, #2
 80037da:	3302      	adds	r3, #2
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037e2:	4b3a      	ldr	r3, [pc, #232]	; (80038cc <HAL_GPIO_Init+0x324>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	43db      	mvns	r3, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4013      	ands	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003806:	4a31      	ldr	r2, [pc, #196]	; (80038cc <HAL_GPIO_Init+0x324>)
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800380c:	4b2f      	ldr	r3, [pc, #188]	; (80038cc <HAL_GPIO_Init+0x324>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	43db      	mvns	r3, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4013      	ands	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003830:	4a26      	ldr	r2, [pc, #152]	; (80038cc <HAL_GPIO_Init+0x324>)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003836:	4b25      	ldr	r3, [pc, #148]	; (80038cc <HAL_GPIO_Init+0x324>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	43db      	mvns	r3, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4013      	ands	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800385a:	4a1c      	ldr	r2, [pc, #112]	; (80038cc <HAL_GPIO_Init+0x324>)
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003860:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <HAL_GPIO_Init+0x324>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	43db      	mvns	r3, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4013      	ands	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	4313      	orrs	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003884:	4a11      	ldr	r2, [pc, #68]	; (80038cc <HAL_GPIO_Init+0x324>)
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3301      	adds	r3, #1
 800388e:	61fb      	str	r3, [r7, #28]
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	2b0f      	cmp	r3, #15
 8003894:	f67f ae96 	bls.w	80035c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003898:	bf00      	nop
 800389a:	bf00      	nop
 800389c:	3724      	adds	r7, #36	; 0x24
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40023800 	.word	0x40023800
 80038ac:	40013800 	.word	0x40013800
 80038b0:	40020000 	.word	0x40020000
 80038b4:	40020400 	.word	0x40020400
 80038b8:	40020800 	.word	0x40020800
 80038bc:	40020c00 	.word	0x40020c00
 80038c0:	40021000 	.word	0x40021000
 80038c4:	40021400 	.word	0x40021400
 80038c8:	40021800 	.word	0x40021800
 80038cc:	40013c00 	.word	0x40013c00

080038d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	887b      	ldrh	r3, [r7, #2]
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038e8:	2301      	movs	r3, #1
 80038ea:	73fb      	strb	r3, [r7, #15]
 80038ec:	e001      	b.n	80038f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038ee:	2300      	movs	r3, #0
 80038f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e12b      	b.n	8003b6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fe fa46 	bl	8001db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2224      	movs	r2, #36	; 0x24
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003952:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003962:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003964:	f002 fd58 	bl	8006418 <HAL_RCC_GetPCLK1Freq>
 8003968:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4a81      	ldr	r2, [pc, #516]	; (8003b74 <HAL_I2C_Init+0x274>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d807      	bhi.n	8003984 <HAL_I2C_Init+0x84>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4a80      	ldr	r2, [pc, #512]	; (8003b78 <HAL_I2C_Init+0x278>)
 8003978:	4293      	cmp	r3, r2
 800397a:	bf94      	ite	ls
 800397c:	2301      	movls	r3, #1
 800397e:	2300      	movhi	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	e006      	b.n	8003992 <HAL_I2C_Init+0x92>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4a7d      	ldr	r2, [pc, #500]	; (8003b7c <HAL_I2C_Init+0x27c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	bf94      	ite	ls
 800398c:	2301      	movls	r3, #1
 800398e:	2300      	movhi	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0e7      	b.n	8003b6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4a78      	ldr	r2, [pc, #480]	; (8003b80 <HAL_I2C_Init+0x280>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	0c9b      	lsrs	r3, r3, #18
 80039a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4a6a      	ldr	r2, [pc, #424]	; (8003b74 <HAL_I2C_Init+0x274>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d802      	bhi.n	80039d4 <HAL_I2C_Init+0xd4>
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	3301      	adds	r3, #1
 80039d2:	e009      	b.n	80039e8 <HAL_I2C_Init+0xe8>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	4a69      	ldr	r2, [pc, #420]	; (8003b84 <HAL_I2C_Init+0x284>)
 80039e0:	fba2 2303 	umull	r2, r3, r2, r3
 80039e4:	099b      	lsrs	r3, r3, #6
 80039e6:	3301      	adds	r3, #1
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	430b      	orrs	r3, r1
 80039ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	495c      	ldr	r1, [pc, #368]	; (8003b74 <HAL_I2C_Init+0x274>)
 8003a04:	428b      	cmp	r3, r1
 8003a06:	d819      	bhi.n	8003a3c <HAL_I2C_Init+0x13c>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1e59      	subs	r1, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a16:	1c59      	adds	r1, r3, #1
 8003a18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a1c:	400b      	ands	r3, r1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <HAL_I2C_Init+0x138>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1e59      	subs	r1, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a30:	3301      	adds	r3, #1
 8003a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a36:	e051      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003a38:	2304      	movs	r3, #4
 8003a3a:	e04f      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d111      	bne.n	8003a68 <HAL_I2C_Init+0x168>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	1e58      	subs	r0, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6859      	ldr	r1, [r3, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	440b      	add	r3, r1
 8003a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a56:	3301      	adds	r3, #1
 8003a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bf0c      	ite	eq
 8003a60:	2301      	moveq	r3, #1
 8003a62:	2300      	movne	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	e012      	b.n	8003a8e <HAL_I2C_Init+0x18e>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1e58      	subs	r0, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6859      	ldr	r1, [r3, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	0099      	lsls	r1, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bf0c      	ite	eq
 8003a88:	2301      	moveq	r3, #1
 8003a8a:	2300      	movne	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_I2C_Init+0x196>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e022      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10e      	bne.n	8003abc <HAL_I2C_Init+0x1bc>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1e58      	subs	r0, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6859      	ldr	r1, [r3, #4]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	440b      	add	r3, r1
 8003aac:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aba:	e00f      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1e58      	subs	r0, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	0099      	lsls	r1, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	6809      	ldr	r1, [r1, #0]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69da      	ldr	r2, [r3, #28]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6911      	ldr	r1, [r2, #16]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	68d2      	ldr	r2, [r2, #12]
 8003b16:	4311      	orrs	r1, r2
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	000186a0 	.word	0x000186a0
 8003b78:	001e847f 	.word	0x001e847f
 8003b7c:	003d08ff 	.word	0x003d08ff
 8003b80:	431bde83 	.word	0x431bde83
 8003b84:	10624dd3 	.word	0x10624dd3

08003b88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	4608      	mov	r0, r1
 8003b92:	4611      	mov	r1, r2
 8003b94:	461a      	mov	r2, r3
 8003b96:	4603      	mov	r3, r0
 8003b98:	817b      	strh	r3, [r7, #10]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	813b      	strh	r3, [r7, #8]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ba2:	f7ff f835 	bl	8002c10 <HAL_GetTick>
 8003ba6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b20      	cmp	r3, #32
 8003bb2:	f040 80d9 	bne.w	8003d68 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	2319      	movs	r3, #25
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	496d      	ldr	r1, [pc, #436]	; (8003d74 <HAL_I2C_Mem_Write+0x1ec>)
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f002 f90d 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e0cc      	b.n	8003d6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <HAL_I2C_Mem_Write+0x56>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e0c5      	b.n	8003d6a <HAL_I2C_Mem_Write+0x1e2>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d007      	beq.n	8003c04 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2221      	movs	r2, #33	; 0x21
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2240      	movs	r2, #64	; 0x40
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a3a      	ldr	r2, [r7, #32]
 8003c2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4a4d      	ldr	r2, [pc, #308]	; (8003d78 <HAL_I2C_Mem_Write+0x1f0>)
 8003c44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c46:	88f8      	ldrh	r0, [r7, #6]
 8003c48:	893a      	ldrh	r2, [r7, #8]
 8003c4a:	8979      	ldrh	r1, [r7, #10]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	9301      	str	r3, [sp, #4]
 8003c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	4603      	mov	r3, r0
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f001 fe9c 	bl	8005994 <I2C_RequestMemoryWrite>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d052      	beq.n	8003d08 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e081      	b.n	8003d6a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f002 f98e 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00d      	beq.n	8003c92 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d107      	bne.n	8003c8e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e06b      	b.n	8003d6a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	781a      	ldrb	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d11b      	bne.n	8003d08 <HAL_I2C_Mem_Write+0x180>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d017      	beq.n	8003d08 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	781a      	ldrb	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1aa      	bne.n	8003c66 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f002 f97a 	bl	800600e <I2C_WaitOnBTFFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00d      	beq.n	8003d3c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d107      	bne.n	8003d38 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e016      	b.n	8003d6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	e000      	b.n	8003d6a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d68:	2302      	movs	r3, #2
  }
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	00100002 	.word	0x00100002
 8003d78:	ffff0000 	.word	0xffff0000

08003d7c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08c      	sub	sp, #48	; 0x30
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	4608      	mov	r0, r1
 8003d86:	4611      	mov	r1, r2
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	817b      	strh	r3, [r7, #10]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	813b      	strh	r3, [r7, #8]
 8003d92:	4613      	mov	r3, r2
 8003d94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d96:	f7fe ff3b 	bl	8002c10 <HAL_GetTick>
 8003d9a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	f040 8208 	bne.w	80041ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	2319      	movs	r3, #25
 8003db0:	2201      	movs	r2, #1
 8003db2:	497b      	ldr	r1, [pc, #492]	; (8003fa0 <HAL_I2C_Mem_Read+0x224>)
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f002 f813 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e1fb      	b.n	80041bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_I2C_Mem_Read+0x56>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e1f4      	b.n	80041bc <HAL_I2C_Mem_Read+0x440>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d007      	beq.n	8003df8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2222      	movs	r2, #34	; 0x22
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2240      	movs	r2, #64	; 0x40
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4a5b      	ldr	r2, [pc, #364]	; (8003fa4 <HAL_I2C_Mem_Read+0x228>)
 8003e38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e3a:	88f8      	ldrh	r0, [r7, #6]
 8003e3c:	893a      	ldrh	r2, [r7, #8]
 8003e3e:	8979      	ldrh	r1, [r7, #10]
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	9301      	str	r3, [sp, #4]
 8003e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	4603      	mov	r3, r0
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f001 fe38 	bl	8005ac0 <I2C_RequestMemoryRead>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e1b0      	b.n	80041bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d113      	bne.n	8003e8a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e62:	2300      	movs	r3, #0
 8003e64:	623b      	str	r3, [r7, #32]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	623b      	str	r3, [r7, #32]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	623b      	str	r3, [r7, #32]
 8003e76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	e184      	b.n	8004194 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d11b      	bne.n	8003eca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	61fb      	str	r3, [r7, #28]
 8003eb6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	e164      	b.n	8004194 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d11b      	bne.n	8003f0a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ee0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ef0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	61bb      	str	r3, [r7, #24]
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	e144      	b.n	8004194 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f20:	e138      	b.n	8004194 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	f200 80f1 	bhi.w	800410e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d123      	bne.n	8003f7c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f002 f8db 	bl	80060f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e139      	b.n	80041bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691a      	ldr	r2, [r3, #16]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f7a:	e10b      	b.n	8004194 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d14e      	bne.n	8004022 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	4906      	ldr	r1, [pc, #24]	; (8003fa8 <HAL_I2C_Mem_Read+0x22c>)
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f001 ff26 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d008      	beq.n	8003fac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e10e      	b.n	80041bc <HAL_I2C_Mem_Read+0x440>
 8003f9e:	bf00      	nop
 8003fa0:	00100002 	.word	0x00100002
 8003fa4:	ffff0000 	.word	0xffff0000
 8003fa8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004020:	e0b8      	b.n	8004194 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004028:	2200      	movs	r2, #0
 800402a:	4966      	ldr	r1, [pc, #408]	; (80041c4 <HAL_I2C_Mem_Read+0x448>)
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f001 fed7 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0bf      	b.n	80041bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800404a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691a      	ldr	r2, [r3, #16]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004084:	2200      	movs	r2, #0
 8004086:	494f      	ldr	r1, [pc, #316]	; (80041c4 <HAL_I2C_Mem_Read+0x448>)
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f001 fea9 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e091      	b.n	80041bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800410c:	e042      	b.n	8004194 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800410e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004110:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f001 ffee 	bl	80060f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e04c      	b.n	80041bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b04      	cmp	r3, #4
 8004160:	d118      	bne.n	8004194 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417e:	3b01      	subs	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004198:	2b00      	cmp	r3, #0
 800419a:	f47f aec2 	bne.w	8003f22 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e000      	b.n	80041bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80041ba:	2302      	movs	r3, #2
  }
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3728      	adds	r7, #40	; 0x28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	00010004 	.word	0x00010004

080041c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b088      	sub	sp, #32
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	2b10      	cmp	r3, #16
 80041f6:	d003      	beq.n	8004200 <HAL_I2C_EV_IRQHandler+0x38>
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b40      	cmp	r3, #64	; 0x40
 80041fc:	f040 80c1 	bne.w	8004382 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10d      	bne.n	8004236 <HAL_I2C_EV_IRQHandler+0x6e>
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004220:	d003      	beq.n	800422a <HAL_I2C_EV_IRQHandler+0x62>
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004228:	d101      	bne.n	800422e <HAL_I2C_EV_IRQHandler+0x66>
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <HAL_I2C_EV_IRQHandler+0x68>
 800422e:	2300      	movs	r3, #0
 8004230:	2b01      	cmp	r3, #1
 8004232:	f000 8132 	beq.w	800449a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00c      	beq.n	800425a <HAL_I2C_EV_IRQHandler+0x92>
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	0a5b      	lsrs	r3, r3, #9
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d006      	beq.n	800425a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f001 ffd6 	bl	80061fe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fd83 	bl	8004d5e <I2C_Master_SB>
 8004258:	e092      	b.n	8004380 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	08db      	lsrs	r3, r3, #3
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <HAL_I2C_EV_IRQHandler+0xb2>
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	0a5b      	lsrs	r3, r3, #9
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fdf9 	bl	8004e6a <I2C_Master_ADD10>
 8004278:	e082      	b.n	8004380 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	085b      	lsrs	r3, r3, #1
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d009      	beq.n	800429a <HAL_I2C_EV_IRQHandler+0xd2>
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	0a5b      	lsrs	r3, r3, #9
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fe13 	bl	8004ebe <I2C_Master_ADDR>
 8004298:	e072      	b.n	8004380 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	089b      	lsrs	r3, r3, #2
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d03b      	beq.n	800431e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b4:	f000 80f3 	beq.w	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	09db      	lsrs	r3, r3, #7
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00f      	beq.n	80042e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	0a9b      	lsrs	r3, r3, #10
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d009      	beq.n	80042e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	089b      	lsrs	r3, r3, #2
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d103      	bne.n	80042e4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f9f3 	bl	80046c8 <I2C_MasterTransmit_TXE>
 80042e2:	e04d      	b.n	8004380 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	089b      	lsrs	r3, r3, #2
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 80d6 	beq.w	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	0a5b      	lsrs	r3, r3, #9
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80cf 	beq.w	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004300:	7bbb      	ldrb	r3, [r7, #14]
 8004302:	2b21      	cmp	r3, #33	; 0x21
 8004304:	d103      	bne.n	800430e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fa7a 	bl	8004800 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800430c:	e0c7      	b.n	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	2b40      	cmp	r3, #64	; 0x40
 8004312:	f040 80c4 	bne.w	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fae8 	bl	80048ec <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800431c:	e0bf      	b.n	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800432c:	f000 80b7 	beq.w	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	099b      	lsrs	r3, r3, #6
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00f      	beq.n	800435c <HAL_I2C_EV_IRQHandler+0x194>
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	0a9b      	lsrs	r3, r3, #10
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d009      	beq.n	800435c <HAL_I2C_EV_IRQHandler+0x194>
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	089b      	lsrs	r3, r3, #2
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d103      	bne.n	800435c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fb5d 	bl	8004a14 <I2C_MasterReceive_RXNE>
 800435a:	e011      	b.n	8004380 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	089b      	lsrs	r3, r3, #2
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 809a 	beq.w	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	0a5b      	lsrs	r3, r3, #9
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 8093 	beq.w	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 fc06 	bl	8004b8a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800437e:	e08e      	b.n	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004380:	e08d      	b.n	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	d004      	beq.n	8004394 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	61fb      	str	r3, [r7, #28]
 8004392:	e007      	b.n	80043a4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	085b      	lsrs	r3, r3, #1
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d012      	beq.n	80043d6 <HAL_I2C_EV_IRQHandler+0x20e>
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	0a5b      	lsrs	r3, r3, #9
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00c      	beq.n	80043d6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80043cc:	69b9      	ldr	r1, [r7, #24]
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 ffc4 	bl	800535c <I2C_Slave_ADDR>
 80043d4:	e066      	b.n	80044a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	091b      	lsrs	r3, r3, #4
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <HAL_I2C_EV_IRQHandler+0x22e>
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	0a5b      	lsrs	r3, r3, #9
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fffe 	bl	80053f0 <I2C_Slave_STOPF>
 80043f4:	e056      	b.n	80044a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043f6:	7bbb      	ldrb	r3, [r7, #14]
 80043f8:	2b21      	cmp	r3, #33	; 0x21
 80043fa:	d002      	beq.n	8004402 <HAL_I2C_EV_IRQHandler+0x23a>
 80043fc:	7bbb      	ldrb	r3, [r7, #14]
 80043fe:	2b29      	cmp	r3, #41	; 0x29
 8004400:	d125      	bne.n	800444e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	09db      	lsrs	r3, r3, #7
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00f      	beq.n	800442e <HAL_I2C_EV_IRQHandler+0x266>
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	0a9b      	lsrs	r3, r3, #10
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d009      	beq.n	800442e <HAL_I2C_EV_IRQHandler+0x266>
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	089b      	lsrs	r3, r3, #2
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d103      	bne.n	800442e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 feda 	bl	80051e0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800442c:	e039      	b.n	80044a2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	089b      	lsrs	r3, r3, #2
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d033      	beq.n	80044a2 <HAL_I2C_EV_IRQHandler+0x2da>
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	0a5b      	lsrs	r3, r3, #9
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d02d      	beq.n	80044a2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 ff07 	bl	800525a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800444c:	e029      	b.n	80044a2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	099b      	lsrs	r3, r3, #6
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00f      	beq.n	800447a <HAL_I2C_EV_IRQHandler+0x2b2>
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	0a9b      	lsrs	r3, r3, #10
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	089b      	lsrs	r3, r3, #2
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d103      	bne.n	800447a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 ff12 	bl	800529c <I2C_SlaveReceive_RXNE>
 8004478:	e014      	b.n	80044a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	089b      	lsrs	r3, r3, #2
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00e      	beq.n	80044a4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	0a5b      	lsrs	r3, r3, #9
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d008      	beq.n	80044a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 ff40 	bl	8005318 <I2C_SlaveReceive_BTF>
 8004498:	e004      	b.n	80044a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800449a:	bf00      	nop
 800449c:	e002      	b.n	80044a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044a2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80044a4:	3720      	adds	r7, #32
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b08a      	sub	sp, #40	; 0x28
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80044c2:	2300      	movs	r3, #0
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044cc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	0a1b      	lsrs	r3, r3, #8
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00e      	beq.n	80044f8 <HAL_I2C_ER_IRQHandler+0x4e>
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	0a1b      	lsrs	r3, r3, #8
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d008      	beq.n	80044f8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044f6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	0a5b      	lsrs	r3, r3, #9
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00e      	beq.n	8004522 <HAL_I2C_ER_IRQHandler+0x78>
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	0a1b      	lsrs	r3, r3, #8
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	f043 0302 	orr.w	r3, r3, #2
 8004516:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004520:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	0a9b      	lsrs	r3, r3, #10
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d03f      	beq.n	80045ae <HAL_I2C_ER_IRQHandler+0x104>
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	0a1b      	lsrs	r3, r3, #8
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d039      	beq.n	80045ae <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800453a:	7efb      	ldrb	r3, [r7, #27]
 800453c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004542:	b29b      	uxth	r3, r3
 8004544:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004554:	7ebb      	ldrb	r3, [r7, #26]
 8004556:	2b20      	cmp	r3, #32
 8004558:	d112      	bne.n	8004580 <HAL_I2C_ER_IRQHandler+0xd6>
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10f      	bne.n	8004580 <HAL_I2C_ER_IRQHandler+0xd6>
 8004560:	7cfb      	ldrb	r3, [r7, #19]
 8004562:	2b21      	cmp	r3, #33	; 0x21
 8004564:	d008      	beq.n	8004578 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004566:	7cfb      	ldrb	r3, [r7, #19]
 8004568:	2b29      	cmp	r3, #41	; 0x29
 800456a:	d005      	beq.n	8004578 <HAL_I2C_ER_IRQHandler+0xce>
 800456c:	7cfb      	ldrb	r3, [r7, #19]
 800456e:	2b28      	cmp	r3, #40	; 0x28
 8004570:	d106      	bne.n	8004580 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2b21      	cmp	r3, #33	; 0x21
 8004576:	d103      	bne.n	8004580 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f001 f869 	bl	8005650 <I2C_Slave_AF>
 800457e:	e016      	b.n	80045ae <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004588:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	f043 0304 	orr.w	r3, r3, #4
 8004590:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004592:	7efb      	ldrb	r3, [r7, #27]
 8004594:	2b10      	cmp	r3, #16
 8004596:	d002      	beq.n	800459e <HAL_I2C_ER_IRQHandler+0xf4>
 8004598:	7efb      	ldrb	r3, [r7, #27]
 800459a:	2b40      	cmp	r3, #64	; 0x40
 800459c:	d107      	bne.n	80045ae <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ac:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	0adb      	lsrs	r3, r3, #11
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00e      	beq.n	80045d8 <HAL_I2C_ER_IRQHandler+0x12e>
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	0a1b      	lsrs	r3, r3, #8
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d008      	beq.n	80045d8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	f043 0308 	orr.w	r3, r3, #8
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80045d6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d008      	beq.n	80045f0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f001 f8a0 	bl	8005730 <I2C_ITError>
  }
}
 80045f0:	bf00      	nop
 80045f2:	3728      	adds	r7, #40	; 0x28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	70fb      	strb	r3, [r7, #3]
 8004654:	4613      	mov	r3, r2
 8004656:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d150      	bne.n	8004790 <I2C_MasterTransmit_TXE+0xc8>
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	2b21      	cmp	r3, #33	; 0x21
 80046f2:	d14d      	bne.n	8004790 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d01d      	beq.n	8004736 <I2C_MasterTransmit_TXE+0x6e>
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d01a      	beq.n	8004736 <I2C_MasterTransmit_TXE+0x6e>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004706:	d016      	beq.n	8004736 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004716:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2211      	movs	r2, #17
 800471c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7ff ff62 	bl	80045f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004734:	e060      	b.n	80047f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004744:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004754:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b40      	cmp	r3, #64	; 0x40
 800476e:	d107      	bne.n	8004780 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff ff7d 	bl	8004678 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800477e:	e03b      	b.n	80047f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff ff35 	bl	80045f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800478e:	e033      	b.n	80047f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	2b21      	cmp	r3, #33	; 0x21
 8004794:	d005      	beq.n	80047a2 <I2C_MasterTransmit_TXE+0xda>
 8004796:	7bbb      	ldrb	r3, [r7, #14]
 8004798:	2b40      	cmp	r3, #64	; 0x40
 800479a:	d12d      	bne.n	80047f8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	2b22      	cmp	r3, #34	; 0x22
 80047a0:	d12a      	bne.n	80047f8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d108      	bne.n	80047be <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ba:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80047bc:	e01c      	b.n	80047f8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b40      	cmp	r3, #64	; 0x40
 80047c8:	d103      	bne.n	80047d2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f88e 	bl	80048ec <I2C_MemoryTransmit_TXE_BTF>
}
 80047d0:	e012      	b.n	80047f8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	781a      	ldrb	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80047f6:	e7ff      	b.n	80047f8 <I2C_MasterTransmit_TXE+0x130>
 80047f8:	bf00      	nop
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b21      	cmp	r3, #33	; 0x21
 8004818:	d164      	bne.n	80048e4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d012      	beq.n	800484a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	781a      	ldrb	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004848:	e04c      	b.n	80048e4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b08      	cmp	r3, #8
 800484e:	d01d      	beq.n	800488c <I2C_MasterTransmit_BTF+0x8c>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b20      	cmp	r3, #32
 8004854:	d01a      	beq.n	800488c <I2C_MasterTransmit_BTF+0x8c>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800485c:	d016      	beq.n	800488c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800486c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2211      	movs	r2, #17
 8004872:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff feb7 	bl	80045f8 <HAL_I2C_MasterTxCpltCallback>
}
 800488a:	e02b      	b.n	80048e4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800489a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048aa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b40      	cmp	r3, #64	; 0x40
 80048c4:	d107      	bne.n	80048d6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff fed2 	bl	8004678 <HAL_I2C_MemTxCpltCallback>
}
 80048d4:	e006      	b.n	80048e4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff fe8a 	bl	80045f8 <HAL_I2C_MasterTxCpltCallback>
}
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004900:	2b00      	cmp	r3, #0
 8004902:	d11d      	bne.n	8004940 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004908:	2b01      	cmp	r3, #1
 800490a:	d10b      	bne.n	8004924 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004910:	b2da      	uxtb	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800491c:	1c9a      	adds	r2, r3, #2
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004922:	e073      	b.n	8004a0c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004928:	b29b      	uxth	r3, r3
 800492a:	121b      	asrs	r3, r3, #8
 800492c:	b2da      	uxtb	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800493e:	e065      	b.n	8004a0c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004944:	2b01      	cmp	r3, #1
 8004946:	d10b      	bne.n	8004960 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800494c:	b2da      	uxtb	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800495e:	e055      	b.n	8004a0c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004964:	2b02      	cmp	r3, #2
 8004966:	d151      	bne.n	8004a0c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	2b22      	cmp	r3, #34	; 0x22
 800496c:	d10d      	bne.n	800498a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800497c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004988:	e040      	b.n	8004a0c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498e:	b29b      	uxth	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d015      	beq.n	80049c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	2b21      	cmp	r3, #33	; 0x21
 8004998:	d112      	bne.n	80049c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	781a      	ldrb	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80049be:	e025      	b.n	8004a0c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d120      	bne.n	8004a0c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
 80049cc:	2b21      	cmp	r3, #33	; 0x21
 80049ce:	d11d      	bne.n	8004a0c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049de:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff fe36 	bl	8004678 <HAL_I2C_MemTxCpltCallback>
}
 8004a0c:	bf00      	nop
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b22      	cmp	r3, #34	; 0x22
 8004a26:	f040 80ac 	bne.w	8004b82 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d921      	bls.n	8004a7c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	f040 808c 	bne.w	8004b82 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a78:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004a7a:	e082      	b.n	8004b82 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d075      	beq.n	8004b70 <I2C_MasterReceive_RXNE+0x15c>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d002      	beq.n	8004a90 <I2C_MasterReceive_RXNE+0x7c>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d16f      	bne.n	8004b70 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f001 fafd 	bl	8006090 <I2C_WaitOnSTOPRequestThroughIT>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d142      	bne.n	8004b22 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aaa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004aba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d10a      	bne.n	8004b0c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff fdc1 	bl	800468c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b0a:	e03a      	b.n	8004b82 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2212      	movs	r2, #18
 8004b18:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff fd76 	bl	800460c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b20:	e02f      	b.n	8004b82 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b30:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	691a      	ldr	r2, [r3, #16]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	b2d2      	uxtb	r2, r2
 8004b3e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff fd99 	bl	80046a0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b6e:	e008      	b.n	8004b82 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b7e:	605a      	str	r2, [r3, #4]
}
 8004b80:	e7ff      	b.n	8004b82 <I2C_MasterReceive_RXNE+0x16e>
 8004b82:	bf00      	nop
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d11b      	bne.n	8004bda <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	b2d2      	uxtb	r2, r2
 8004bbe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004bd8:	e0bd      	b.n	8004d56 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d129      	bne.n	8004c38 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d00a      	beq.n	8004c10 <I2C_MasterReceive_BTF+0x86>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d007      	beq.n	8004c10 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c0e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c36:	e08e      	b.n	8004d56 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d176      	bne.n	8004d30 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d002      	beq.n	8004c4e <I2C_MasterReceive_BTF+0xc4>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b10      	cmp	r3, #16
 8004c4c:	d108      	bne.n	8004c60 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	e019      	b.n	8004c94 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d002      	beq.n	8004c6c <I2C_MasterReceive_BTF+0xe2>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d108      	bne.n	8004c7e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	e00a      	b.n	8004c94 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d007      	beq.n	8004c94 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c92:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691a      	ldr	r2, [r3, #16]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	691a      	ldr	r2, [r3, #16]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004cee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b40      	cmp	r3, #64	; 0x40
 8004d02:	d10a      	bne.n	8004d1a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7ff fcba 	bl	800468c <HAL_I2C_MemRxCpltCallback>
}
 8004d18:	e01d      	b.n	8004d56 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2212      	movs	r2, #18
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7ff fc6f 	bl	800460c <HAL_I2C_MasterRxCpltCallback>
}
 8004d2e:	e012      	b.n	8004d56 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d56:	bf00      	nop
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b40      	cmp	r3, #64	; 0x40
 8004d70:	d117      	bne.n	8004da2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d8a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004d8c:	e067      	b.n	8004e5e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	f043 0301 	orr.w	r3, r3, #1
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	611a      	str	r2, [r3, #16]
}
 8004da0:	e05d      	b.n	8004e5e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004daa:	d133      	bne.n	8004e14 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b21      	cmp	r3, #33	; 0x21
 8004db6:	d109      	bne.n	8004dcc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004dc8:	611a      	str	r2, [r3, #16]
 8004dca:	e008      	b.n	8004dde <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	f043 0301 	orr.w	r3, r3, #1
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d004      	beq.n	8004df0 <I2C_Master_SB+0x92>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d108      	bne.n	8004e02 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d032      	beq.n	8004e5e <I2C_Master_SB+0x100>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d02d      	beq.n	8004e5e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e10:	605a      	str	r2, [r3, #4]
}
 8004e12:	e024      	b.n	8004e5e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10e      	bne.n	8004e3a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	11db      	asrs	r3, r3, #7
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	f003 0306 	and.w	r3, r3, #6
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	f063 030f 	orn	r3, r3, #15
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	611a      	str	r2, [r3, #16]
}
 8004e38:	e011      	b.n	8004e5e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d10d      	bne.n	8004e5e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	11db      	asrs	r3, r3, #7
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	f003 0306 	and.w	r3, r3, #6
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	f063 030e 	orn	r3, r3, #14
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	611a      	str	r2, [r3, #16]
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d004      	beq.n	8004e90 <I2C_Master_ADD10+0x26>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d108      	bne.n	8004ea2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00c      	beq.n	8004eb2 <I2C_Master_ADD10+0x48>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d007      	beq.n	8004eb2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eb0:	605a      	str	r2, [r3, #4]
  }
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b091      	sub	sp, #68	; 0x44
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ecc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b22      	cmp	r3, #34	; 0x22
 8004ee6:	f040 8169 	bne.w	80051bc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10f      	bne.n	8004f12 <I2C_Master_ADDR+0x54>
 8004ef2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004ef6:	2b40      	cmp	r3, #64	; 0x40
 8004ef8:	d10b      	bne.n	8004f12 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004efa:	2300      	movs	r3, #0
 8004efc:	633b      	str	r3, [r7, #48]	; 0x30
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	633b      	str	r3, [r7, #48]	; 0x30
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	e160      	b.n	80051d4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d11d      	bne.n	8004f56 <I2C_Master_ADDR+0x98>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f22:	d118      	bne.n	8004f56 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f24:	2300      	movs	r3, #0
 8004f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f48:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	651a      	str	r2, [r3, #80]	; 0x50
 8004f54:	e13e      	b.n	80051d4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d113      	bne.n	8004f88 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f60:	2300      	movs	r3, #0
 8004f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	e115      	b.n	80051b4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	f040 808a 	bne.w	80050a8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f9a:	d137      	bne.n	800500c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004faa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fba:	d113      	bne.n	8004fe4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fcc:	2300      	movs	r3, #0
 8004fce:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	e0e7      	b.n	80051b4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	623b      	str	r3, [r7, #32]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	623b      	str	r3, [r7, #32]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	623b      	str	r3, [r7, #32]
 8004ff8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	e0d3      	b.n	80051b4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800500c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500e:	2b08      	cmp	r3, #8
 8005010:	d02e      	beq.n	8005070 <I2C_Master_ADDR+0x1b2>
 8005012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005014:	2b20      	cmp	r3, #32
 8005016:	d02b      	beq.n	8005070 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800501a:	2b12      	cmp	r3, #18
 800501c:	d102      	bne.n	8005024 <I2C_Master_ADDR+0x166>
 800501e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005020:	2b01      	cmp	r3, #1
 8005022:	d125      	bne.n	8005070 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005026:	2b04      	cmp	r3, #4
 8005028:	d00e      	beq.n	8005048 <I2C_Master_ADDR+0x18a>
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	2b02      	cmp	r3, #2
 800502e:	d00b      	beq.n	8005048 <I2C_Master_ADDR+0x18a>
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	2b10      	cmp	r3, #16
 8005034:	d008      	beq.n	8005048 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	e007      	b.n	8005058 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005056:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005058:	2300      	movs	r3, #0
 800505a:	61fb      	str	r3, [r7, #28]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	61fb      	str	r3, [r7, #28]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	61fb      	str	r3, [r7, #28]
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	e0a1      	b.n	80051b4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800507e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005080:	2300      	movs	r3, #0
 8005082:	61bb      	str	r3, [r7, #24]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	61bb      	str	r3, [r7, #24]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	61bb      	str	r3, [r7, #24]
 8005094:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	e085      	b.n	80051b4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d14d      	bne.n	800514e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d016      	beq.n	80050e6 <I2C_Master_ADDR+0x228>
 80050b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d013      	beq.n	80050e6 <I2C_Master_ADDR+0x228>
 80050be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c0:	2b10      	cmp	r3, #16
 80050c2:	d010      	beq.n	80050e6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	e007      	b.n	80050f6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050f4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005104:	d117      	bne.n	8005136 <I2C_Master_ADDR+0x278>
 8005106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005108:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800510c:	d00b      	beq.n	8005126 <I2C_Master_ADDR+0x268>
 800510e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005110:	2b01      	cmp	r3, #1
 8005112:	d008      	beq.n	8005126 <I2C_Master_ADDR+0x268>
 8005114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005116:	2b08      	cmp	r3, #8
 8005118:	d005      	beq.n	8005126 <I2C_Master_ADDR+0x268>
 800511a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511c:	2b10      	cmp	r3, #16
 800511e:	d002      	beq.n	8005126 <I2C_Master_ADDR+0x268>
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	2b20      	cmp	r3, #32
 8005124:	d107      	bne.n	8005136 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005134:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005136:	2300      	movs	r3, #0
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	617b      	str	r3, [r7, #20]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	e032      	b.n	80051b4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800515c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800516c:	d117      	bne.n	800519e <I2C_Master_ADDR+0x2e0>
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005174:	d00b      	beq.n	800518e <I2C_Master_ADDR+0x2d0>
 8005176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005178:	2b01      	cmp	r3, #1
 800517a:	d008      	beq.n	800518e <I2C_Master_ADDR+0x2d0>
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	2b08      	cmp	r3, #8
 8005180:	d005      	beq.n	800518e <I2C_Master_ADDR+0x2d0>
 8005182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005184:	2b10      	cmp	r3, #16
 8005186:	d002      	beq.n	800518e <I2C_Master_ADDR+0x2d0>
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	2b20      	cmp	r3, #32
 800518c:	d107      	bne.n	800519e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800519c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800519e:	2300      	movs	r3, #0
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80051ba:	e00b      	b.n	80051d4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051bc:	2300      	movs	r3, #0
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	68fb      	ldr	r3, [r7, #12]
}
 80051d2:	e7ff      	b.n	80051d4 <I2C_Master_ADDR+0x316>
 80051d4:	bf00      	nop
 80051d6:	3744      	adds	r7, #68	; 0x44
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d02b      	beq.n	8005252 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	781a      	ldrb	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005214:	b29b      	uxth	r3, r3
 8005216:	3b01      	subs	r3, #1
 8005218:	b29a      	uxth	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005222:	b29b      	uxth	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d114      	bne.n	8005252 <I2C_SlaveTransmit_TXE+0x72>
 8005228:	7bfb      	ldrb	r3, [r7, #15]
 800522a:	2b29      	cmp	r3, #41	; 0x29
 800522c:	d111      	bne.n	8005252 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800523c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2221      	movs	r2, #33	; 0x21
 8005242:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2228      	movs	r2, #40	; 0x28
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff f9e7 	bl	8004620 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005252:	bf00      	nop
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800525a:	b480      	push	{r7}
 800525c:	b083      	sub	sp, #12
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005266:	b29b      	uxth	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d011      	beq.n	8005290 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005270:	781a      	ldrb	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005286:	b29b      	uxth	r3, r3
 8005288:	3b01      	subs	r3, #1
 800528a:	b29a      	uxth	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d02c      	beq.n	8005310 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d114      	bne.n	8005310 <I2C_SlaveReceive_RXNE+0x74>
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
 80052e8:	2b2a      	cmp	r3, #42	; 0x2a
 80052ea:	d111      	bne.n	8005310 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2222      	movs	r2, #34	; 0x22
 8005300:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2228      	movs	r2, #40	; 0x28
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff f992 	bl	8004634 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005324:	b29b      	uxth	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d012      	beq.n	8005350 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	691a      	ldr	r2, [r3, #16]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005346:	b29b      	uxth	r3, r3
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005366:	2300      	movs	r3, #0
 8005368:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005370:	b2db      	uxtb	r3, r3
 8005372:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005376:	2b28      	cmp	r3, #40	; 0x28
 8005378:	d127      	bne.n	80053ca <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005388:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	089b      	lsrs	r3, r3, #2
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005396:	2301      	movs	r3, #1
 8005398:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	09db      	lsrs	r3, r3, #7
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d103      	bne.n	80053ae <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	81bb      	strh	r3, [r7, #12]
 80053ac:	e002      	b.n	80053b4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80053bc:	89ba      	ldrh	r2, [r7, #12]
 80053be:	7bfb      	ldrb	r3, [r7, #15]
 80053c0:	4619      	mov	r1, r3
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff f940 	bl	8004648 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80053c8:	e00e      	b.n	80053e8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ca:	2300      	movs	r3, #0
 80053cc:	60bb      	str	r3, [r7, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	60bb      	str	r3, [r7, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	60bb      	str	r3, [r7, #8]
 80053de:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80053e8:	bf00      	nop
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800540e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005410:	2300      	movs	r3, #0
 8005412:	60bb      	str	r3, [r7, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	60bb      	str	r3, [r7, #8]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0201 	orr.w	r2, r2, #1
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800543c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800544c:	d172      	bne.n	8005534 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	2b22      	cmp	r3, #34	; 0x22
 8005452:	d002      	beq.n	800545a <I2C_Slave_STOPF+0x6a>
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	2b2a      	cmp	r3, #42	; 0x2a
 8005458:	d135      	bne.n	80054c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	b29a      	uxth	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d005      	beq.n	800547e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	f043 0204 	orr.w	r2, r3, #4
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800548c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	4618      	mov	r0, r3
 8005494:	f7fd ffc8 	bl	8003428 <HAL_DMA_GetState>
 8005498:	4603      	mov	r3, r0
 800549a:	2b01      	cmp	r3, #1
 800549c:	d049      	beq.n	8005532 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	4a69      	ldr	r2, [pc, #420]	; (8005648 <I2C_Slave_STOPF+0x258>)
 80054a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fd fe10 	bl	80030d0 <HAL_DMA_Abort_IT>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d03d      	beq.n	8005532 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054c0:	4610      	mov	r0, r2
 80054c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80054c4:	e035      	b.n	8005532 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d005      	beq.n	80054ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	f043 0204 	orr.w	r2, r3, #4
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fd ff92 	bl	8003428 <HAL_DMA_GetState>
 8005504:	4603      	mov	r3, r0
 8005506:	2b01      	cmp	r3, #1
 8005508:	d014      	beq.n	8005534 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550e:	4a4e      	ldr	r2, [pc, #312]	; (8005648 <I2C_Slave_STOPF+0x258>)
 8005510:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005516:	4618      	mov	r0, r3
 8005518:	f7fd fdda 	bl	80030d0 <HAL_DMA_Abort_IT>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d008      	beq.n	8005534 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800552c:	4610      	mov	r0, r2
 800552e:	4798      	blx	r3
 8005530:	e000      	b.n	8005534 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005532:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005538:	b29b      	uxth	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d03e      	beq.n	80055bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b04      	cmp	r3, #4
 800554a:	d112      	bne.n	8005572 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691a      	ldr	r2, [r3, #16]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005568:	b29b      	uxth	r3, r3
 800556a:	3b01      	subs	r3, #1
 800556c:	b29a      	uxth	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557c:	2b40      	cmp	r3, #64	; 0x40
 800557e:	d112      	bne.n	80055a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691a      	ldr	r2, [r3, #16]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	1c5a      	adds	r2, r3, #1
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800559c:	b29b      	uxth	r3, r3
 800559e:	3b01      	subs	r3, #1
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	f043 0204 	orr.w	r2, r3, #4
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f8b3 	bl	8005730 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80055ca:	e039      	b.n	8005640 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	2b2a      	cmp	r3, #42	; 0x2a
 80055d0:	d109      	bne.n	80055e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2228      	movs	r2, #40	; 0x28
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7ff f827 	bl	8004634 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b28      	cmp	r3, #40	; 0x28
 80055f0:	d111      	bne.n	8005616 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a15      	ldr	r2, [pc, #84]	; (800564c <I2C_Slave_STOPF+0x25c>)
 80055f6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7ff f828 	bl	8004664 <HAL_I2C_ListenCpltCallback>
}
 8005614:	e014      	b.n	8005640 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561a:	2b22      	cmp	r3, #34	; 0x22
 800561c:	d002      	beq.n	8005624 <I2C_Slave_STOPF+0x234>
 800561e:	7bfb      	ldrb	r3, [r7, #15]
 8005620:	2b22      	cmp	r3, #34	; 0x22
 8005622:	d10d      	bne.n	8005640 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fe fffa 	bl	8004634 <HAL_I2C_SlaveRxCpltCallback>
}
 8005640:	bf00      	nop
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	08005c91 	.word	0x08005c91
 800564c:	ffff0000 	.word	0xffff0000

08005650 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005664:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2b08      	cmp	r3, #8
 800566a:	d002      	beq.n	8005672 <I2C_Slave_AF+0x22>
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b20      	cmp	r3, #32
 8005670:	d129      	bne.n	80056c6 <I2C_Slave_AF+0x76>
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	2b28      	cmp	r3, #40	; 0x28
 8005676:	d126      	bne.n	80056c6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a2c      	ldr	r2, [pc, #176]	; (800572c <I2C_Slave_AF+0xdc>)
 800567c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800568c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005696:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fe ffd0 	bl	8004664 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80056c4:	e02e      	b.n	8005724 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	2b21      	cmp	r3, #33	; 0x21
 80056ca:	d126      	bne.n	800571a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a17      	ldr	r2, [pc, #92]	; (800572c <I2C_Slave_AF+0xdc>)
 80056d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2221      	movs	r2, #33	; 0x21
 80056d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2220      	movs	r2, #32
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056f6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005700:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005710:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7fe ff84 	bl	8004620 <HAL_I2C_SlaveTxCpltCallback>
}
 8005718:	e004      	b.n	8005724 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005722:	615a      	str	r2, [r3, #20]
}
 8005724:	bf00      	nop
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	ffff0000 	.word	0xffff0000

08005730 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005746:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005748:	7bbb      	ldrb	r3, [r7, #14]
 800574a:	2b10      	cmp	r3, #16
 800574c:	d002      	beq.n	8005754 <I2C_ITError+0x24>
 800574e:	7bbb      	ldrb	r3, [r7, #14]
 8005750:	2b40      	cmp	r3, #64	; 0x40
 8005752:	d10a      	bne.n	800576a <I2C_ITError+0x3a>
 8005754:	7bfb      	ldrb	r3, [r7, #15]
 8005756:	2b22      	cmp	r3, #34	; 0x22
 8005758:	d107      	bne.n	800576a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005768:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800576a:	7bfb      	ldrb	r3, [r7, #15]
 800576c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005770:	2b28      	cmp	r3, #40	; 0x28
 8005772:	d107      	bne.n	8005784 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2228      	movs	r2, #40	; 0x28
 800577e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005782:	e015      	b.n	80057b0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800578e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005792:	d00a      	beq.n	80057aa <I2C_ITError+0x7a>
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	2b60      	cmp	r3, #96	; 0x60
 8005798:	d007      	beq.n	80057aa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057be:	d162      	bne.n	8005886 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d020      	beq.n	8005820 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e2:	4a6a      	ldr	r2, [pc, #424]	; (800598c <I2C_ITError+0x25c>)
 80057e4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fd fc70 	bl	80030d0 <HAL_DMA_Abort_IT>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 8089 	beq.w	800590a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0201 	bic.w	r2, r2, #1
 8005806:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800581a:	4610      	mov	r0, r2
 800581c:	4798      	blx	r3
 800581e:	e074      	b.n	800590a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005824:	4a59      	ldr	r2, [pc, #356]	; (800598c <I2C_ITError+0x25c>)
 8005826:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582c:	4618      	mov	r0, r3
 800582e:	f7fd fc4f 	bl	80030d0 <HAL_DMA_Abort_IT>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d068      	beq.n	800590a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005842:	2b40      	cmp	r3, #64	; 0x40
 8005844:	d10b      	bne.n	800585e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	b2d2      	uxtb	r2, r2
 8005852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0201 	bic.w	r2, r2, #1
 800586c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005880:	4610      	mov	r0, r2
 8005882:	4798      	blx	r3
 8005884:	e041      	b.n	800590a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b60      	cmp	r3, #96	; 0x60
 8005890:	d125      	bne.n	80058de <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2220      	movs	r2, #32
 8005896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058aa:	2b40      	cmp	r3, #64	; 0x40
 80058ac:	d10b      	bne.n	80058c6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	b2d2      	uxtb	r2, r2
 80058ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0201 	bic.w	r2, r2, #1
 80058d4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7fe feec 	bl	80046b4 <HAL_I2C_AbortCpltCallback>
 80058dc:	e015      	b.n	800590a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e8:	2b40      	cmp	r3, #64	; 0x40
 80058ea:	d10b      	bne.n	8005904 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691a      	ldr	r2, [r3, #16]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7fe fecb 	bl	80046a0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10e      	bne.n	8005938 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005920:	2b00      	cmp	r3, #0
 8005922:	d109      	bne.n	8005938 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005934:	2b00      	cmp	r3, #0
 8005936:	d007      	beq.n	8005948 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005946:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b04      	cmp	r3, #4
 800595a:	d113      	bne.n	8005984 <I2C_ITError+0x254>
 800595c:	7bfb      	ldrb	r3, [r7, #15]
 800595e:	2b28      	cmp	r3, #40	; 0x28
 8005960:	d110      	bne.n	8005984 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a0a      	ldr	r2, [pc, #40]	; (8005990 <I2C_ITError+0x260>)
 8005966:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2220      	movs	r2, #32
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fe fe70 	bl	8004664 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005984:	bf00      	nop
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	08005c91 	.word	0x08005c91
 8005990:	ffff0000 	.word	0xffff0000

08005994 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af02      	add	r7, sp, #8
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	4608      	mov	r0, r1
 800599e:	4611      	mov	r1, r2
 80059a0:	461a      	mov	r2, r3
 80059a2:	4603      	mov	r3, r0
 80059a4:	817b      	strh	r3, [r7, #10]
 80059a6:	460b      	mov	r3, r1
 80059a8:	813b      	strh	r3, [r7, #8]
 80059aa:	4613      	mov	r3, r2
 80059ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 fa08 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00d      	beq.n	80059f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059e4:	d103      	bne.n	80059ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e05f      	b.n	8005ab2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059f2:	897b      	ldrh	r3, [r7, #10]
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	461a      	mov	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	6a3a      	ldr	r2, [r7, #32]
 8005a06:	492d      	ldr	r1, [pc, #180]	; (8005abc <I2C_RequestMemoryWrite+0x128>)
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 fa40 	bl	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e04c      	b.n	8005ab2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a30:	6a39      	ldr	r1, [r7, #32]
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 faaa 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00d      	beq.n	8005a5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	d107      	bne.n	8005a56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e02b      	b.n	8005ab2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a5a:	88fb      	ldrh	r3, [r7, #6]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d105      	bne.n	8005a6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a60:	893b      	ldrh	r3, [r7, #8]
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	611a      	str	r2, [r3, #16]
 8005a6a:	e021      	b.n	8005ab0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a6c:	893b      	ldrh	r3, [r7, #8]
 8005a6e:	0a1b      	lsrs	r3, r3, #8
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a7c:	6a39      	ldr	r1, [r7, #32]
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f000 fa84 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00d      	beq.n	8005aa6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d107      	bne.n	8005aa2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e005      	b.n	8005ab2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005aa6:	893b      	ldrh	r3, [r7, #8]
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	00010002 	.word	0x00010002

08005ac0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af02      	add	r7, sp, #8
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	4608      	mov	r0, r1
 8005aca:	4611      	mov	r1, r2
 8005acc:	461a      	mov	r2, r3
 8005ace:	4603      	mov	r3, r0
 8005ad0:	817b      	strh	r3, [r7, #10]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	813b      	strh	r3, [r7, #8]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ae8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005af8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 f96a 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00d      	beq.n	8005b2e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b20:	d103      	bne.n	8005b2a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e0aa      	b.n	8005c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b2e:	897b      	ldrh	r3, [r7, #10]
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	461a      	mov	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	6a3a      	ldr	r2, [r7, #32]
 8005b42:	4952      	ldr	r1, [pc, #328]	; (8005c8c <I2C_RequestMemoryRead+0x1cc>)
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 f9a2 	bl	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e097      	b.n	8005c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b54:	2300      	movs	r3, #0
 8005b56:	617b      	str	r3, [r7, #20]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6c:	6a39      	ldr	r1, [r7, #32]
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 fa0c 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00d      	beq.n	8005b96 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d107      	bne.n	8005b92 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e076      	b.n	8005c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b96:	88fb      	ldrh	r3, [r7, #6]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d105      	bne.n	8005ba8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b9c:	893b      	ldrh	r3, [r7, #8]
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	611a      	str	r2, [r3, #16]
 8005ba6:	e021      	b.n	8005bec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ba8:	893b      	ldrh	r3, [r7, #8]
 8005baa:	0a1b      	lsrs	r3, r3, #8
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb8:	6a39      	ldr	r1, [r7, #32]
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 f9e6 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00d      	beq.n	8005be2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d107      	bne.n	8005bde <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bdc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e050      	b.n	8005c84 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005be2:	893b      	ldrh	r3, [r7, #8]
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bee:	6a39      	ldr	r1, [r7, #32]
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 f9cb 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00d      	beq.n	8005c18 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d107      	bne.n	8005c14 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e035      	b.n	8005c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 f8d3 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00d      	beq.n	8005c5c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c4e:	d103      	bne.n	8005c58 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e013      	b.n	8005c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c5c:	897b      	ldrh	r3, [r7, #10]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	f043 0301 	orr.w	r3, r3, #1
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	6a3a      	ldr	r2, [r7, #32]
 8005c70:	4906      	ldr	r1, [pc, #24]	; (8005c8c <I2C_RequestMemoryRead+0x1cc>)
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 f90b 	bl	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e000      	b.n	8005c84 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	00010002 	.word	0x00010002

08005c90 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005caa:	4b4b      	ldr	r3, [pc, #300]	; (8005dd8 <I2C_DMAAbort+0x148>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	08db      	lsrs	r3, r3, #3
 8005cb0:	4a4a      	ldr	r2, [pc, #296]	; (8005ddc <I2C_DMAAbort+0x14c>)
 8005cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb6:	0a1a      	lsrs	r2, r3, #8
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	00da      	lsls	r2, r3, #3
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d106      	bne.n	8005cd8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	f043 0220 	orr.w	r2, r3, #32
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005cd6:	e00a      	b.n	8005cee <I2C_DMAAbort+0x5e>
    }
    count--;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cec:	d0ea      	beq.n	8005cc4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d1c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2200      	movs	r2, #0
 8005d22:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d30:	2200      	movs	r2, #0
 8005d32:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	2200      	movs	r2, #0
 8005d42:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 0201 	bic.w	r2, r2, #1
 8005d52:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b60      	cmp	r3, #96	; 0x60
 8005d5e:	d10e      	bne.n	8005d7e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2220      	movs	r2, #32
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	2200      	movs	r2, #0
 8005d74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d76:	6978      	ldr	r0, [r7, #20]
 8005d78:	f7fe fc9c 	bl	80046b4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d7c:	e027      	b.n	8005dce <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d7e:	7cfb      	ldrb	r3, [r7, #19]
 8005d80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d84:	2b28      	cmp	r3, #40	; 0x28
 8005d86:	d117      	bne.n	8005db8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005da6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	2200      	movs	r2, #0
 8005dac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2228      	movs	r2, #40	; 0x28
 8005db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005db6:	e007      	b.n	8005dc8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005dc8:	6978      	ldr	r0, [r7, #20]
 8005dca:	f7fe fc69 	bl	80046a0 <HAL_I2C_ErrorCallback>
}
 8005dce:	bf00      	nop
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20000008 	.word	0x20000008
 8005ddc:	14f8b589 	.word	0x14f8b589

08005de0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	4613      	mov	r3, r2
 8005dee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005df0:	e025      	b.n	8005e3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df8:	d021      	beq.n	8005e3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfa:	f7fc ff09 	bl	8002c10 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d302      	bcc.n	8005e10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d116      	bne.n	8005e3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	f043 0220 	orr.w	r2, r3, #32
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e023      	b.n	8005e86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	0c1b      	lsrs	r3, r3, #16
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d10d      	bne.n	8005e64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	43da      	mvns	r2, r3
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4013      	ands	r3, r2
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	bf0c      	ite	eq
 8005e5a:	2301      	moveq	r3, #1
 8005e5c:	2300      	movne	r3, #0
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	e00c      	b.n	8005e7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	43da      	mvns	r2, r3
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	bf0c      	ite	eq
 8005e76:	2301      	moveq	r3, #1
 8005e78:	2300      	movne	r3, #0
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	79fb      	ldrb	r3, [r7, #7]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d0b6      	beq.n	8005df2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
 8005e9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e9c:	e051      	b.n	8005f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eac:	d123      	bne.n	8005ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ebc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ec6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	f043 0204 	orr.w	r2, r3, #4
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e046      	b.n	8005f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efc:	d021      	beq.n	8005f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005efe:	f7fc fe87 	bl	8002c10 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d302      	bcc.n	8005f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d116      	bne.n	8005f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	f043 0220 	orr.w	r2, r3, #32
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e020      	b.n	8005f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	0c1b      	lsrs	r3, r3, #16
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d10c      	bne.n	8005f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	43da      	mvns	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	4013      	ands	r3, r2
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	bf14      	ite	ne
 8005f5e:	2301      	movne	r3, #1
 8005f60:	2300      	moveq	r3, #0
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	e00b      	b.n	8005f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	43da      	mvns	r2, r3
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	4013      	ands	r3, r2
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	bf14      	ite	ne
 8005f78:	2301      	movne	r3, #1
 8005f7a:	2300      	moveq	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d18d      	bne.n	8005e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f98:	e02d      	b.n	8005ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 f900 	bl	80061a0 <I2C_IsAcknowledgeFailed>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e02d      	b.n	8006006 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb0:	d021      	beq.n	8005ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fb2:	f7fc fe2d 	bl	8002c10 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d302      	bcc.n	8005fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d116      	bne.n	8005ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	f043 0220 	orr.w	r2, r3, #32
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e007      	b.n	8006006 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006000:	2b80      	cmp	r3, #128	; 0x80
 8006002:	d1ca      	bne.n	8005f9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	60b9      	str	r1, [r7, #8]
 8006018:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800601a:	e02d      	b.n	8006078 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 f8bf 	bl	80061a0 <I2C_IsAcknowledgeFailed>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e02d      	b.n	8006088 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006032:	d021      	beq.n	8006078 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006034:	f7fc fdec 	bl	8002c10 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	429a      	cmp	r2, r3
 8006042:	d302      	bcc.n	800604a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d116      	bne.n	8006078 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	f043 0220 	orr.w	r2, r3, #32
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e007      	b.n	8006088 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b04      	cmp	r3, #4
 8006084:	d1ca      	bne.n	800601c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006098:	2300      	movs	r3, #0
 800609a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800609c:	4b13      	ldr	r3, [pc, #76]	; (80060ec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	08db      	lsrs	r3, r3, #3
 80060a2:	4a13      	ldr	r2, [pc, #76]	; (80060f0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80060a4:	fba2 2303 	umull	r2, r3, r2, r3
 80060a8:	0a1a      	lsrs	r2, r3, #8
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d107      	bne.n	80060ce <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	f043 0220 	orr.w	r2, r3, #32
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e008      	b.n	80060e0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060dc:	d0e9      	beq.n	80060b2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	20000008 	.word	0x20000008
 80060f0:	14f8b589 	.word	0x14f8b589

080060f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006100:	e042      	b.n	8006188 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	f003 0310 	and.w	r3, r3, #16
 800610c:	2b10      	cmp	r3, #16
 800610e:	d119      	bne.n	8006144 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f06f 0210 	mvn.w	r2, #16
 8006118:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2220      	movs	r2, #32
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e029      	b.n	8006198 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006144:	f7fc fd64 	bl	8002c10 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	429a      	cmp	r2, r3
 8006152:	d302      	bcc.n	800615a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d116      	bne.n	8006188 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2220      	movs	r2, #32
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	f043 0220 	orr.w	r2, r3, #32
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e007      	b.n	8006198 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006192:	2b40      	cmp	r3, #64	; 0x40
 8006194:	d1b5      	bne.n	8006102 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b6:	d11b      	bne.n	80061f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	f043 0204 	orr.w	r2, r3, #4
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e000      	b.n	80061f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800620e:	d103      	bne.n	8006218 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006216:	e007      	b.n	8006228 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006220:	d102      	bne.n	8006228 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2208      	movs	r2, #8
 8006226:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e0cc      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006248:	4b68      	ldr	r3, [pc, #416]	; (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 030f 	and.w	r3, r3, #15
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	429a      	cmp	r2, r3
 8006254:	d90c      	bls.n	8006270 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006256:	4b65      	ldr	r3, [pc, #404]	; (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800625e:	4b63      	ldr	r3, [pc, #396]	; (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 030f 	and.w	r3, r3, #15
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d001      	beq.n	8006270 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e0b8      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d020      	beq.n	80062be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b00      	cmp	r3, #0
 8006286:	d005      	beq.n	8006294 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006288:	4b59      	ldr	r3, [pc, #356]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	4a58      	ldr	r2, [pc, #352]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 800628e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006292:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b00      	cmp	r3, #0
 800629e:	d005      	beq.n	80062ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062a0:	4b53      	ldr	r3, [pc, #332]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	4a52      	ldr	r2, [pc, #328]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062ac:	4b50      	ldr	r3, [pc, #320]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	494d      	ldr	r1, [pc, #308]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d044      	beq.n	8006354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d107      	bne.n	80062e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062d2:	4b47      	ldr	r3, [pc, #284]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d119      	bne.n	8006312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e07f      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d003      	beq.n	80062f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d107      	bne.n	8006302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062f2:	4b3f      	ldr	r3, [pc, #252]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d109      	bne.n	8006312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e06f      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006302:	4b3b      	ldr	r3, [pc, #236]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e067      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006312:	4b37      	ldr	r3, [pc, #220]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f023 0203 	bic.w	r2, r3, #3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	4934      	ldr	r1, [pc, #208]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006320:	4313      	orrs	r3, r2
 8006322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006324:	f7fc fc74 	bl	8002c10 <HAL_GetTick>
 8006328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800632a:	e00a      	b.n	8006342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800632c:	f7fc fc70 	bl	8002c10 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	f241 3288 	movw	r2, #5000	; 0x1388
 800633a:	4293      	cmp	r3, r2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e04f      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006342:	4b2b      	ldr	r3, [pc, #172]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f003 020c 	and.w	r2, r3, #12
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	429a      	cmp	r2, r3
 8006352:	d1eb      	bne.n	800632c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006354:	4b25      	ldr	r3, [pc, #148]	; (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 030f 	and.w	r3, r3, #15
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	429a      	cmp	r2, r3
 8006360:	d20c      	bcs.n	800637c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006362:	4b22      	ldr	r3, [pc, #136]	; (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800636a:	4b20      	ldr	r3, [pc, #128]	; (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 030f 	and.w	r3, r3, #15
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	429a      	cmp	r2, r3
 8006376:	d001      	beq.n	800637c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e032      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b00      	cmp	r3, #0
 8006386:	d008      	beq.n	800639a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006388:	4b19      	ldr	r3, [pc, #100]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	4916      	ldr	r1, [pc, #88]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006396:	4313      	orrs	r3, r2
 8006398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d009      	beq.n	80063ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063a6:	4b12      	ldr	r3, [pc, #72]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	490e      	ldr	r1, [pc, #56]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063ba:	f000 f855 	bl	8006468 <HAL_RCC_GetSysClockFreq>
 80063be:	4602      	mov	r2, r0
 80063c0:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	091b      	lsrs	r3, r3, #4
 80063c6:	f003 030f 	and.w	r3, r3, #15
 80063ca:	490a      	ldr	r1, [pc, #40]	; (80063f4 <HAL_RCC_ClockConfig+0x1c0>)
 80063cc:	5ccb      	ldrb	r3, [r1, r3]
 80063ce:	fa22 f303 	lsr.w	r3, r2, r3
 80063d2:	4a09      	ldr	r2, [pc, #36]	; (80063f8 <HAL_RCC_ClockConfig+0x1c4>)
 80063d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063d6:	4b09      	ldr	r3, [pc, #36]	; (80063fc <HAL_RCC_ClockConfig+0x1c8>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fc fbd4 	bl	8002b88 <HAL_InitTick>

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	40023c00 	.word	0x40023c00
 80063f0:	40023800 	.word	0x40023800
 80063f4:	08008c9c 	.word	0x08008c9c
 80063f8:	20000008 	.word	0x20000008
 80063fc:	2000000c 	.word	0x2000000c

08006400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006404:	4b03      	ldr	r3, [pc, #12]	; (8006414 <HAL_RCC_GetHCLKFreq+0x14>)
 8006406:	681b      	ldr	r3, [r3, #0]
}
 8006408:	4618      	mov	r0, r3
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	20000008 	.word	0x20000008

08006418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800641c:	f7ff fff0 	bl	8006400 <HAL_RCC_GetHCLKFreq>
 8006420:	4602      	mov	r2, r0
 8006422:	4b05      	ldr	r3, [pc, #20]	; (8006438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	0a9b      	lsrs	r3, r3, #10
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	4903      	ldr	r1, [pc, #12]	; (800643c <HAL_RCC_GetPCLK1Freq+0x24>)
 800642e:	5ccb      	ldrb	r3, [r1, r3]
 8006430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006434:	4618      	mov	r0, r3
 8006436:	bd80      	pop	{r7, pc}
 8006438:	40023800 	.word	0x40023800
 800643c:	08008cac 	.word	0x08008cac

08006440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006444:	f7ff ffdc 	bl	8006400 <HAL_RCC_GetHCLKFreq>
 8006448:	4602      	mov	r2, r0
 800644a:	4b05      	ldr	r3, [pc, #20]	; (8006460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	0b5b      	lsrs	r3, r3, #13
 8006450:	f003 0307 	and.w	r3, r3, #7
 8006454:	4903      	ldr	r1, [pc, #12]	; (8006464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006456:	5ccb      	ldrb	r3, [r1, r3]
 8006458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800645c:	4618      	mov	r0, r3
 800645e:	bd80      	pop	{r7, pc}
 8006460:	40023800 	.word	0x40023800
 8006464:	08008cac 	.word	0x08008cac

08006468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800646c:	b0a6      	sub	sp, #152	; 0x98
 800646e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8006476:	2300      	movs	r3, #0
 8006478:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8006488:	2300      	movs	r3, #0
 800648a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800648e:	4bc8      	ldr	r3, [pc, #800]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f003 030c 	and.w	r3, r3, #12
 8006496:	2b0c      	cmp	r3, #12
 8006498:	f200 817e 	bhi.w	8006798 <HAL_RCC_GetSysClockFreq+0x330>
 800649c:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800649e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a2:	bf00      	nop
 80064a4:	080064d9 	.word	0x080064d9
 80064a8:	08006799 	.word	0x08006799
 80064ac:	08006799 	.word	0x08006799
 80064b0:	08006799 	.word	0x08006799
 80064b4:	080064e1 	.word	0x080064e1
 80064b8:	08006799 	.word	0x08006799
 80064bc:	08006799 	.word	0x08006799
 80064c0:	08006799 	.word	0x08006799
 80064c4:	080064e9 	.word	0x080064e9
 80064c8:	08006799 	.word	0x08006799
 80064cc:	08006799 	.word	0x08006799
 80064d0:	08006799 	.word	0x08006799
 80064d4:	08006653 	.word	0x08006653
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064d8:	4bb6      	ldr	r3, [pc, #728]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80064da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80064de:	e15f      	b.n	80067a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064e0:	4bb5      	ldr	r3, [pc, #724]	; (80067b8 <HAL_RCC_GetSysClockFreq+0x350>)
 80064e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80064e6:	e15b      	b.n	80067a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064e8:	4bb1      	ldr	r3, [pc, #708]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x348>)
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064f4:	4bae      	ldr	r3, [pc, #696]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x348>)
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d031      	beq.n	8006564 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006500:	4bab      	ldr	r3, [pc, #684]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	099b      	lsrs	r3, r3, #6
 8006506:	2200      	movs	r2, #0
 8006508:	66bb      	str	r3, [r7, #104]	; 0x68
 800650a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800650c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800650e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006512:	663b      	str	r3, [r7, #96]	; 0x60
 8006514:	2300      	movs	r3, #0
 8006516:	667b      	str	r3, [r7, #100]	; 0x64
 8006518:	4ba7      	ldr	r3, [pc, #668]	; (80067b8 <HAL_RCC_GetSysClockFreq+0x350>)
 800651a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800651e:	462a      	mov	r2, r5
 8006520:	fb03 f202 	mul.w	r2, r3, r2
 8006524:	2300      	movs	r3, #0
 8006526:	4621      	mov	r1, r4
 8006528:	fb01 f303 	mul.w	r3, r1, r3
 800652c:	4413      	add	r3, r2
 800652e:	4aa2      	ldr	r2, [pc, #648]	; (80067b8 <HAL_RCC_GetSysClockFreq+0x350>)
 8006530:	4621      	mov	r1, r4
 8006532:	fba1 1202 	umull	r1, r2, r1, r2
 8006536:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006538:	460a      	mov	r2, r1
 800653a:	67ba      	str	r2, [r7, #120]	; 0x78
 800653c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800653e:	4413      	add	r3, r2
 8006540:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006542:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006546:	2200      	movs	r2, #0
 8006548:	65bb      	str	r3, [r7, #88]	; 0x58
 800654a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800654c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006550:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006554:	f7f9 feac 	bl	80002b0 <__aeabi_uldivmod>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4613      	mov	r3, r2
 800655e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006562:	e064      	b.n	800662e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006564:	4b92      	ldr	r3, [pc, #584]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	099b      	lsrs	r3, r3, #6
 800656a:	2200      	movs	r2, #0
 800656c:	653b      	str	r3, [r7, #80]	; 0x50
 800656e:	657a      	str	r2, [r7, #84]	; 0x54
 8006570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006576:	64bb      	str	r3, [r7, #72]	; 0x48
 8006578:	2300      	movs	r3, #0
 800657a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800657c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8006580:	4622      	mov	r2, r4
 8006582:	462b      	mov	r3, r5
 8006584:	f04f 0000 	mov.w	r0, #0
 8006588:	f04f 0100 	mov.w	r1, #0
 800658c:	0159      	lsls	r1, r3, #5
 800658e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006592:	0150      	lsls	r0, r2, #5
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	4621      	mov	r1, r4
 800659a:	1a51      	subs	r1, r2, r1
 800659c:	6139      	str	r1, [r7, #16]
 800659e:	4629      	mov	r1, r5
 80065a0:	eb63 0301 	sbc.w	r3, r3, r1
 80065a4:	617b      	str	r3, [r7, #20]
 80065a6:	f04f 0200 	mov.w	r2, #0
 80065aa:	f04f 0300 	mov.w	r3, #0
 80065ae:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065b2:	4659      	mov	r1, fp
 80065b4:	018b      	lsls	r3, r1, #6
 80065b6:	4651      	mov	r1, sl
 80065b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80065bc:	4651      	mov	r1, sl
 80065be:	018a      	lsls	r2, r1, #6
 80065c0:	4651      	mov	r1, sl
 80065c2:	ebb2 0801 	subs.w	r8, r2, r1
 80065c6:	4659      	mov	r1, fp
 80065c8:	eb63 0901 	sbc.w	r9, r3, r1
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	f04f 0300 	mov.w	r3, #0
 80065d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065e0:	4690      	mov	r8, r2
 80065e2:	4699      	mov	r9, r3
 80065e4:	4623      	mov	r3, r4
 80065e6:	eb18 0303 	adds.w	r3, r8, r3
 80065ea:	60bb      	str	r3, [r7, #8]
 80065ec:	462b      	mov	r3, r5
 80065ee:	eb49 0303 	adc.w	r3, r9, r3
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	f04f 0200 	mov.w	r2, #0
 80065f8:	f04f 0300 	mov.w	r3, #0
 80065fc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006600:	4629      	mov	r1, r5
 8006602:	028b      	lsls	r3, r1, #10
 8006604:	4621      	mov	r1, r4
 8006606:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800660a:	4621      	mov	r1, r4
 800660c:	028a      	lsls	r2, r1, #10
 800660e:	4610      	mov	r0, r2
 8006610:	4619      	mov	r1, r3
 8006612:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006616:	2200      	movs	r2, #0
 8006618:	643b      	str	r3, [r7, #64]	; 0x40
 800661a:	647a      	str	r2, [r7, #68]	; 0x44
 800661c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006620:	f7f9 fe46 	bl	80002b0 <__aeabi_uldivmod>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4613      	mov	r3, r2
 800662a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800662e:	4b60      	ldr	r3, [pc, #384]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	0c1b      	lsrs	r3, r3, #16
 8006634:	f003 0303 	and.w	r3, r3, #3
 8006638:	3301      	adds	r3, #1
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8006640:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006644:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006648:	fbb2 f3f3 	udiv	r3, r2, r3
 800664c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006650:	e0a6      	b.n	80067a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006652:	4b57      	ldr	r3, [pc, #348]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800665a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800665e:	4b54      	ldr	r3, [pc, #336]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d02a      	beq.n	80066c0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800666a:	4b51      	ldr	r3, [pc, #324]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x348>)
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	099b      	lsrs	r3, r3, #6
 8006670:	2200      	movs	r2, #0
 8006672:	63bb      	str	r3, [r7, #56]	; 0x38
 8006674:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800667c:	2100      	movs	r1, #0
 800667e:	4b4e      	ldr	r3, [pc, #312]	; (80067b8 <HAL_RCC_GetSysClockFreq+0x350>)
 8006680:	fb03 f201 	mul.w	r2, r3, r1
 8006684:	2300      	movs	r3, #0
 8006686:	fb00 f303 	mul.w	r3, r0, r3
 800668a:	4413      	add	r3, r2
 800668c:	4a4a      	ldr	r2, [pc, #296]	; (80067b8 <HAL_RCC_GetSysClockFreq+0x350>)
 800668e:	fba0 1202 	umull	r1, r2, r0, r2
 8006692:	677a      	str	r2, [r7, #116]	; 0x74
 8006694:	460a      	mov	r2, r1
 8006696:	673a      	str	r2, [r7, #112]	; 0x70
 8006698:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800669a:	4413      	add	r3, r2
 800669c:	677b      	str	r3, [r7, #116]	; 0x74
 800669e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066a2:	2200      	movs	r2, #0
 80066a4:	633b      	str	r3, [r7, #48]	; 0x30
 80066a6:	637a      	str	r2, [r7, #52]	; 0x34
 80066a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80066ac:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80066b0:	f7f9 fdfe 	bl	80002b0 <__aeabi_uldivmod>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4613      	mov	r3, r2
 80066ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80066be:	e05b      	b.n	8006778 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066c0:	4b3b      	ldr	r3, [pc, #236]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x348>)
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	099b      	lsrs	r3, r3, #6
 80066c6:	2200      	movs	r2, #0
 80066c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d2:	623b      	str	r3, [r7, #32]
 80066d4:	2300      	movs	r3, #0
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
 80066d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80066dc:	4642      	mov	r2, r8
 80066de:	464b      	mov	r3, r9
 80066e0:	f04f 0000 	mov.w	r0, #0
 80066e4:	f04f 0100 	mov.w	r1, #0
 80066e8:	0159      	lsls	r1, r3, #5
 80066ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066ee:	0150      	lsls	r0, r2, #5
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	4641      	mov	r1, r8
 80066f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80066fa:	4649      	mov	r1, r9
 80066fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	f04f 0300 	mov.w	r3, #0
 8006708:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800670c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006710:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006714:	ebb2 040a 	subs.w	r4, r2, sl
 8006718:	eb63 050b 	sbc.w	r5, r3, fp
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	00eb      	lsls	r3, r5, #3
 8006726:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800672a:	00e2      	lsls	r2, r4, #3
 800672c:	4614      	mov	r4, r2
 800672e:	461d      	mov	r5, r3
 8006730:	4643      	mov	r3, r8
 8006732:	18e3      	adds	r3, r4, r3
 8006734:	603b      	str	r3, [r7, #0]
 8006736:	464b      	mov	r3, r9
 8006738:	eb45 0303 	adc.w	r3, r5, r3
 800673c:	607b      	str	r3, [r7, #4]
 800673e:	f04f 0200 	mov.w	r2, #0
 8006742:	f04f 0300 	mov.w	r3, #0
 8006746:	e9d7 4500 	ldrd	r4, r5, [r7]
 800674a:	4629      	mov	r1, r5
 800674c:	028b      	lsls	r3, r1, #10
 800674e:	4621      	mov	r1, r4
 8006750:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006754:	4621      	mov	r1, r4
 8006756:	028a      	lsls	r2, r1, #10
 8006758:	4610      	mov	r0, r2
 800675a:	4619      	mov	r1, r3
 800675c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006760:	2200      	movs	r2, #0
 8006762:	61bb      	str	r3, [r7, #24]
 8006764:	61fa      	str	r2, [r7, #28]
 8006766:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800676a:	f7f9 fda1 	bl	80002b0 <__aeabi_uldivmod>
 800676e:	4602      	mov	r2, r0
 8006770:	460b      	mov	r3, r1
 8006772:	4613      	mov	r3, r2
 8006774:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006778:	4b0d      	ldr	r3, [pc, #52]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x348>)
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	0f1b      	lsrs	r3, r3, #28
 800677e:	f003 0307 	and.w	r3, r3, #7
 8006782:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8006786:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800678a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800678e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006792:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006796:	e003      	b.n	80067a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006798:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x34c>)
 800679a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800679e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3798      	adds	r7, #152	; 0x98
 80067a8:	46bd      	mov	sp, r7
 80067aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067ae:	bf00      	nop
 80067b0:	40023800 	.word	0x40023800
 80067b4:	00f42400 	.word	0x00f42400
 80067b8:	017d7840 	.word	0x017d7840

080067bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e28d      	b.n	8006cea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 8083 	beq.w	80068e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80067dc:	4b94      	ldr	r3, [pc, #592]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f003 030c 	and.w	r3, r3, #12
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	d019      	beq.n	800681c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80067e8:	4b91      	ldr	r3, [pc, #580]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80067f0:	2b08      	cmp	r3, #8
 80067f2:	d106      	bne.n	8006802 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80067f4:	4b8e      	ldr	r3, [pc, #568]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006800:	d00c      	beq.n	800681c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006802:	4b8b      	ldr	r3, [pc, #556]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800680a:	2b0c      	cmp	r3, #12
 800680c:	d112      	bne.n	8006834 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800680e:	4b88      	ldr	r3, [pc, #544]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800681a:	d10b      	bne.n	8006834 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800681c:	4b84      	ldr	r3, [pc, #528]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d05b      	beq.n	80068e0 <HAL_RCC_OscConfig+0x124>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d157      	bne.n	80068e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e25a      	b.n	8006cea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800683c:	d106      	bne.n	800684c <HAL_RCC_OscConfig+0x90>
 800683e:	4b7c      	ldr	r3, [pc, #496]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a7b      	ldr	r2, [pc, #492]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 8006844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	e01d      	b.n	8006888 <HAL_RCC_OscConfig+0xcc>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006854:	d10c      	bne.n	8006870 <HAL_RCC_OscConfig+0xb4>
 8006856:	4b76      	ldr	r3, [pc, #472]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a75      	ldr	r2, [pc, #468]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 800685c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	4b73      	ldr	r3, [pc, #460]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a72      	ldr	r2, [pc, #456]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 8006868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	e00b      	b.n	8006888 <HAL_RCC_OscConfig+0xcc>
 8006870:	4b6f      	ldr	r3, [pc, #444]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a6e      	ldr	r2, [pc, #440]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 8006876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800687a:	6013      	str	r3, [r2, #0]
 800687c:	4b6c      	ldr	r3, [pc, #432]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a6b      	ldr	r2, [pc, #428]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 8006882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d013      	beq.n	80068b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006890:	f7fc f9be 	bl	8002c10 <HAL_GetTick>
 8006894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006896:	e008      	b.n	80068aa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006898:	f7fc f9ba 	bl	8002c10 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b64      	cmp	r3, #100	; 0x64
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e21f      	b.n	8006cea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068aa:	4b61      	ldr	r3, [pc, #388]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0f0      	beq.n	8006898 <HAL_RCC_OscConfig+0xdc>
 80068b6:	e014      	b.n	80068e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b8:	f7fc f9aa 	bl	8002c10 <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068c0:	f7fc f9a6 	bl	8002c10 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b64      	cmp	r3, #100	; 0x64
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e20b      	b.n	8006cea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068d2:	4b57      	ldr	r3, [pc, #348]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1f0      	bne.n	80068c0 <HAL_RCC_OscConfig+0x104>
 80068de:	e000      	b.n	80068e2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d06f      	beq.n	80069ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80068ee:	4b50      	ldr	r3, [pc, #320]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f003 030c 	and.w	r3, r3, #12
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d017      	beq.n	800692a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80068fa:	4b4d      	ldr	r3, [pc, #308]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006902:	2b08      	cmp	r3, #8
 8006904:	d105      	bne.n	8006912 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006906:	4b4a      	ldr	r3, [pc, #296]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00b      	beq.n	800692a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006912:	4b47      	ldr	r3, [pc, #284]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800691a:	2b0c      	cmp	r3, #12
 800691c:	d11c      	bne.n	8006958 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800691e:	4b44      	ldr	r3, [pc, #272]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d116      	bne.n	8006958 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800692a:	4b41      	ldr	r3, [pc, #260]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d005      	beq.n	8006942 <HAL_RCC_OscConfig+0x186>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d001      	beq.n	8006942 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e1d3      	b.n	8006cea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006942:	4b3b      	ldr	r3, [pc, #236]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	4937      	ldr	r1, [pc, #220]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 8006952:	4313      	orrs	r3, r2
 8006954:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006956:	e03a      	b.n	80069ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d020      	beq.n	80069a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006960:	4b34      	ldr	r3, [pc, #208]	; (8006a34 <HAL_RCC_OscConfig+0x278>)
 8006962:	2201      	movs	r2, #1
 8006964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006966:	f7fc f953 	bl	8002c10 <HAL_GetTick>
 800696a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800696c:	e008      	b.n	8006980 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800696e:	f7fc f94f 	bl	8002c10 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d901      	bls.n	8006980 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e1b4      	b.n	8006cea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006980:	4b2b      	ldr	r3, [pc, #172]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d0f0      	beq.n	800696e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800698c:	4b28      	ldr	r3, [pc, #160]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	00db      	lsls	r3, r3, #3
 800699a:	4925      	ldr	r1, [pc, #148]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 800699c:	4313      	orrs	r3, r2
 800699e:	600b      	str	r3, [r1, #0]
 80069a0:	e015      	b.n	80069ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069a2:	4b24      	ldr	r3, [pc, #144]	; (8006a34 <HAL_RCC_OscConfig+0x278>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a8:	f7fc f932 	bl	8002c10 <HAL_GetTick>
 80069ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069b0:	f7fc f92e 	bl	8002c10 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e193      	b.n	8006cea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069c2:	4b1b      	ldr	r3, [pc, #108]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1f0      	bne.n	80069b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0308 	and.w	r3, r3, #8
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d036      	beq.n	8006a48 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d016      	beq.n	8006a10 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069e2:	4b15      	ldr	r3, [pc, #84]	; (8006a38 <HAL_RCC_OscConfig+0x27c>)
 80069e4:	2201      	movs	r2, #1
 80069e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e8:	f7fc f912 	bl	8002c10 <HAL_GetTick>
 80069ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069ee:	e008      	b.n	8006a02 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069f0:	f7fc f90e 	bl	8002c10 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e173      	b.n	8006cea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a02:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <HAL_RCC_OscConfig+0x274>)
 8006a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0f0      	beq.n	80069f0 <HAL_RCC_OscConfig+0x234>
 8006a0e:	e01b      	b.n	8006a48 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a10:	4b09      	ldr	r3, [pc, #36]	; (8006a38 <HAL_RCC_OscConfig+0x27c>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a16:	f7fc f8fb 	bl	8002c10 <HAL_GetTick>
 8006a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a1c:	e00e      	b.n	8006a3c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a1e:	f7fc f8f7 	bl	8002c10 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d907      	bls.n	8006a3c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e15c      	b.n	8006cea <HAL_RCC_OscConfig+0x52e>
 8006a30:	40023800 	.word	0x40023800
 8006a34:	42470000 	.word	0x42470000
 8006a38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a3c:	4b8a      	ldr	r3, [pc, #552]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1ea      	bne.n	8006a1e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 8097 	beq.w	8006b84 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a56:	2300      	movs	r3, #0
 8006a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a5a:	4b83      	ldr	r3, [pc, #524]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10f      	bne.n	8006a86 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a66:	2300      	movs	r3, #0
 8006a68:	60bb      	str	r3, [r7, #8]
 8006a6a:	4b7f      	ldr	r3, [pc, #508]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	4a7e      	ldr	r2, [pc, #504]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a74:	6413      	str	r3, [r2, #64]	; 0x40
 8006a76:	4b7c      	ldr	r3, [pc, #496]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a7e:	60bb      	str	r3, [r7, #8]
 8006a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a82:	2301      	movs	r3, #1
 8006a84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a86:	4b79      	ldr	r3, [pc, #484]	; (8006c6c <HAL_RCC_OscConfig+0x4b0>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d118      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a92:	4b76      	ldr	r3, [pc, #472]	; (8006c6c <HAL_RCC_OscConfig+0x4b0>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a75      	ldr	r2, [pc, #468]	; (8006c6c <HAL_RCC_OscConfig+0x4b0>)
 8006a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a9e:	f7fc f8b7 	bl	8002c10 <HAL_GetTick>
 8006aa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa4:	e008      	b.n	8006ab8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aa6:	f7fc f8b3 	bl	8002c10 <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d901      	bls.n	8006ab8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e118      	b.n	8006cea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ab8:	4b6c      	ldr	r3, [pc, #432]	; (8006c6c <HAL_RCC_OscConfig+0x4b0>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d0f0      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d106      	bne.n	8006ada <HAL_RCC_OscConfig+0x31e>
 8006acc:	4b66      	ldr	r3, [pc, #408]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad0:	4a65      	ldr	r2, [pc, #404]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006ad2:	f043 0301 	orr.w	r3, r3, #1
 8006ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ad8:	e01c      	b.n	8006b14 <HAL_RCC_OscConfig+0x358>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	2b05      	cmp	r3, #5
 8006ae0:	d10c      	bne.n	8006afc <HAL_RCC_OscConfig+0x340>
 8006ae2:	4b61      	ldr	r3, [pc, #388]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae6:	4a60      	ldr	r2, [pc, #384]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006ae8:	f043 0304 	orr.w	r3, r3, #4
 8006aec:	6713      	str	r3, [r2, #112]	; 0x70
 8006aee:	4b5e      	ldr	r3, [pc, #376]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af2:	4a5d      	ldr	r2, [pc, #372]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006af4:	f043 0301 	orr.w	r3, r3, #1
 8006af8:	6713      	str	r3, [r2, #112]	; 0x70
 8006afa:	e00b      	b.n	8006b14 <HAL_RCC_OscConfig+0x358>
 8006afc:	4b5a      	ldr	r3, [pc, #360]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b00:	4a59      	ldr	r2, [pc, #356]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006b02:	f023 0301 	bic.w	r3, r3, #1
 8006b06:	6713      	str	r3, [r2, #112]	; 0x70
 8006b08:	4b57      	ldr	r3, [pc, #348]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0c:	4a56      	ldr	r2, [pc, #344]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006b0e:	f023 0304 	bic.w	r3, r3, #4
 8006b12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d015      	beq.n	8006b48 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b1c:	f7fc f878 	bl	8002c10 <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b22:	e00a      	b.n	8006b3a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b24:	f7fc f874 	bl	8002c10 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d901      	bls.n	8006b3a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e0d7      	b.n	8006cea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b3a:	4b4b      	ldr	r3, [pc, #300]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0ee      	beq.n	8006b24 <HAL_RCC_OscConfig+0x368>
 8006b46:	e014      	b.n	8006b72 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b48:	f7fc f862 	bl	8002c10 <HAL_GetTick>
 8006b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b4e:	e00a      	b.n	8006b66 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b50:	f7fc f85e 	bl	8002c10 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e0c1      	b.n	8006cea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b66:	4b40      	ldr	r3, [pc, #256]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1ee      	bne.n	8006b50 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b72:	7dfb      	ldrb	r3, [r7, #23]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d105      	bne.n	8006b84 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b78:	4b3b      	ldr	r3, [pc, #236]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7c:	4a3a      	ldr	r2, [pc, #232]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 80ad 	beq.w	8006ce8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b8e:	4b36      	ldr	r3, [pc, #216]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f003 030c 	and.w	r3, r3, #12
 8006b96:	2b08      	cmp	r3, #8
 8006b98:	d060      	beq.n	8006c5c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d145      	bne.n	8006c2e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ba2:	4b33      	ldr	r3, [pc, #204]	; (8006c70 <HAL_RCC_OscConfig+0x4b4>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba8:	f7fc f832 	bl	8002c10 <HAL_GetTick>
 8006bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bae:	e008      	b.n	8006bc2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bb0:	f7fc f82e 	bl	8002c10 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e093      	b.n	8006cea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bc2:	4b29      	ldr	r3, [pc, #164]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1f0      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	69da      	ldr	r2, [r3, #28]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bdc:	019b      	lsls	r3, r3, #6
 8006bde:	431a      	orrs	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be4:	085b      	lsrs	r3, r3, #1
 8006be6:	3b01      	subs	r3, #1
 8006be8:	041b      	lsls	r3, r3, #16
 8006bea:	431a      	orrs	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf0:	061b      	lsls	r3, r3, #24
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf8:	071b      	lsls	r3, r3, #28
 8006bfa:	491b      	ldr	r1, [pc, #108]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c00:	4b1b      	ldr	r3, [pc, #108]	; (8006c70 <HAL_RCC_OscConfig+0x4b4>)
 8006c02:	2201      	movs	r2, #1
 8006c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c06:	f7fc f803 	bl	8002c10 <HAL_GetTick>
 8006c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c0c:	e008      	b.n	8006c20 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c0e:	f7fb ffff 	bl	8002c10 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d901      	bls.n	8006c20 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e064      	b.n	8006cea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c20:	4b11      	ldr	r3, [pc, #68]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d0f0      	beq.n	8006c0e <HAL_RCC_OscConfig+0x452>
 8006c2c:	e05c      	b.n	8006ce8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c2e:	4b10      	ldr	r3, [pc, #64]	; (8006c70 <HAL_RCC_OscConfig+0x4b4>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c34:	f7fb ffec 	bl	8002c10 <HAL_GetTick>
 8006c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c3a:	e008      	b.n	8006c4e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c3c:	f7fb ffe8 	bl	8002c10 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e04d      	b.n	8006cea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c4e:	4b06      	ldr	r3, [pc, #24]	; (8006c68 <HAL_RCC_OscConfig+0x4ac>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1f0      	bne.n	8006c3c <HAL_RCC_OscConfig+0x480>
 8006c5a:	e045      	b.n	8006ce8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d107      	bne.n	8006c74 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e040      	b.n	8006cea <HAL_RCC_OscConfig+0x52e>
 8006c68:	40023800 	.word	0x40023800
 8006c6c:	40007000 	.word	0x40007000
 8006c70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c74:	4b1f      	ldr	r3, [pc, #124]	; (8006cf4 <HAL_RCC_OscConfig+0x538>)
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d030      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d129      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d122      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006caa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d119      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cba:	085b      	lsrs	r3, r3, #1
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d10f      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d107      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cde:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d001      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e000      	b.n	8006cea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3718      	adds	r7, #24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	40023800 	.word	0x40023800

08006cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e03f      	b.n	8006d8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d106      	bne.n	8006d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7fb fb08 	bl	8002334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2224      	movs	r2, #36	; 0x24
 8006d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68da      	ldr	r2, [r3, #12]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fc7b 	bl	8007638 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691a      	ldr	r2, [r3, #16]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	695a      	ldr	r2, [r3, #20]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68da      	ldr	r2, [r3, #12]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2220      	movs	r2, #32
 8006d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
	...

08006d94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b0ba      	sub	sp, #232	; 0xe8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dca:	f003 030f 	and.w	r3, r3, #15
 8006dce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006dd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10f      	bne.n	8006dfa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dde:	f003 0320 	and.w	r3, r3, #32
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d009      	beq.n	8006dfa <HAL_UART_IRQHandler+0x66>
 8006de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dea:	f003 0320 	and.w	r3, r3, #32
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fb65 	bl	80074c2 <UART_Receive_IT>
      return;
 8006df8:	e256      	b.n	80072a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006dfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 80de 	beq.w	8006fc0 <HAL_UART_IRQHandler+0x22c>
 8006e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d106      	bne.n	8006e1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 80d1 	beq.w	8006fc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00b      	beq.n	8006e42 <HAL_UART_IRQHandler+0xae>
 8006e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d005      	beq.n	8006e42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3a:	f043 0201 	orr.w	r2, r3, #1
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e46:	f003 0304 	and.w	r3, r3, #4
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00b      	beq.n	8006e66 <HAL_UART_IRQHandler+0xd2>
 8006e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d005      	beq.n	8006e66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5e:	f043 0202 	orr.w	r2, r3, #2
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00b      	beq.n	8006e8a <HAL_UART_IRQHandler+0xf6>
 8006e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d005      	beq.n	8006e8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e82:	f043 0204 	orr.w	r2, r3, #4
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e8e:	f003 0308 	and.w	r3, r3, #8
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d011      	beq.n	8006eba <HAL_UART_IRQHandler+0x126>
 8006e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e9a:	f003 0320 	and.w	r3, r3, #32
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d105      	bne.n	8006eae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d005      	beq.n	8006eba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	f043 0208 	orr.w	r2, r3, #8
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f000 81ed 	beq.w	800729e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ec8:	f003 0320 	and.w	r3, r3, #32
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d008      	beq.n	8006ee2 <HAL_UART_IRQHandler+0x14e>
 8006ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ed4:	f003 0320 	and.w	r3, r3, #32
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 faf0 	bl	80074c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eec:	2b40      	cmp	r3, #64	; 0x40
 8006eee:	bf0c      	ite	eq
 8006ef0:	2301      	moveq	r3, #1
 8006ef2:	2300      	movne	r3, #0
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	f003 0308 	and.w	r3, r3, #8
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d103      	bne.n	8006f0e <HAL_UART_IRQHandler+0x17a>
 8006f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d04f      	beq.n	8006fae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f9f8 	bl	8007304 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1e:	2b40      	cmp	r3, #64	; 0x40
 8006f20:	d141      	bne.n	8006fa6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3314      	adds	r3, #20
 8006f28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f30:	e853 3f00 	ldrex	r3, [r3]
 8006f34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3314      	adds	r3, #20
 8006f4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f5e:	e841 2300 	strex	r3, r2, [r1]
 8006f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1d9      	bne.n	8006f22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d013      	beq.n	8006f9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7a:	4a7d      	ldr	r2, [pc, #500]	; (8007170 <HAL_UART_IRQHandler+0x3dc>)
 8006f7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fc f8a4 	bl	80030d0 <HAL_DMA_Abort_IT>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d016      	beq.n	8006fbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f98:	4610      	mov	r0, r2
 8006f9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f9c:	e00e      	b.n	8006fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f99a 	bl	80072d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa4:	e00a      	b.n	8006fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f996 	bl	80072d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fac:	e006      	b.n	8006fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f992 	bl	80072d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006fba:	e170      	b.n	800729e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fbc:	bf00      	nop
    return;
 8006fbe:	e16e      	b.n	800729e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	f040 814a 	bne.w	800725e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fce:	f003 0310 	and.w	r3, r3, #16
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 8143 	beq.w	800725e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fdc:	f003 0310 	and.w	r3, r3, #16
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 813c 	beq.w	800725e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60bb      	str	r3, [r7, #8]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	60bb      	str	r3, [r7, #8]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	60bb      	str	r3, [r7, #8]
 8006ffa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007006:	2b40      	cmp	r3, #64	; 0x40
 8007008:	f040 80b4 	bne.w	8007174 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007018:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 8140 	beq.w	80072a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007026:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800702a:	429a      	cmp	r2, r3
 800702c:	f080 8139 	bcs.w	80072a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007036:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007042:	f000 8088 	beq.w	8007156 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	330c      	adds	r3, #12
 800704c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800705c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	330c      	adds	r3, #12
 800706e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007072:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800707e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800708a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1d9      	bne.n	8007046 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3314      	adds	r3, #20
 8007098:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80070a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070a4:	f023 0301 	bic.w	r3, r3, #1
 80070a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3314      	adds	r3, #20
 80070b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80070ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070c2:	e841 2300 	strex	r3, r2, [r1]
 80070c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80070c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1e1      	bne.n	8007092 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3314      	adds	r3, #20
 80070d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070d8:	e853 3f00 	ldrex	r3, [r3]
 80070dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80070de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3314      	adds	r3, #20
 80070ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80070f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80070f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80070f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80070fa:	e841 2300 	strex	r3, r2, [r1]
 80070fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1e3      	bne.n	80070ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2220      	movs	r2, #32
 800710a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	330c      	adds	r3, #12
 800711a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800711e:	e853 3f00 	ldrex	r3, [r3]
 8007122:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007126:	f023 0310 	bic.w	r3, r3, #16
 800712a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	330c      	adds	r3, #12
 8007134:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007138:	65ba      	str	r2, [r7, #88]	; 0x58
 800713a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800713e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007140:	e841 2300 	strex	r3, r2, [r1]
 8007144:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1e3      	bne.n	8007114 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007150:	4618      	mov	r0, r3
 8007152:	f7fb ff4d 	bl	8002ff0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800715e:	b29b      	uxth	r3, r3
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	b29b      	uxth	r3, r3
 8007164:	4619      	mov	r1, r3
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f8c0 	bl	80072ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800716c:	e099      	b.n	80072a2 <HAL_UART_IRQHandler+0x50e>
 800716e:	bf00      	nop
 8007170:	080073cb 	.word	0x080073cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800717c:	b29b      	uxth	r3, r3
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007188:	b29b      	uxth	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 808b 	beq.w	80072a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007190:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 8086 	beq.w	80072a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	330c      	adds	r3, #12
 80071a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	330c      	adds	r3, #12
 80071ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80071be:	647a      	str	r2, [r7, #68]	; 0x44
 80071c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071c6:	e841 2300 	strex	r3, r2, [r1]
 80071ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e3      	bne.n	800719a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3314      	adds	r3, #20
 80071d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	e853 3f00 	ldrex	r3, [r3]
 80071e0:	623b      	str	r3, [r7, #32]
   return(result);
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	f023 0301 	bic.w	r3, r3, #1
 80071e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	3314      	adds	r3, #20
 80071f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80071f6:	633a      	str	r2, [r7, #48]	; 0x30
 80071f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1e3      	bne.n	80071d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2220      	movs	r2, #32
 800720e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	330c      	adds	r3, #12
 800721e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	e853 3f00 	ldrex	r3, [r3]
 8007226:	60fb      	str	r3, [r7, #12]
   return(result);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0310 	bic.w	r3, r3, #16
 800722e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	330c      	adds	r3, #12
 8007238:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800723c:	61fa      	str	r2, [r7, #28]
 800723e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007240:	69b9      	ldr	r1, [r7, #24]
 8007242:	69fa      	ldr	r2, [r7, #28]
 8007244:	e841 2300 	strex	r3, r2, [r1]
 8007248:	617b      	str	r3, [r7, #20]
   return(result);
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1e3      	bne.n	8007218 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007250:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007254:	4619      	mov	r1, r3
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f848 	bl	80072ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800725c:	e023      	b.n	80072a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800725e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007266:	2b00      	cmp	r3, #0
 8007268:	d009      	beq.n	800727e <HAL_UART_IRQHandler+0x4ea>
 800726a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800726e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f8bb 	bl	80073f2 <UART_Transmit_IT>
    return;
 800727c:	e014      	b.n	80072a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800727e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00e      	beq.n	80072a8 <HAL_UART_IRQHandler+0x514>
 800728a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800728e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007292:	2b00      	cmp	r3, #0
 8007294:	d008      	beq.n	80072a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f8fb 	bl	8007492 <UART_EndTransmit_IT>
    return;
 800729c:	e004      	b.n	80072a8 <HAL_UART_IRQHandler+0x514>
    return;
 800729e:	bf00      	nop
 80072a0:	e002      	b.n	80072a8 <HAL_UART_IRQHandler+0x514>
      return;
 80072a2:	bf00      	nop
 80072a4:	e000      	b.n	80072a8 <HAL_UART_IRQHandler+0x514>
      return;
 80072a6:	bf00      	nop
  }
}
 80072a8:	37e8      	adds	r7, #232	; 0xe8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop

080072b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007304:	b480      	push	{r7}
 8007306:	b095      	sub	sp, #84	; 0x54
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	330c      	adds	r3, #12
 8007312:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007316:	e853 3f00 	ldrex	r3, [r3]
 800731a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800731c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	330c      	adds	r3, #12
 800732a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800732c:	643a      	str	r2, [r7, #64]	; 0x40
 800732e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007332:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007334:	e841 2300 	strex	r3, r2, [r1]
 8007338:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800733a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1e5      	bne.n	800730c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3314      	adds	r3, #20
 8007346:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	e853 3f00 	ldrex	r3, [r3]
 800734e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	f023 0301 	bic.w	r3, r3, #1
 8007356:	64bb      	str	r3, [r7, #72]	; 0x48
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3314      	adds	r3, #20
 800735e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007360:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007368:	e841 2300 	strex	r3, r2, [r1]
 800736c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e5      	bne.n	8007340 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007378:	2b01      	cmp	r3, #1
 800737a:	d119      	bne.n	80073b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	330c      	adds	r3, #12
 8007382:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	e853 3f00 	ldrex	r3, [r3]
 800738a:	60bb      	str	r3, [r7, #8]
   return(result);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f023 0310 	bic.w	r3, r3, #16
 8007392:	647b      	str	r3, [r7, #68]	; 0x44
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	330c      	adds	r3, #12
 800739a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800739c:	61ba      	str	r2, [r7, #24]
 800739e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a0:	6979      	ldr	r1, [r7, #20]
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	e841 2300 	strex	r3, r2, [r1]
 80073a8:	613b      	str	r3, [r7, #16]
   return(result);
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1e5      	bne.n	800737c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2220      	movs	r2, #32
 80073b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80073be:	bf00      	nop
 80073c0:	3754      	adds	r7, #84	; 0x54
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f7ff ff77 	bl	80072d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ea:	bf00      	nop
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b085      	sub	sp, #20
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b21      	cmp	r3, #33	; 0x21
 8007404:	d13e      	bne.n	8007484 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800740e:	d114      	bne.n	800743a <UART_Transmit_IT+0x48>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d110      	bne.n	800743a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800742c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	1c9a      	adds	r2, r3, #2
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	621a      	str	r2, [r3, #32]
 8007438:	e008      	b.n	800744c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	1c59      	adds	r1, r3, #1
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6211      	str	r1, [r2, #32]
 8007444:	781a      	ldrb	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007450:	b29b      	uxth	r3, r3
 8007452:	3b01      	subs	r3, #1
 8007454:	b29b      	uxth	r3, r3
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	4619      	mov	r1, r3
 800745a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10f      	bne.n	8007480 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800746e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800747e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	e000      	b.n	8007486 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007484:	2302      	movs	r3, #2
  }
}
 8007486:	4618      	mov	r0, r3
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b082      	sub	sp, #8
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68da      	ldr	r2, [r3, #12]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7ff fefc 	bl	80072b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b08c      	sub	sp, #48	; 0x30
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b22      	cmp	r3, #34	; 0x22
 80074d4:	f040 80ab 	bne.w	800762e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074e0:	d117      	bne.n	8007512 <UART_Receive_IT+0x50>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d113      	bne.n	8007512 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007500:	b29a      	uxth	r2, r3
 8007502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007504:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750a:	1c9a      	adds	r2, r3, #2
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	629a      	str	r2, [r3, #40]	; 0x28
 8007510:	e026      	b.n	8007560 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007516:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007518:	2300      	movs	r3, #0
 800751a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007524:	d007      	beq.n	8007536 <UART_Receive_IT+0x74>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10a      	bne.n	8007544 <UART_Receive_IT+0x82>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d106      	bne.n	8007544 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	b2da      	uxtb	r2, r3
 800753e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007540:	701a      	strb	r2, [r3, #0]
 8007542:	e008      	b.n	8007556 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	b2db      	uxtb	r3, r3
 800754c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007550:	b2da      	uxtb	r2, r3
 8007552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007554:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007564:	b29b      	uxth	r3, r3
 8007566:	3b01      	subs	r3, #1
 8007568:	b29b      	uxth	r3, r3
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	4619      	mov	r1, r3
 800756e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007570:	2b00      	cmp	r3, #0
 8007572:	d15a      	bne.n	800762a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f022 0220 	bic.w	r2, r2, #32
 8007582:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68da      	ldr	r2, [r3, #12]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007592:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	695a      	ldr	r2, [r3, #20]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 0201 	bic.w	r2, r2, #1
 80075a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d135      	bne.n	8007620 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	330c      	adds	r3, #12
 80075c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	e853 3f00 	ldrex	r3, [r3]
 80075c8:	613b      	str	r3, [r7, #16]
   return(result);
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f023 0310 	bic.w	r3, r3, #16
 80075d0:	627b      	str	r3, [r7, #36]	; 0x24
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	330c      	adds	r3, #12
 80075d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075da:	623a      	str	r2, [r7, #32]
 80075dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075de:	69f9      	ldr	r1, [r7, #28]
 80075e0:	6a3a      	ldr	r2, [r7, #32]
 80075e2:	e841 2300 	strex	r3, r2, [r1]
 80075e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1e5      	bne.n	80075ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0310 	and.w	r3, r3, #16
 80075f8:	2b10      	cmp	r3, #16
 80075fa:	d10a      	bne.n	8007612 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075fc:	2300      	movs	r3, #0
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	60fb      	str	r3, [r7, #12]
 8007610:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7ff fe67 	bl	80072ec <HAL_UARTEx_RxEventCallback>
 800761e:	e002      	b.n	8007626 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff fe4f 	bl	80072c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	e002      	b.n	8007630 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	e000      	b.n	8007630 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800762e:	2302      	movs	r3, #2
  }
}
 8007630:	4618      	mov	r0, r3
 8007632:	3730      	adds	r7, #48	; 0x30
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800763c:	b0c0      	sub	sp, #256	; 0x100
 800763e:	af00      	add	r7, sp, #0
 8007640:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007654:	68d9      	ldr	r1, [r3, #12]
 8007656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	ea40 0301 	orr.w	r3, r0, r1
 8007660:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007666:	689a      	ldr	r2, [r3, #8]
 8007668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	431a      	orrs	r2, r3
 8007670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	431a      	orrs	r2, r3
 8007678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	4313      	orrs	r3, r2
 8007680:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007690:	f021 010c 	bic.w	r1, r1, #12
 8007694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800769e:	430b      	orrs	r3, r1
 80076a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80076ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b2:	6999      	ldr	r1, [r3, #24]
 80076b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	ea40 0301 	orr.w	r3, r0, r1
 80076be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	4b8f      	ldr	r3, [pc, #572]	; (8007904 <UART_SetConfig+0x2cc>)
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d005      	beq.n	80076d8 <UART_SetConfig+0xa0>
 80076cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	4b8d      	ldr	r3, [pc, #564]	; (8007908 <UART_SetConfig+0x2d0>)
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d104      	bne.n	80076e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80076d8:	f7fe feb2 	bl	8006440 <HAL_RCC_GetPCLK2Freq>
 80076dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80076e0:	e003      	b.n	80076ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076e2:	f7fe fe99 	bl	8006418 <HAL_RCC_GetPCLK1Freq>
 80076e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ee:	69db      	ldr	r3, [r3, #28]
 80076f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076f4:	f040 810c 	bne.w	8007910 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076fc:	2200      	movs	r2, #0
 80076fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007702:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007706:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800770a:	4622      	mov	r2, r4
 800770c:	462b      	mov	r3, r5
 800770e:	1891      	adds	r1, r2, r2
 8007710:	65b9      	str	r1, [r7, #88]	; 0x58
 8007712:	415b      	adcs	r3, r3
 8007714:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007716:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800771a:	4621      	mov	r1, r4
 800771c:	eb12 0801 	adds.w	r8, r2, r1
 8007720:	4629      	mov	r1, r5
 8007722:	eb43 0901 	adc.w	r9, r3, r1
 8007726:	f04f 0200 	mov.w	r2, #0
 800772a:	f04f 0300 	mov.w	r3, #0
 800772e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800773a:	4690      	mov	r8, r2
 800773c:	4699      	mov	r9, r3
 800773e:	4623      	mov	r3, r4
 8007740:	eb18 0303 	adds.w	r3, r8, r3
 8007744:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007748:	462b      	mov	r3, r5
 800774a:	eb49 0303 	adc.w	r3, r9, r3
 800774e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800775e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007762:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007766:	460b      	mov	r3, r1
 8007768:	18db      	adds	r3, r3, r3
 800776a:	653b      	str	r3, [r7, #80]	; 0x50
 800776c:	4613      	mov	r3, r2
 800776e:	eb42 0303 	adc.w	r3, r2, r3
 8007772:	657b      	str	r3, [r7, #84]	; 0x54
 8007774:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007778:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800777c:	f7f8 fd98 	bl	80002b0 <__aeabi_uldivmod>
 8007780:	4602      	mov	r2, r0
 8007782:	460b      	mov	r3, r1
 8007784:	4b61      	ldr	r3, [pc, #388]	; (800790c <UART_SetConfig+0x2d4>)
 8007786:	fba3 2302 	umull	r2, r3, r3, r2
 800778a:	095b      	lsrs	r3, r3, #5
 800778c:	011c      	lsls	r4, r3, #4
 800778e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007792:	2200      	movs	r2, #0
 8007794:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007798:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800779c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80077a0:	4642      	mov	r2, r8
 80077a2:	464b      	mov	r3, r9
 80077a4:	1891      	adds	r1, r2, r2
 80077a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80077a8:	415b      	adcs	r3, r3
 80077aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80077b0:	4641      	mov	r1, r8
 80077b2:	eb12 0a01 	adds.w	sl, r2, r1
 80077b6:	4649      	mov	r1, r9
 80077b8:	eb43 0b01 	adc.w	fp, r3, r1
 80077bc:	f04f 0200 	mov.w	r2, #0
 80077c0:	f04f 0300 	mov.w	r3, #0
 80077c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80077c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80077cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077d0:	4692      	mov	sl, r2
 80077d2:	469b      	mov	fp, r3
 80077d4:	4643      	mov	r3, r8
 80077d6:	eb1a 0303 	adds.w	r3, sl, r3
 80077da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077de:	464b      	mov	r3, r9
 80077e0:	eb4b 0303 	adc.w	r3, fp, r3
 80077e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80077e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80077f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80077fc:	460b      	mov	r3, r1
 80077fe:	18db      	adds	r3, r3, r3
 8007800:	643b      	str	r3, [r7, #64]	; 0x40
 8007802:	4613      	mov	r3, r2
 8007804:	eb42 0303 	adc.w	r3, r2, r3
 8007808:	647b      	str	r3, [r7, #68]	; 0x44
 800780a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800780e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007812:	f7f8 fd4d 	bl	80002b0 <__aeabi_uldivmod>
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	4611      	mov	r1, r2
 800781c:	4b3b      	ldr	r3, [pc, #236]	; (800790c <UART_SetConfig+0x2d4>)
 800781e:	fba3 2301 	umull	r2, r3, r3, r1
 8007822:	095b      	lsrs	r3, r3, #5
 8007824:	2264      	movs	r2, #100	; 0x64
 8007826:	fb02 f303 	mul.w	r3, r2, r3
 800782a:	1acb      	subs	r3, r1, r3
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007832:	4b36      	ldr	r3, [pc, #216]	; (800790c <UART_SetConfig+0x2d4>)
 8007834:	fba3 2302 	umull	r2, r3, r3, r2
 8007838:	095b      	lsrs	r3, r3, #5
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007840:	441c      	add	r4, r3
 8007842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007846:	2200      	movs	r2, #0
 8007848:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800784c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007850:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007854:	4642      	mov	r2, r8
 8007856:	464b      	mov	r3, r9
 8007858:	1891      	adds	r1, r2, r2
 800785a:	63b9      	str	r1, [r7, #56]	; 0x38
 800785c:	415b      	adcs	r3, r3
 800785e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007860:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007864:	4641      	mov	r1, r8
 8007866:	1851      	adds	r1, r2, r1
 8007868:	6339      	str	r1, [r7, #48]	; 0x30
 800786a:	4649      	mov	r1, r9
 800786c:	414b      	adcs	r3, r1
 800786e:	637b      	str	r3, [r7, #52]	; 0x34
 8007870:	f04f 0200 	mov.w	r2, #0
 8007874:	f04f 0300 	mov.w	r3, #0
 8007878:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800787c:	4659      	mov	r1, fp
 800787e:	00cb      	lsls	r3, r1, #3
 8007880:	4651      	mov	r1, sl
 8007882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007886:	4651      	mov	r1, sl
 8007888:	00ca      	lsls	r2, r1, #3
 800788a:	4610      	mov	r0, r2
 800788c:	4619      	mov	r1, r3
 800788e:	4603      	mov	r3, r0
 8007890:	4642      	mov	r2, r8
 8007892:	189b      	adds	r3, r3, r2
 8007894:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007898:	464b      	mov	r3, r9
 800789a:	460a      	mov	r2, r1
 800789c:	eb42 0303 	adc.w	r3, r2, r3
 80078a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80078b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80078b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80078b8:	460b      	mov	r3, r1
 80078ba:	18db      	adds	r3, r3, r3
 80078bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80078be:	4613      	mov	r3, r2
 80078c0:	eb42 0303 	adc.w	r3, r2, r3
 80078c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80078ce:	f7f8 fcef 	bl	80002b0 <__aeabi_uldivmod>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	4b0d      	ldr	r3, [pc, #52]	; (800790c <UART_SetConfig+0x2d4>)
 80078d8:	fba3 1302 	umull	r1, r3, r3, r2
 80078dc:	095b      	lsrs	r3, r3, #5
 80078de:	2164      	movs	r1, #100	; 0x64
 80078e0:	fb01 f303 	mul.w	r3, r1, r3
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	3332      	adds	r3, #50	; 0x32
 80078ea:	4a08      	ldr	r2, [pc, #32]	; (800790c <UART_SetConfig+0x2d4>)
 80078ec:	fba2 2303 	umull	r2, r3, r2, r3
 80078f0:	095b      	lsrs	r3, r3, #5
 80078f2:	f003 0207 	and.w	r2, r3, #7
 80078f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4422      	add	r2, r4
 80078fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007900:	e105      	b.n	8007b0e <UART_SetConfig+0x4d6>
 8007902:	bf00      	nop
 8007904:	40011000 	.word	0x40011000
 8007908:	40011400 	.word	0x40011400
 800790c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007914:	2200      	movs	r2, #0
 8007916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800791a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800791e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007922:	4642      	mov	r2, r8
 8007924:	464b      	mov	r3, r9
 8007926:	1891      	adds	r1, r2, r2
 8007928:	6239      	str	r1, [r7, #32]
 800792a:	415b      	adcs	r3, r3
 800792c:	627b      	str	r3, [r7, #36]	; 0x24
 800792e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007932:	4641      	mov	r1, r8
 8007934:	1854      	adds	r4, r2, r1
 8007936:	4649      	mov	r1, r9
 8007938:	eb43 0501 	adc.w	r5, r3, r1
 800793c:	f04f 0200 	mov.w	r2, #0
 8007940:	f04f 0300 	mov.w	r3, #0
 8007944:	00eb      	lsls	r3, r5, #3
 8007946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800794a:	00e2      	lsls	r2, r4, #3
 800794c:	4614      	mov	r4, r2
 800794e:	461d      	mov	r5, r3
 8007950:	4643      	mov	r3, r8
 8007952:	18e3      	adds	r3, r4, r3
 8007954:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007958:	464b      	mov	r3, r9
 800795a:	eb45 0303 	adc.w	r3, r5, r3
 800795e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800796e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007972:	f04f 0200 	mov.w	r2, #0
 8007976:	f04f 0300 	mov.w	r3, #0
 800797a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800797e:	4629      	mov	r1, r5
 8007980:	008b      	lsls	r3, r1, #2
 8007982:	4621      	mov	r1, r4
 8007984:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007988:	4621      	mov	r1, r4
 800798a:	008a      	lsls	r2, r1, #2
 800798c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007990:	f7f8 fc8e 	bl	80002b0 <__aeabi_uldivmod>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	4b60      	ldr	r3, [pc, #384]	; (8007b1c <UART_SetConfig+0x4e4>)
 800799a:	fba3 2302 	umull	r2, r3, r3, r2
 800799e:	095b      	lsrs	r3, r3, #5
 80079a0:	011c      	lsls	r4, r3, #4
 80079a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079a6:	2200      	movs	r2, #0
 80079a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80079b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80079b4:	4642      	mov	r2, r8
 80079b6:	464b      	mov	r3, r9
 80079b8:	1891      	adds	r1, r2, r2
 80079ba:	61b9      	str	r1, [r7, #24]
 80079bc:	415b      	adcs	r3, r3
 80079be:	61fb      	str	r3, [r7, #28]
 80079c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079c4:	4641      	mov	r1, r8
 80079c6:	1851      	adds	r1, r2, r1
 80079c8:	6139      	str	r1, [r7, #16]
 80079ca:	4649      	mov	r1, r9
 80079cc:	414b      	adcs	r3, r1
 80079ce:	617b      	str	r3, [r7, #20]
 80079d0:	f04f 0200 	mov.w	r2, #0
 80079d4:	f04f 0300 	mov.w	r3, #0
 80079d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079dc:	4659      	mov	r1, fp
 80079de:	00cb      	lsls	r3, r1, #3
 80079e0:	4651      	mov	r1, sl
 80079e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079e6:	4651      	mov	r1, sl
 80079e8:	00ca      	lsls	r2, r1, #3
 80079ea:	4610      	mov	r0, r2
 80079ec:	4619      	mov	r1, r3
 80079ee:	4603      	mov	r3, r0
 80079f0:	4642      	mov	r2, r8
 80079f2:	189b      	adds	r3, r3, r2
 80079f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079f8:	464b      	mov	r3, r9
 80079fa:	460a      	mov	r2, r1
 80079fc:	eb42 0303 	adc.w	r3, r2, r3
 8007a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007a10:	f04f 0200 	mov.w	r2, #0
 8007a14:	f04f 0300 	mov.w	r3, #0
 8007a18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007a1c:	4649      	mov	r1, r9
 8007a1e:	008b      	lsls	r3, r1, #2
 8007a20:	4641      	mov	r1, r8
 8007a22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a26:	4641      	mov	r1, r8
 8007a28:	008a      	lsls	r2, r1, #2
 8007a2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007a2e:	f7f8 fc3f 	bl	80002b0 <__aeabi_uldivmod>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4b39      	ldr	r3, [pc, #228]	; (8007b1c <UART_SetConfig+0x4e4>)
 8007a38:	fba3 1302 	umull	r1, r3, r3, r2
 8007a3c:	095b      	lsrs	r3, r3, #5
 8007a3e:	2164      	movs	r1, #100	; 0x64
 8007a40:	fb01 f303 	mul.w	r3, r1, r3
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	011b      	lsls	r3, r3, #4
 8007a48:	3332      	adds	r3, #50	; 0x32
 8007a4a:	4a34      	ldr	r2, [pc, #208]	; (8007b1c <UART_SetConfig+0x4e4>)
 8007a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a50:	095b      	lsrs	r3, r3, #5
 8007a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a56:	441c      	add	r4, r3
 8007a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	673b      	str	r3, [r7, #112]	; 0x70
 8007a60:	677a      	str	r2, [r7, #116]	; 0x74
 8007a62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007a66:	4642      	mov	r2, r8
 8007a68:	464b      	mov	r3, r9
 8007a6a:	1891      	adds	r1, r2, r2
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	415b      	adcs	r3, r3
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a76:	4641      	mov	r1, r8
 8007a78:	1851      	adds	r1, r2, r1
 8007a7a:	6039      	str	r1, [r7, #0]
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	414b      	adcs	r3, r1
 8007a80:	607b      	str	r3, [r7, #4]
 8007a82:	f04f 0200 	mov.w	r2, #0
 8007a86:	f04f 0300 	mov.w	r3, #0
 8007a8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a8e:	4659      	mov	r1, fp
 8007a90:	00cb      	lsls	r3, r1, #3
 8007a92:	4651      	mov	r1, sl
 8007a94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a98:	4651      	mov	r1, sl
 8007a9a:	00ca      	lsls	r2, r1, #3
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	4642      	mov	r2, r8
 8007aa4:	189b      	adds	r3, r3, r2
 8007aa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007aa8:	464b      	mov	r3, r9
 8007aaa:	460a      	mov	r2, r1
 8007aac:	eb42 0303 	adc.w	r3, r2, r3
 8007ab0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	663b      	str	r3, [r7, #96]	; 0x60
 8007abc:	667a      	str	r2, [r7, #100]	; 0x64
 8007abe:	f04f 0200 	mov.w	r2, #0
 8007ac2:	f04f 0300 	mov.w	r3, #0
 8007ac6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007aca:	4649      	mov	r1, r9
 8007acc:	008b      	lsls	r3, r1, #2
 8007ace:	4641      	mov	r1, r8
 8007ad0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ad4:	4641      	mov	r1, r8
 8007ad6:	008a      	lsls	r2, r1, #2
 8007ad8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007adc:	f7f8 fbe8 	bl	80002b0 <__aeabi_uldivmod>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4b0d      	ldr	r3, [pc, #52]	; (8007b1c <UART_SetConfig+0x4e4>)
 8007ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8007aea:	095b      	lsrs	r3, r3, #5
 8007aec:	2164      	movs	r1, #100	; 0x64
 8007aee:	fb01 f303 	mul.w	r3, r1, r3
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	011b      	lsls	r3, r3, #4
 8007af6:	3332      	adds	r3, #50	; 0x32
 8007af8:	4a08      	ldr	r2, [pc, #32]	; (8007b1c <UART_SetConfig+0x4e4>)
 8007afa:	fba2 2303 	umull	r2, r3, r2, r3
 8007afe:	095b      	lsrs	r3, r3, #5
 8007b00:	f003 020f 	and.w	r2, r3, #15
 8007b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4422      	add	r2, r4
 8007b0c:	609a      	str	r2, [r3, #8]
}
 8007b0e:	bf00      	nop
 8007b10:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007b14:	46bd      	mov	sp, r7
 8007b16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b1a:	bf00      	nop
 8007b1c:	51eb851f 	.word	0x51eb851f

08007b20 <__errno>:
 8007b20:	4b01      	ldr	r3, [pc, #4]	; (8007b28 <__errno+0x8>)
 8007b22:	6818      	ldr	r0, [r3, #0]
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	20000014 	.word	0x20000014

08007b2c <__libc_init_array>:
 8007b2c:	b570      	push	{r4, r5, r6, lr}
 8007b2e:	4d0d      	ldr	r5, [pc, #52]	; (8007b64 <__libc_init_array+0x38>)
 8007b30:	4c0d      	ldr	r4, [pc, #52]	; (8007b68 <__libc_init_array+0x3c>)
 8007b32:	1b64      	subs	r4, r4, r5
 8007b34:	10a4      	asrs	r4, r4, #2
 8007b36:	2600      	movs	r6, #0
 8007b38:	42a6      	cmp	r6, r4
 8007b3a:	d109      	bne.n	8007b50 <__libc_init_array+0x24>
 8007b3c:	4d0b      	ldr	r5, [pc, #44]	; (8007b6c <__libc_init_array+0x40>)
 8007b3e:	4c0c      	ldr	r4, [pc, #48]	; (8007b70 <__libc_init_array+0x44>)
 8007b40:	f001 f832 	bl	8008ba8 <_init>
 8007b44:	1b64      	subs	r4, r4, r5
 8007b46:	10a4      	asrs	r4, r4, #2
 8007b48:	2600      	movs	r6, #0
 8007b4a:	42a6      	cmp	r6, r4
 8007b4c:	d105      	bne.n	8007b5a <__libc_init_array+0x2e>
 8007b4e:	bd70      	pop	{r4, r5, r6, pc}
 8007b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b54:	4798      	blx	r3
 8007b56:	3601      	adds	r6, #1
 8007b58:	e7ee      	b.n	8007b38 <__libc_init_array+0xc>
 8007b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b5e:	4798      	blx	r3
 8007b60:	3601      	adds	r6, #1
 8007b62:	e7f2      	b.n	8007b4a <__libc_init_array+0x1e>
 8007b64:	08008d5c 	.word	0x08008d5c
 8007b68:	08008d5c 	.word	0x08008d5c
 8007b6c:	08008d5c 	.word	0x08008d5c
 8007b70:	08008d64 	.word	0x08008d64

08007b74 <memcpy>:
 8007b74:	440a      	add	r2, r1
 8007b76:	4291      	cmp	r1, r2
 8007b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b7c:	d100      	bne.n	8007b80 <memcpy+0xc>
 8007b7e:	4770      	bx	lr
 8007b80:	b510      	push	{r4, lr}
 8007b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b8a:	4291      	cmp	r1, r2
 8007b8c:	d1f9      	bne.n	8007b82 <memcpy+0xe>
 8007b8e:	bd10      	pop	{r4, pc}

08007b90 <memset>:
 8007b90:	4402      	add	r2, r0
 8007b92:	4603      	mov	r3, r0
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d100      	bne.n	8007b9a <memset+0xa>
 8007b98:	4770      	bx	lr
 8007b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b9e:	e7f9      	b.n	8007b94 <memset+0x4>

08007ba0 <iprintf>:
 8007ba0:	b40f      	push	{r0, r1, r2, r3}
 8007ba2:	4b0a      	ldr	r3, [pc, #40]	; (8007bcc <iprintf+0x2c>)
 8007ba4:	b513      	push	{r0, r1, r4, lr}
 8007ba6:	681c      	ldr	r4, [r3, #0]
 8007ba8:	b124      	cbz	r4, 8007bb4 <iprintf+0x14>
 8007baa:	69a3      	ldr	r3, [r4, #24]
 8007bac:	b913      	cbnz	r3, 8007bb4 <iprintf+0x14>
 8007bae:	4620      	mov	r0, r4
 8007bb0:	f000 fa5e 	bl	8008070 <__sinit>
 8007bb4:	ab05      	add	r3, sp, #20
 8007bb6:	9a04      	ldr	r2, [sp, #16]
 8007bb8:	68a1      	ldr	r1, [r4, #8]
 8007bba:	9301      	str	r3, [sp, #4]
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f000 fc67 	bl	8008490 <_vfiprintf_r>
 8007bc2:	b002      	add	sp, #8
 8007bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bc8:	b004      	add	sp, #16
 8007bca:	4770      	bx	lr
 8007bcc:	20000014 	.word	0x20000014

08007bd0 <_puts_r>:
 8007bd0:	b570      	push	{r4, r5, r6, lr}
 8007bd2:	460e      	mov	r6, r1
 8007bd4:	4605      	mov	r5, r0
 8007bd6:	b118      	cbz	r0, 8007be0 <_puts_r+0x10>
 8007bd8:	6983      	ldr	r3, [r0, #24]
 8007bda:	b90b      	cbnz	r3, 8007be0 <_puts_r+0x10>
 8007bdc:	f000 fa48 	bl	8008070 <__sinit>
 8007be0:	69ab      	ldr	r3, [r5, #24]
 8007be2:	68ac      	ldr	r4, [r5, #8]
 8007be4:	b913      	cbnz	r3, 8007bec <_puts_r+0x1c>
 8007be6:	4628      	mov	r0, r5
 8007be8:	f000 fa42 	bl	8008070 <__sinit>
 8007bec:	4b2c      	ldr	r3, [pc, #176]	; (8007ca0 <_puts_r+0xd0>)
 8007bee:	429c      	cmp	r4, r3
 8007bf0:	d120      	bne.n	8007c34 <_puts_r+0x64>
 8007bf2:	686c      	ldr	r4, [r5, #4]
 8007bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bf6:	07db      	lsls	r3, r3, #31
 8007bf8:	d405      	bmi.n	8007c06 <_puts_r+0x36>
 8007bfa:	89a3      	ldrh	r3, [r4, #12]
 8007bfc:	0598      	lsls	r0, r3, #22
 8007bfe:	d402      	bmi.n	8007c06 <_puts_r+0x36>
 8007c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c02:	f000 fad3 	bl	80081ac <__retarget_lock_acquire_recursive>
 8007c06:	89a3      	ldrh	r3, [r4, #12]
 8007c08:	0719      	lsls	r1, r3, #28
 8007c0a:	d51d      	bpl.n	8007c48 <_puts_r+0x78>
 8007c0c:	6923      	ldr	r3, [r4, #16]
 8007c0e:	b1db      	cbz	r3, 8007c48 <_puts_r+0x78>
 8007c10:	3e01      	subs	r6, #1
 8007c12:	68a3      	ldr	r3, [r4, #8]
 8007c14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	60a3      	str	r3, [r4, #8]
 8007c1c:	bb39      	cbnz	r1, 8007c6e <_puts_r+0x9e>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	da38      	bge.n	8007c94 <_puts_r+0xc4>
 8007c22:	4622      	mov	r2, r4
 8007c24:	210a      	movs	r1, #10
 8007c26:	4628      	mov	r0, r5
 8007c28:	f000 f848 	bl	8007cbc <__swbuf_r>
 8007c2c:	3001      	adds	r0, #1
 8007c2e:	d011      	beq.n	8007c54 <_puts_r+0x84>
 8007c30:	250a      	movs	r5, #10
 8007c32:	e011      	b.n	8007c58 <_puts_r+0x88>
 8007c34:	4b1b      	ldr	r3, [pc, #108]	; (8007ca4 <_puts_r+0xd4>)
 8007c36:	429c      	cmp	r4, r3
 8007c38:	d101      	bne.n	8007c3e <_puts_r+0x6e>
 8007c3a:	68ac      	ldr	r4, [r5, #8]
 8007c3c:	e7da      	b.n	8007bf4 <_puts_r+0x24>
 8007c3e:	4b1a      	ldr	r3, [pc, #104]	; (8007ca8 <_puts_r+0xd8>)
 8007c40:	429c      	cmp	r4, r3
 8007c42:	bf08      	it	eq
 8007c44:	68ec      	ldreq	r4, [r5, #12]
 8007c46:	e7d5      	b.n	8007bf4 <_puts_r+0x24>
 8007c48:	4621      	mov	r1, r4
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f000 f888 	bl	8007d60 <__swsetup_r>
 8007c50:	2800      	cmp	r0, #0
 8007c52:	d0dd      	beq.n	8007c10 <_puts_r+0x40>
 8007c54:	f04f 35ff 	mov.w	r5, #4294967295
 8007c58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c5a:	07da      	lsls	r2, r3, #31
 8007c5c:	d405      	bmi.n	8007c6a <_puts_r+0x9a>
 8007c5e:	89a3      	ldrh	r3, [r4, #12]
 8007c60:	059b      	lsls	r3, r3, #22
 8007c62:	d402      	bmi.n	8007c6a <_puts_r+0x9a>
 8007c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c66:	f000 faa2 	bl	80081ae <__retarget_lock_release_recursive>
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	bd70      	pop	{r4, r5, r6, pc}
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	da04      	bge.n	8007c7c <_puts_r+0xac>
 8007c72:	69a2      	ldr	r2, [r4, #24]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	dc06      	bgt.n	8007c86 <_puts_r+0xb6>
 8007c78:	290a      	cmp	r1, #10
 8007c7a:	d004      	beq.n	8007c86 <_puts_r+0xb6>
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	1c5a      	adds	r2, r3, #1
 8007c80:	6022      	str	r2, [r4, #0]
 8007c82:	7019      	strb	r1, [r3, #0]
 8007c84:	e7c5      	b.n	8007c12 <_puts_r+0x42>
 8007c86:	4622      	mov	r2, r4
 8007c88:	4628      	mov	r0, r5
 8007c8a:	f000 f817 	bl	8007cbc <__swbuf_r>
 8007c8e:	3001      	adds	r0, #1
 8007c90:	d1bf      	bne.n	8007c12 <_puts_r+0x42>
 8007c92:	e7df      	b.n	8007c54 <_puts_r+0x84>
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	250a      	movs	r5, #10
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	6022      	str	r2, [r4, #0]
 8007c9c:	701d      	strb	r5, [r3, #0]
 8007c9e:	e7db      	b.n	8007c58 <_puts_r+0x88>
 8007ca0:	08008ce0 	.word	0x08008ce0
 8007ca4:	08008d00 	.word	0x08008d00
 8007ca8:	08008cc0 	.word	0x08008cc0

08007cac <puts>:
 8007cac:	4b02      	ldr	r3, [pc, #8]	; (8007cb8 <puts+0xc>)
 8007cae:	4601      	mov	r1, r0
 8007cb0:	6818      	ldr	r0, [r3, #0]
 8007cb2:	f7ff bf8d 	b.w	8007bd0 <_puts_r>
 8007cb6:	bf00      	nop
 8007cb8:	20000014 	.word	0x20000014

08007cbc <__swbuf_r>:
 8007cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cbe:	460e      	mov	r6, r1
 8007cc0:	4614      	mov	r4, r2
 8007cc2:	4605      	mov	r5, r0
 8007cc4:	b118      	cbz	r0, 8007cce <__swbuf_r+0x12>
 8007cc6:	6983      	ldr	r3, [r0, #24]
 8007cc8:	b90b      	cbnz	r3, 8007cce <__swbuf_r+0x12>
 8007cca:	f000 f9d1 	bl	8008070 <__sinit>
 8007cce:	4b21      	ldr	r3, [pc, #132]	; (8007d54 <__swbuf_r+0x98>)
 8007cd0:	429c      	cmp	r4, r3
 8007cd2:	d12b      	bne.n	8007d2c <__swbuf_r+0x70>
 8007cd4:	686c      	ldr	r4, [r5, #4]
 8007cd6:	69a3      	ldr	r3, [r4, #24]
 8007cd8:	60a3      	str	r3, [r4, #8]
 8007cda:	89a3      	ldrh	r3, [r4, #12]
 8007cdc:	071a      	lsls	r2, r3, #28
 8007cde:	d52f      	bpl.n	8007d40 <__swbuf_r+0x84>
 8007ce0:	6923      	ldr	r3, [r4, #16]
 8007ce2:	b36b      	cbz	r3, 8007d40 <__swbuf_r+0x84>
 8007ce4:	6923      	ldr	r3, [r4, #16]
 8007ce6:	6820      	ldr	r0, [r4, #0]
 8007ce8:	1ac0      	subs	r0, r0, r3
 8007cea:	6963      	ldr	r3, [r4, #20]
 8007cec:	b2f6      	uxtb	r6, r6
 8007cee:	4283      	cmp	r3, r0
 8007cf0:	4637      	mov	r7, r6
 8007cf2:	dc04      	bgt.n	8007cfe <__swbuf_r+0x42>
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	f000 f926 	bl	8007f48 <_fflush_r>
 8007cfc:	bb30      	cbnz	r0, 8007d4c <__swbuf_r+0x90>
 8007cfe:	68a3      	ldr	r3, [r4, #8]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	60a3      	str	r3, [r4, #8]
 8007d04:	6823      	ldr	r3, [r4, #0]
 8007d06:	1c5a      	adds	r2, r3, #1
 8007d08:	6022      	str	r2, [r4, #0]
 8007d0a:	701e      	strb	r6, [r3, #0]
 8007d0c:	6963      	ldr	r3, [r4, #20]
 8007d0e:	3001      	adds	r0, #1
 8007d10:	4283      	cmp	r3, r0
 8007d12:	d004      	beq.n	8007d1e <__swbuf_r+0x62>
 8007d14:	89a3      	ldrh	r3, [r4, #12]
 8007d16:	07db      	lsls	r3, r3, #31
 8007d18:	d506      	bpl.n	8007d28 <__swbuf_r+0x6c>
 8007d1a:	2e0a      	cmp	r6, #10
 8007d1c:	d104      	bne.n	8007d28 <__swbuf_r+0x6c>
 8007d1e:	4621      	mov	r1, r4
 8007d20:	4628      	mov	r0, r5
 8007d22:	f000 f911 	bl	8007f48 <_fflush_r>
 8007d26:	b988      	cbnz	r0, 8007d4c <__swbuf_r+0x90>
 8007d28:	4638      	mov	r0, r7
 8007d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d2c:	4b0a      	ldr	r3, [pc, #40]	; (8007d58 <__swbuf_r+0x9c>)
 8007d2e:	429c      	cmp	r4, r3
 8007d30:	d101      	bne.n	8007d36 <__swbuf_r+0x7a>
 8007d32:	68ac      	ldr	r4, [r5, #8]
 8007d34:	e7cf      	b.n	8007cd6 <__swbuf_r+0x1a>
 8007d36:	4b09      	ldr	r3, [pc, #36]	; (8007d5c <__swbuf_r+0xa0>)
 8007d38:	429c      	cmp	r4, r3
 8007d3a:	bf08      	it	eq
 8007d3c:	68ec      	ldreq	r4, [r5, #12]
 8007d3e:	e7ca      	b.n	8007cd6 <__swbuf_r+0x1a>
 8007d40:	4621      	mov	r1, r4
 8007d42:	4628      	mov	r0, r5
 8007d44:	f000 f80c 	bl	8007d60 <__swsetup_r>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	d0cb      	beq.n	8007ce4 <__swbuf_r+0x28>
 8007d4c:	f04f 37ff 	mov.w	r7, #4294967295
 8007d50:	e7ea      	b.n	8007d28 <__swbuf_r+0x6c>
 8007d52:	bf00      	nop
 8007d54:	08008ce0 	.word	0x08008ce0
 8007d58:	08008d00 	.word	0x08008d00
 8007d5c:	08008cc0 	.word	0x08008cc0

08007d60 <__swsetup_r>:
 8007d60:	4b32      	ldr	r3, [pc, #200]	; (8007e2c <__swsetup_r+0xcc>)
 8007d62:	b570      	push	{r4, r5, r6, lr}
 8007d64:	681d      	ldr	r5, [r3, #0]
 8007d66:	4606      	mov	r6, r0
 8007d68:	460c      	mov	r4, r1
 8007d6a:	b125      	cbz	r5, 8007d76 <__swsetup_r+0x16>
 8007d6c:	69ab      	ldr	r3, [r5, #24]
 8007d6e:	b913      	cbnz	r3, 8007d76 <__swsetup_r+0x16>
 8007d70:	4628      	mov	r0, r5
 8007d72:	f000 f97d 	bl	8008070 <__sinit>
 8007d76:	4b2e      	ldr	r3, [pc, #184]	; (8007e30 <__swsetup_r+0xd0>)
 8007d78:	429c      	cmp	r4, r3
 8007d7a:	d10f      	bne.n	8007d9c <__swsetup_r+0x3c>
 8007d7c:	686c      	ldr	r4, [r5, #4]
 8007d7e:	89a3      	ldrh	r3, [r4, #12]
 8007d80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d84:	0719      	lsls	r1, r3, #28
 8007d86:	d42c      	bmi.n	8007de2 <__swsetup_r+0x82>
 8007d88:	06dd      	lsls	r5, r3, #27
 8007d8a:	d411      	bmi.n	8007db0 <__swsetup_r+0x50>
 8007d8c:	2309      	movs	r3, #9
 8007d8e:	6033      	str	r3, [r6, #0]
 8007d90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d94:	81a3      	strh	r3, [r4, #12]
 8007d96:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9a:	e03e      	b.n	8007e1a <__swsetup_r+0xba>
 8007d9c:	4b25      	ldr	r3, [pc, #148]	; (8007e34 <__swsetup_r+0xd4>)
 8007d9e:	429c      	cmp	r4, r3
 8007da0:	d101      	bne.n	8007da6 <__swsetup_r+0x46>
 8007da2:	68ac      	ldr	r4, [r5, #8]
 8007da4:	e7eb      	b.n	8007d7e <__swsetup_r+0x1e>
 8007da6:	4b24      	ldr	r3, [pc, #144]	; (8007e38 <__swsetup_r+0xd8>)
 8007da8:	429c      	cmp	r4, r3
 8007daa:	bf08      	it	eq
 8007dac:	68ec      	ldreq	r4, [r5, #12]
 8007dae:	e7e6      	b.n	8007d7e <__swsetup_r+0x1e>
 8007db0:	0758      	lsls	r0, r3, #29
 8007db2:	d512      	bpl.n	8007dda <__swsetup_r+0x7a>
 8007db4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007db6:	b141      	cbz	r1, 8007dca <__swsetup_r+0x6a>
 8007db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dbc:	4299      	cmp	r1, r3
 8007dbe:	d002      	beq.n	8007dc6 <__swsetup_r+0x66>
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	f000 fa5b 	bl	800827c <_free_r>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	6363      	str	r3, [r4, #52]	; 0x34
 8007dca:	89a3      	ldrh	r3, [r4, #12]
 8007dcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007dd0:	81a3      	strh	r3, [r4, #12]
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	6063      	str	r3, [r4, #4]
 8007dd6:	6923      	ldr	r3, [r4, #16]
 8007dd8:	6023      	str	r3, [r4, #0]
 8007dda:	89a3      	ldrh	r3, [r4, #12]
 8007ddc:	f043 0308 	orr.w	r3, r3, #8
 8007de0:	81a3      	strh	r3, [r4, #12]
 8007de2:	6923      	ldr	r3, [r4, #16]
 8007de4:	b94b      	cbnz	r3, 8007dfa <__swsetup_r+0x9a>
 8007de6:	89a3      	ldrh	r3, [r4, #12]
 8007de8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007df0:	d003      	beq.n	8007dfa <__swsetup_r+0x9a>
 8007df2:	4621      	mov	r1, r4
 8007df4:	4630      	mov	r0, r6
 8007df6:	f000 fa01 	bl	80081fc <__smakebuf_r>
 8007dfa:	89a0      	ldrh	r0, [r4, #12]
 8007dfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e00:	f010 0301 	ands.w	r3, r0, #1
 8007e04:	d00a      	beq.n	8007e1c <__swsetup_r+0xbc>
 8007e06:	2300      	movs	r3, #0
 8007e08:	60a3      	str	r3, [r4, #8]
 8007e0a:	6963      	ldr	r3, [r4, #20]
 8007e0c:	425b      	negs	r3, r3
 8007e0e:	61a3      	str	r3, [r4, #24]
 8007e10:	6923      	ldr	r3, [r4, #16]
 8007e12:	b943      	cbnz	r3, 8007e26 <__swsetup_r+0xc6>
 8007e14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e18:	d1ba      	bne.n	8007d90 <__swsetup_r+0x30>
 8007e1a:	bd70      	pop	{r4, r5, r6, pc}
 8007e1c:	0781      	lsls	r1, r0, #30
 8007e1e:	bf58      	it	pl
 8007e20:	6963      	ldrpl	r3, [r4, #20]
 8007e22:	60a3      	str	r3, [r4, #8]
 8007e24:	e7f4      	b.n	8007e10 <__swsetup_r+0xb0>
 8007e26:	2000      	movs	r0, #0
 8007e28:	e7f7      	b.n	8007e1a <__swsetup_r+0xba>
 8007e2a:	bf00      	nop
 8007e2c:	20000014 	.word	0x20000014
 8007e30:	08008ce0 	.word	0x08008ce0
 8007e34:	08008d00 	.word	0x08008d00
 8007e38:	08008cc0 	.word	0x08008cc0

08007e3c <__sflush_r>:
 8007e3c:	898a      	ldrh	r2, [r1, #12]
 8007e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e42:	4605      	mov	r5, r0
 8007e44:	0710      	lsls	r0, r2, #28
 8007e46:	460c      	mov	r4, r1
 8007e48:	d458      	bmi.n	8007efc <__sflush_r+0xc0>
 8007e4a:	684b      	ldr	r3, [r1, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	dc05      	bgt.n	8007e5c <__sflush_r+0x20>
 8007e50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	dc02      	bgt.n	8007e5c <__sflush_r+0x20>
 8007e56:	2000      	movs	r0, #0
 8007e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e5e:	2e00      	cmp	r6, #0
 8007e60:	d0f9      	beq.n	8007e56 <__sflush_r+0x1a>
 8007e62:	2300      	movs	r3, #0
 8007e64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e68:	682f      	ldr	r7, [r5, #0]
 8007e6a:	602b      	str	r3, [r5, #0]
 8007e6c:	d032      	beq.n	8007ed4 <__sflush_r+0x98>
 8007e6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e70:	89a3      	ldrh	r3, [r4, #12]
 8007e72:	075a      	lsls	r2, r3, #29
 8007e74:	d505      	bpl.n	8007e82 <__sflush_r+0x46>
 8007e76:	6863      	ldr	r3, [r4, #4]
 8007e78:	1ac0      	subs	r0, r0, r3
 8007e7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e7c:	b10b      	cbz	r3, 8007e82 <__sflush_r+0x46>
 8007e7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e80:	1ac0      	subs	r0, r0, r3
 8007e82:	2300      	movs	r3, #0
 8007e84:	4602      	mov	r2, r0
 8007e86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e88:	6a21      	ldr	r1, [r4, #32]
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	47b0      	blx	r6
 8007e8e:	1c43      	adds	r3, r0, #1
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	d106      	bne.n	8007ea2 <__sflush_r+0x66>
 8007e94:	6829      	ldr	r1, [r5, #0]
 8007e96:	291d      	cmp	r1, #29
 8007e98:	d82c      	bhi.n	8007ef4 <__sflush_r+0xb8>
 8007e9a:	4a2a      	ldr	r2, [pc, #168]	; (8007f44 <__sflush_r+0x108>)
 8007e9c:	40ca      	lsrs	r2, r1
 8007e9e:	07d6      	lsls	r6, r2, #31
 8007ea0:	d528      	bpl.n	8007ef4 <__sflush_r+0xb8>
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	6062      	str	r2, [r4, #4]
 8007ea6:	04d9      	lsls	r1, r3, #19
 8007ea8:	6922      	ldr	r2, [r4, #16]
 8007eaa:	6022      	str	r2, [r4, #0]
 8007eac:	d504      	bpl.n	8007eb8 <__sflush_r+0x7c>
 8007eae:	1c42      	adds	r2, r0, #1
 8007eb0:	d101      	bne.n	8007eb6 <__sflush_r+0x7a>
 8007eb2:	682b      	ldr	r3, [r5, #0]
 8007eb4:	b903      	cbnz	r3, 8007eb8 <__sflush_r+0x7c>
 8007eb6:	6560      	str	r0, [r4, #84]	; 0x54
 8007eb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eba:	602f      	str	r7, [r5, #0]
 8007ebc:	2900      	cmp	r1, #0
 8007ebe:	d0ca      	beq.n	8007e56 <__sflush_r+0x1a>
 8007ec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ec4:	4299      	cmp	r1, r3
 8007ec6:	d002      	beq.n	8007ece <__sflush_r+0x92>
 8007ec8:	4628      	mov	r0, r5
 8007eca:	f000 f9d7 	bl	800827c <_free_r>
 8007ece:	2000      	movs	r0, #0
 8007ed0:	6360      	str	r0, [r4, #52]	; 0x34
 8007ed2:	e7c1      	b.n	8007e58 <__sflush_r+0x1c>
 8007ed4:	6a21      	ldr	r1, [r4, #32]
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	4628      	mov	r0, r5
 8007eda:	47b0      	blx	r6
 8007edc:	1c41      	adds	r1, r0, #1
 8007ede:	d1c7      	bne.n	8007e70 <__sflush_r+0x34>
 8007ee0:	682b      	ldr	r3, [r5, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0c4      	beq.n	8007e70 <__sflush_r+0x34>
 8007ee6:	2b1d      	cmp	r3, #29
 8007ee8:	d001      	beq.n	8007eee <__sflush_r+0xb2>
 8007eea:	2b16      	cmp	r3, #22
 8007eec:	d101      	bne.n	8007ef2 <__sflush_r+0xb6>
 8007eee:	602f      	str	r7, [r5, #0]
 8007ef0:	e7b1      	b.n	8007e56 <__sflush_r+0x1a>
 8007ef2:	89a3      	ldrh	r3, [r4, #12]
 8007ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ef8:	81a3      	strh	r3, [r4, #12]
 8007efa:	e7ad      	b.n	8007e58 <__sflush_r+0x1c>
 8007efc:	690f      	ldr	r7, [r1, #16]
 8007efe:	2f00      	cmp	r7, #0
 8007f00:	d0a9      	beq.n	8007e56 <__sflush_r+0x1a>
 8007f02:	0793      	lsls	r3, r2, #30
 8007f04:	680e      	ldr	r6, [r1, #0]
 8007f06:	bf08      	it	eq
 8007f08:	694b      	ldreq	r3, [r1, #20]
 8007f0a:	600f      	str	r7, [r1, #0]
 8007f0c:	bf18      	it	ne
 8007f0e:	2300      	movne	r3, #0
 8007f10:	eba6 0807 	sub.w	r8, r6, r7
 8007f14:	608b      	str	r3, [r1, #8]
 8007f16:	f1b8 0f00 	cmp.w	r8, #0
 8007f1a:	dd9c      	ble.n	8007e56 <__sflush_r+0x1a>
 8007f1c:	6a21      	ldr	r1, [r4, #32]
 8007f1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f20:	4643      	mov	r3, r8
 8007f22:	463a      	mov	r2, r7
 8007f24:	4628      	mov	r0, r5
 8007f26:	47b0      	blx	r6
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	dc06      	bgt.n	8007f3a <__sflush_r+0xfe>
 8007f2c:	89a3      	ldrh	r3, [r4, #12]
 8007f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f32:	81a3      	strh	r3, [r4, #12]
 8007f34:	f04f 30ff 	mov.w	r0, #4294967295
 8007f38:	e78e      	b.n	8007e58 <__sflush_r+0x1c>
 8007f3a:	4407      	add	r7, r0
 8007f3c:	eba8 0800 	sub.w	r8, r8, r0
 8007f40:	e7e9      	b.n	8007f16 <__sflush_r+0xda>
 8007f42:	bf00      	nop
 8007f44:	20400001 	.word	0x20400001

08007f48 <_fflush_r>:
 8007f48:	b538      	push	{r3, r4, r5, lr}
 8007f4a:	690b      	ldr	r3, [r1, #16]
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	b913      	cbnz	r3, 8007f58 <_fflush_r+0x10>
 8007f52:	2500      	movs	r5, #0
 8007f54:	4628      	mov	r0, r5
 8007f56:	bd38      	pop	{r3, r4, r5, pc}
 8007f58:	b118      	cbz	r0, 8007f62 <_fflush_r+0x1a>
 8007f5a:	6983      	ldr	r3, [r0, #24]
 8007f5c:	b90b      	cbnz	r3, 8007f62 <_fflush_r+0x1a>
 8007f5e:	f000 f887 	bl	8008070 <__sinit>
 8007f62:	4b14      	ldr	r3, [pc, #80]	; (8007fb4 <_fflush_r+0x6c>)
 8007f64:	429c      	cmp	r4, r3
 8007f66:	d11b      	bne.n	8007fa0 <_fflush_r+0x58>
 8007f68:	686c      	ldr	r4, [r5, #4]
 8007f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0ef      	beq.n	8007f52 <_fflush_r+0xa>
 8007f72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f74:	07d0      	lsls	r0, r2, #31
 8007f76:	d404      	bmi.n	8007f82 <_fflush_r+0x3a>
 8007f78:	0599      	lsls	r1, r3, #22
 8007f7a:	d402      	bmi.n	8007f82 <_fflush_r+0x3a>
 8007f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f7e:	f000 f915 	bl	80081ac <__retarget_lock_acquire_recursive>
 8007f82:	4628      	mov	r0, r5
 8007f84:	4621      	mov	r1, r4
 8007f86:	f7ff ff59 	bl	8007e3c <__sflush_r>
 8007f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f8c:	07da      	lsls	r2, r3, #31
 8007f8e:	4605      	mov	r5, r0
 8007f90:	d4e0      	bmi.n	8007f54 <_fflush_r+0xc>
 8007f92:	89a3      	ldrh	r3, [r4, #12]
 8007f94:	059b      	lsls	r3, r3, #22
 8007f96:	d4dd      	bmi.n	8007f54 <_fflush_r+0xc>
 8007f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f9a:	f000 f908 	bl	80081ae <__retarget_lock_release_recursive>
 8007f9e:	e7d9      	b.n	8007f54 <_fflush_r+0xc>
 8007fa0:	4b05      	ldr	r3, [pc, #20]	; (8007fb8 <_fflush_r+0x70>)
 8007fa2:	429c      	cmp	r4, r3
 8007fa4:	d101      	bne.n	8007faa <_fflush_r+0x62>
 8007fa6:	68ac      	ldr	r4, [r5, #8]
 8007fa8:	e7df      	b.n	8007f6a <_fflush_r+0x22>
 8007faa:	4b04      	ldr	r3, [pc, #16]	; (8007fbc <_fflush_r+0x74>)
 8007fac:	429c      	cmp	r4, r3
 8007fae:	bf08      	it	eq
 8007fb0:	68ec      	ldreq	r4, [r5, #12]
 8007fb2:	e7da      	b.n	8007f6a <_fflush_r+0x22>
 8007fb4:	08008ce0 	.word	0x08008ce0
 8007fb8:	08008d00 	.word	0x08008d00
 8007fbc:	08008cc0 	.word	0x08008cc0

08007fc0 <std>:
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	b510      	push	{r4, lr}
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	e9c0 3300 	strd	r3, r3, [r0]
 8007fca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fce:	6083      	str	r3, [r0, #8]
 8007fd0:	8181      	strh	r1, [r0, #12]
 8007fd2:	6643      	str	r3, [r0, #100]	; 0x64
 8007fd4:	81c2      	strh	r2, [r0, #14]
 8007fd6:	6183      	str	r3, [r0, #24]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	2208      	movs	r2, #8
 8007fdc:	305c      	adds	r0, #92	; 0x5c
 8007fde:	f7ff fdd7 	bl	8007b90 <memset>
 8007fe2:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <std+0x38>)
 8007fe4:	6263      	str	r3, [r4, #36]	; 0x24
 8007fe6:	4b05      	ldr	r3, [pc, #20]	; (8007ffc <std+0x3c>)
 8007fe8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fea:	4b05      	ldr	r3, [pc, #20]	; (8008000 <std+0x40>)
 8007fec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fee:	4b05      	ldr	r3, [pc, #20]	; (8008004 <std+0x44>)
 8007ff0:	6224      	str	r4, [r4, #32]
 8007ff2:	6323      	str	r3, [r4, #48]	; 0x30
 8007ff4:	bd10      	pop	{r4, pc}
 8007ff6:	bf00      	nop
 8007ff8:	08008a39 	.word	0x08008a39
 8007ffc:	08008a5b 	.word	0x08008a5b
 8008000:	08008a93 	.word	0x08008a93
 8008004:	08008ab7 	.word	0x08008ab7

08008008 <_cleanup_r>:
 8008008:	4901      	ldr	r1, [pc, #4]	; (8008010 <_cleanup_r+0x8>)
 800800a:	f000 b8af 	b.w	800816c <_fwalk_reent>
 800800e:	bf00      	nop
 8008010:	08007f49 	.word	0x08007f49

08008014 <__sfmoreglue>:
 8008014:	b570      	push	{r4, r5, r6, lr}
 8008016:	2268      	movs	r2, #104	; 0x68
 8008018:	1e4d      	subs	r5, r1, #1
 800801a:	4355      	muls	r5, r2
 800801c:	460e      	mov	r6, r1
 800801e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008022:	f000 f997 	bl	8008354 <_malloc_r>
 8008026:	4604      	mov	r4, r0
 8008028:	b140      	cbz	r0, 800803c <__sfmoreglue+0x28>
 800802a:	2100      	movs	r1, #0
 800802c:	e9c0 1600 	strd	r1, r6, [r0]
 8008030:	300c      	adds	r0, #12
 8008032:	60a0      	str	r0, [r4, #8]
 8008034:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008038:	f7ff fdaa 	bl	8007b90 <memset>
 800803c:	4620      	mov	r0, r4
 800803e:	bd70      	pop	{r4, r5, r6, pc}

08008040 <__sfp_lock_acquire>:
 8008040:	4801      	ldr	r0, [pc, #4]	; (8008048 <__sfp_lock_acquire+0x8>)
 8008042:	f000 b8b3 	b.w	80081ac <__retarget_lock_acquire_recursive>
 8008046:	bf00      	nop
 8008048:	20000405 	.word	0x20000405

0800804c <__sfp_lock_release>:
 800804c:	4801      	ldr	r0, [pc, #4]	; (8008054 <__sfp_lock_release+0x8>)
 800804e:	f000 b8ae 	b.w	80081ae <__retarget_lock_release_recursive>
 8008052:	bf00      	nop
 8008054:	20000405 	.word	0x20000405

08008058 <__sinit_lock_acquire>:
 8008058:	4801      	ldr	r0, [pc, #4]	; (8008060 <__sinit_lock_acquire+0x8>)
 800805a:	f000 b8a7 	b.w	80081ac <__retarget_lock_acquire_recursive>
 800805e:	bf00      	nop
 8008060:	20000406 	.word	0x20000406

08008064 <__sinit_lock_release>:
 8008064:	4801      	ldr	r0, [pc, #4]	; (800806c <__sinit_lock_release+0x8>)
 8008066:	f000 b8a2 	b.w	80081ae <__retarget_lock_release_recursive>
 800806a:	bf00      	nop
 800806c:	20000406 	.word	0x20000406

08008070 <__sinit>:
 8008070:	b510      	push	{r4, lr}
 8008072:	4604      	mov	r4, r0
 8008074:	f7ff fff0 	bl	8008058 <__sinit_lock_acquire>
 8008078:	69a3      	ldr	r3, [r4, #24]
 800807a:	b11b      	cbz	r3, 8008084 <__sinit+0x14>
 800807c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008080:	f7ff bff0 	b.w	8008064 <__sinit_lock_release>
 8008084:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008088:	6523      	str	r3, [r4, #80]	; 0x50
 800808a:	4b13      	ldr	r3, [pc, #76]	; (80080d8 <__sinit+0x68>)
 800808c:	4a13      	ldr	r2, [pc, #76]	; (80080dc <__sinit+0x6c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	62a2      	str	r2, [r4, #40]	; 0x28
 8008092:	42a3      	cmp	r3, r4
 8008094:	bf04      	itt	eq
 8008096:	2301      	moveq	r3, #1
 8008098:	61a3      	streq	r3, [r4, #24]
 800809a:	4620      	mov	r0, r4
 800809c:	f000 f820 	bl	80080e0 <__sfp>
 80080a0:	6060      	str	r0, [r4, #4]
 80080a2:	4620      	mov	r0, r4
 80080a4:	f000 f81c 	bl	80080e0 <__sfp>
 80080a8:	60a0      	str	r0, [r4, #8]
 80080aa:	4620      	mov	r0, r4
 80080ac:	f000 f818 	bl	80080e0 <__sfp>
 80080b0:	2200      	movs	r2, #0
 80080b2:	60e0      	str	r0, [r4, #12]
 80080b4:	2104      	movs	r1, #4
 80080b6:	6860      	ldr	r0, [r4, #4]
 80080b8:	f7ff ff82 	bl	8007fc0 <std>
 80080bc:	68a0      	ldr	r0, [r4, #8]
 80080be:	2201      	movs	r2, #1
 80080c0:	2109      	movs	r1, #9
 80080c2:	f7ff ff7d 	bl	8007fc0 <std>
 80080c6:	68e0      	ldr	r0, [r4, #12]
 80080c8:	2202      	movs	r2, #2
 80080ca:	2112      	movs	r1, #18
 80080cc:	f7ff ff78 	bl	8007fc0 <std>
 80080d0:	2301      	movs	r3, #1
 80080d2:	61a3      	str	r3, [r4, #24]
 80080d4:	e7d2      	b.n	800807c <__sinit+0xc>
 80080d6:	bf00      	nop
 80080d8:	08008cbc 	.word	0x08008cbc
 80080dc:	08008009 	.word	0x08008009

080080e0 <__sfp>:
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e2:	4607      	mov	r7, r0
 80080e4:	f7ff ffac 	bl	8008040 <__sfp_lock_acquire>
 80080e8:	4b1e      	ldr	r3, [pc, #120]	; (8008164 <__sfp+0x84>)
 80080ea:	681e      	ldr	r6, [r3, #0]
 80080ec:	69b3      	ldr	r3, [r6, #24]
 80080ee:	b913      	cbnz	r3, 80080f6 <__sfp+0x16>
 80080f0:	4630      	mov	r0, r6
 80080f2:	f7ff ffbd 	bl	8008070 <__sinit>
 80080f6:	3648      	adds	r6, #72	; 0x48
 80080f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080fc:	3b01      	subs	r3, #1
 80080fe:	d503      	bpl.n	8008108 <__sfp+0x28>
 8008100:	6833      	ldr	r3, [r6, #0]
 8008102:	b30b      	cbz	r3, 8008148 <__sfp+0x68>
 8008104:	6836      	ldr	r6, [r6, #0]
 8008106:	e7f7      	b.n	80080f8 <__sfp+0x18>
 8008108:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800810c:	b9d5      	cbnz	r5, 8008144 <__sfp+0x64>
 800810e:	4b16      	ldr	r3, [pc, #88]	; (8008168 <__sfp+0x88>)
 8008110:	60e3      	str	r3, [r4, #12]
 8008112:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008116:	6665      	str	r5, [r4, #100]	; 0x64
 8008118:	f000 f847 	bl	80081aa <__retarget_lock_init_recursive>
 800811c:	f7ff ff96 	bl	800804c <__sfp_lock_release>
 8008120:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008124:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008128:	6025      	str	r5, [r4, #0]
 800812a:	61a5      	str	r5, [r4, #24]
 800812c:	2208      	movs	r2, #8
 800812e:	4629      	mov	r1, r5
 8008130:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008134:	f7ff fd2c 	bl	8007b90 <memset>
 8008138:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800813c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008140:	4620      	mov	r0, r4
 8008142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008144:	3468      	adds	r4, #104	; 0x68
 8008146:	e7d9      	b.n	80080fc <__sfp+0x1c>
 8008148:	2104      	movs	r1, #4
 800814a:	4638      	mov	r0, r7
 800814c:	f7ff ff62 	bl	8008014 <__sfmoreglue>
 8008150:	4604      	mov	r4, r0
 8008152:	6030      	str	r0, [r6, #0]
 8008154:	2800      	cmp	r0, #0
 8008156:	d1d5      	bne.n	8008104 <__sfp+0x24>
 8008158:	f7ff ff78 	bl	800804c <__sfp_lock_release>
 800815c:	230c      	movs	r3, #12
 800815e:	603b      	str	r3, [r7, #0]
 8008160:	e7ee      	b.n	8008140 <__sfp+0x60>
 8008162:	bf00      	nop
 8008164:	08008cbc 	.word	0x08008cbc
 8008168:	ffff0001 	.word	0xffff0001

0800816c <_fwalk_reent>:
 800816c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008170:	4606      	mov	r6, r0
 8008172:	4688      	mov	r8, r1
 8008174:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008178:	2700      	movs	r7, #0
 800817a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800817e:	f1b9 0901 	subs.w	r9, r9, #1
 8008182:	d505      	bpl.n	8008190 <_fwalk_reent+0x24>
 8008184:	6824      	ldr	r4, [r4, #0]
 8008186:	2c00      	cmp	r4, #0
 8008188:	d1f7      	bne.n	800817a <_fwalk_reent+0xe>
 800818a:	4638      	mov	r0, r7
 800818c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008190:	89ab      	ldrh	r3, [r5, #12]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d907      	bls.n	80081a6 <_fwalk_reent+0x3a>
 8008196:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800819a:	3301      	adds	r3, #1
 800819c:	d003      	beq.n	80081a6 <_fwalk_reent+0x3a>
 800819e:	4629      	mov	r1, r5
 80081a0:	4630      	mov	r0, r6
 80081a2:	47c0      	blx	r8
 80081a4:	4307      	orrs	r7, r0
 80081a6:	3568      	adds	r5, #104	; 0x68
 80081a8:	e7e9      	b.n	800817e <_fwalk_reent+0x12>

080081aa <__retarget_lock_init_recursive>:
 80081aa:	4770      	bx	lr

080081ac <__retarget_lock_acquire_recursive>:
 80081ac:	4770      	bx	lr

080081ae <__retarget_lock_release_recursive>:
 80081ae:	4770      	bx	lr

080081b0 <__swhatbuf_r>:
 80081b0:	b570      	push	{r4, r5, r6, lr}
 80081b2:	460e      	mov	r6, r1
 80081b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081b8:	2900      	cmp	r1, #0
 80081ba:	b096      	sub	sp, #88	; 0x58
 80081bc:	4614      	mov	r4, r2
 80081be:	461d      	mov	r5, r3
 80081c0:	da08      	bge.n	80081d4 <__swhatbuf_r+0x24>
 80081c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	602a      	str	r2, [r5, #0]
 80081ca:	061a      	lsls	r2, r3, #24
 80081cc:	d410      	bmi.n	80081f0 <__swhatbuf_r+0x40>
 80081ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081d2:	e00e      	b.n	80081f2 <__swhatbuf_r+0x42>
 80081d4:	466a      	mov	r2, sp
 80081d6:	f000 fc95 	bl	8008b04 <_fstat_r>
 80081da:	2800      	cmp	r0, #0
 80081dc:	dbf1      	blt.n	80081c2 <__swhatbuf_r+0x12>
 80081de:	9a01      	ldr	r2, [sp, #4]
 80081e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081e8:	425a      	negs	r2, r3
 80081ea:	415a      	adcs	r2, r3
 80081ec:	602a      	str	r2, [r5, #0]
 80081ee:	e7ee      	b.n	80081ce <__swhatbuf_r+0x1e>
 80081f0:	2340      	movs	r3, #64	; 0x40
 80081f2:	2000      	movs	r0, #0
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	b016      	add	sp, #88	; 0x58
 80081f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080081fc <__smakebuf_r>:
 80081fc:	898b      	ldrh	r3, [r1, #12]
 80081fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008200:	079d      	lsls	r5, r3, #30
 8008202:	4606      	mov	r6, r0
 8008204:	460c      	mov	r4, r1
 8008206:	d507      	bpl.n	8008218 <__smakebuf_r+0x1c>
 8008208:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800820c:	6023      	str	r3, [r4, #0]
 800820e:	6123      	str	r3, [r4, #16]
 8008210:	2301      	movs	r3, #1
 8008212:	6163      	str	r3, [r4, #20]
 8008214:	b002      	add	sp, #8
 8008216:	bd70      	pop	{r4, r5, r6, pc}
 8008218:	ab01      	add	r3, sp, #4
 800821a:	466a      	mov	r2, sp
 800821c:	f7ff ffc8 	bl	80081b0 <__swhatbuf_r>
 8008220:	9900      	ldr	r1, [sp, #0]
 8008222:	4605      	mov	r5, r0
 8008224:	4630      	mov	r0, r6
 8008226:	f000 f895 	bl	8008354 <_malloc_r>
 800822a:	b948      	cbnz	r0, 8008240 <__smakebuf_r+0x44>
 800822c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008230:	059a      	lsls	r2, r3, #22
 8008232:	d4ef      	bmi.n	8008214 <__smakebuf_r+0x18>
 8008234:	f023 0303 	bic.w	r3, r3, #3
 8008238:	f043 0302 	orr.w	r3, r3, #2
 800823c:	81a3      	strh	r3, [r4, #12]
 800823e:	e7e3      	b.n	8008208 <__smakebuf_r+0xc>
 8008240:	4b0d      	ldr	r3, [pc, #52]	; (8008278 <__smakebuf_r+0x7c>)
 8008242:	62b3      	str	r3, [r6, #40]	; 0x28
 8008244:	89a3      	ldrh	r3, [r4, #12]
 8008246:	6020      	str	r0, [r4, #0]
 8008248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800824c:	81a3      	strh	r3, [r4, #12]
 800824e:	9b00      	ldr	r3, [sp, #0]
 8008250:	6163      	str	r3, [r4, #20]
 8008252:	9b01      	ldr	r3, [sp, #4]
 8008254:	6120      	str	r0, [r4, #16]
 8008256:	b15b      	cbz	r3, 8008270 <__smakebuf_r+0x74>
 8008258:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800825c:	4630      	mov	r0, r6
 800825e:	f000 fc63 	bl	8008b28 <_isatty_r>
 8008262:	b128      	cbz	r0, 8008270 <__smakebuf_r+0x74>
 8008264:	89a3      	ldrh	r3, [r4, #12]
 8008266:	f023 0303 	bic.w	r3, r3, #3
 800826a:	f043 0301 	orr.w	r3, r3, #1
 800826e:	81a3      	strh	r3, [r4, #12]
 8008270:	89a0      	ldrh	r0, [r4, #12]
 8008272:	4305      	orrs	r5, r0
 8008274:	81a5      	strh	r5, [r4, #12]
 8008276:	e7cd      	b.n	8008214 <__smakebuf_r+0x18>
 8008278:	08008009 	.word	0x08008009

0800827c <_free_r>:
 800827c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800827e:	2900      	cmp	r1, #0
 8008280:	d044      	beq.n	800830c <_free_r+0x90>
 8008282:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008286:	9001      	str	r0, [sp, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	f1a1 0404 	sub.w	r4, r1, #4
 800828e:	bfb8      	it	lt
 8008290:	18e4      	addlt	r4, r4, r3
 8008292:	f000 fc6b 	bl	8008b6c <__malloc_lock>
 8008296:	4a1e      	ldr	r2, [pc, #120]	; (8008310 <_free_r+0x94>)
 8008298:	9801      	ldr	r0, [sp, #4]
 800829a:	6813      	ldr	r3, [r2, #0]
 800829c:	b933      	cbnz	r3, 80082ac <_free_r+0x30>
 800829e:	6063      	str	r3, [r4, #4]
 80082a0:	6014      	str	r4, [r2, #0]
 80082a2:	b003      	add	sp, #12
 80082a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082a8:	f000 bc66 	b.w	8008b78 <__malloc_unlock>
 80082ac:	42a3      	cmp	r3, r4
 80082ae:	d908      	bls.n	80082c2 <_free_r+0x46>
 80082b0:	6825      	ldr	r5, [r4, #0]
 80082b2:	1961      	adds	r1, r4, r5
 80082b4:	428b      	cmp	r3, r1
 80082b6:	bf01      	itttt	eq
 80082b8:	6819      	ldreq	r1, [r3, #0]
 80082ba:	685b      	ldreq	r3, [r3, #4]
 80082bc:	1949      	addeq	r1, r1, r5
 80082be:	6021      	streq	r1, [r4, #0]
 80082c0:	e7ed      	b.n	800829e <_free_r+0x22>
 80082c2:	461a      	mov	r2, r3
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	b10b      	cbz	r3, 80082cc <_free_r+0x50>
 80082c8:	42a3      	cmp	r3, r4
 80082ca:	d9fa      	bls.n	80082c2 <_free_r+0x46>
 80082cc:	6811      	ldr	r1, [r2, #0]
 80082ce:	1855      	adds	r5, r2, r1
 80082d0:	42a5      	cmp	r5, r4
 80082d2:	d10b      	bne.n	80082ec <_free_r+0x70>
 80082d4:	6824      	ldr	r4, [r4, #0]
 80082d6:	4421      	add	r1, r4
 80082d8:	1854      	adds	r4, r2, r1
 80082da:	42a3      	cmp	r3, r4
 80082dc:	6011      	str	r1, [r2, #0]
 80082de:	d1e0      	bne.n	80082a2 <_free_r+0x26>
 80082e0:	681c      	ldr	r4, [r3, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	6053      	str	r3, [r2, #4]
 80082e6:	4421      	add	r1, r4
 80082e8:	6011      	str	r1, [r2, #0]
 80082ea:	e7da      	b.n	80082a2 <_free_r+0x26>
 80082ec:	d902      	bls.n	80082f4 <_free_r+0x78>
 80082ee:	230c      	movs	r3, #12
 80082f0:	6003      	str	r3, [r0, #0]
 80082f2:	e7d6      	b.n	80082a2 <_free_r+0x26>
 80082f4:	6825      	ldr	r5, [r4, #0]
 80082f6:	1961      	adds	r1, r4, r5
 80082f8:	428b      	cmp	r3, r1
 80082fa:	bf04      	itt	eq
 80082fc:	6819      	ldreq	r1, [r3, #0]
 80082fe:	685b      	ldreq	r3, [r3, #4]
 8008300:	6063      	str	r3, [r4, #4]
 8008302:	bf04      	itt	eq
 8008304:	1949      	addeq	r1, r1, r5
 8008306:	6021      	streq	r1, [r4, #0]
 8008308:	6054      	str	r4, [r2, #4]
 800830a:	e7ca      	b.n	80082a2 <_free_r+0x26>
 800830c:	b003      	add	sp, #12
 800830e:	bd30      	pop	{r4, r5, pc}
 8008310:	20000408 	.word	0x20000408

08008314 <sbrk_aligned>:
 8008314:	b570      	push	{r4, r5, r6, lr}
 8008316:	4e0e      	ldr	r6, [pc, #56]	; (8008350 <sbrk_aligned+0x3c>)
 8008318:	460c      	mov	r4, r1
 800831a:	6831      	ldr	r1, [r6, #0]
 800831c:	4605      	mov	r5, r0
 800831e:	b911      	cbnz	r1, 8008326 <sbrk_aligned+0x12>
 8008320:	f000 fb7a 	bl	8008a18 <_sbrk_r>
 8008324:	6030      	str	r0, [r6, #0]
 8008326:	4621      	mov	r1, r4
 8008328:	4628      	mov	r0, r5
 800832a:	f000 fb75 	bl	8008a18 <_sbrk_r>
 800832e:	1c43      	adds	r3, r0, #1
 8008330:	d00a      	beq.n	8008348 <sbrk_aligned+0x34>
 8008332:	1cc4      	adds	r4, r0, #3
 8008334:	f024 0403 	bic.w	r4, r4, #3
 8008338:	42a0      	cmp	r0, r4
 800833a:	d007      	beq.n	800834c <sbrk_aligned+0x38>
 800833c:	1a21      	subs	r1, r4, r0
 800833e:	4628      	mov	r0, r5
 8008340:	f000 fb6a 	bl	8008a18 <_sbrk_r>
 8008344:	3001      	adds	r0, #1
 8008346:	d101      	bne.n	800834c <sbrk_aligned+0x38>
 8008348:	f04f 34ff 	mov.w	r4, #4294967295
 800834c:	4620      	mov	r0, r4
 800834e:	bd70      	pop	{r4, r5, r6, pc}
 8008350:	2000040c 	.word	0x2000040c

08008354 <_malloc_r>:
 8008354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008358:	1ccd      	adds	r5, r1, #3
 800835a:	f025 0503 	bic.w	r5, r5, #3
 800835e:	3508      	adds	r5, #8
 8008360:	2d0c      	cmp	r5, #12
 8008362:	bf38      	it	cc
 8008364:	250c      	movcc	r5, #12
 8008366:	2d00      	cmp	r5, #0
 8008368:	4607      	mov	r7, r0
 800836a:	db01      	blt.n	8008370 <_malloc_r+0x1c>
 800836c:	42a9      	cmp	r1, r5
 800836e:	d905      	bls.n	800837c <_malloc_r+0x28>
 8008370:	230c      	movs	r3, #12
 8008372:	603b      	str	r3, [r7, #0]
 8008374:	2600      	movs	r6, #0
 8008376:	4630      	mov	r0, r6
 8008378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800837c:	4e2e      	ldr	r6, [pc, #184]	; (8008438 <_malloc_r+0xe4>)
 800837e:	f000 fbf5 	bl	8008b6c <__malloc_lock>
 8008382:	6833      	ldr	r3, [r6, #0]
 8008384:	461c      	mov	r4, r3
 8008386:	bb34      	cbnz	r4, 80083d6 <_malloc_r+0x82>
 8008388:	4629      	mov	r1, r5
 800838a:	4638      	mov	r0, r7
 800838c:	f7ff ffc2 	bl	8008314 <sbrk_aligned>
 8008390:	1c43      	adds	r3, r0, #1
 8008392:	4604      	mov	r4, r0
 8008394:	d14d      	bne.n	8008432 <_malloc_r+0xde>
 8008396:	6834      	ldr	r4, [r6, #0]
 8008398:	4626      	mov	r6, r4
 800839a:	2e00      	cmp	r6, #0
 800839c:	d140      	bne.n	8008420 <_malloc_r+0xcc>
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	4631      	mov	r1, r6
 80083a2:	4638      	mov	r0, r7
 80083a4:	eb04 0803 	add.w	r8, r4, r3
 80083a8:	f000 fb36 	bl	8008a18 <_sbrk_r>
 80083ac:	4580      	cmp	r8, r0
 80083ae:	d13a      	bne.n	8008426 <_malloc_r+0xd2>
 80083b0:	6821      	ldr	r1, [r4, #0]
 80083b2:	3503      	adds	r5, #3
 80083b4:	1a6d      	subs	r5, r5, r1
 80083b6:	f025 0503 	bic.w	r5, r5, #3
 80083ba:	3508      	adds	r5, #8
 80083bc:	2d0c      	cmp	r5, #12
 80083be:	bf38      	it	cc
 80083c0:	250c      	movcc	r5, #12
 80083c2:	4629      	mov	r1, r5
 80083c4:	4638      	mov	r0, r7
 80083c6:	f7ff ffa5 	bl	8008314 <sbrk_aligned>
 80083ca:	3001      	adds	r0, #1
 80083cc:	d02b      	beq.n	8008426 <_malloc_r+0xd2>
 80083ce:	6823      	ldr	r3, [r4, #0]
 80083d0:	442b      	add	r3, r5
 80083d2:	6023      	str	r3, [r4, #0]
 80083d4:	e00e      	b.n	80083f4 <_malloc_r+0xa0>
 80083d6:	6822      	ldr	r2, [r4, #0]
 80083d8:	1b52      	subs	r2, r2, r5
 80083da:	d41e      	bmi.n	800841a <_malloc_r+0xc6>
 80083dc:	2a0b      	cmp	r2, #11
 80083de:	d916      	bls.n	800840e <_malloc_r+0xba>
 80083e0:	1961      	adds	r1, r4, r5
 80083e2:	42a3      	cmp	r3, r4
 80083e4:	6025      	str	r5, [r4, #0]
 80083e6:	bf18      	it	ne
 80083e8:	6059      	strne	r1, [r3, #4]
 80083ea:	6863      	ldr	r3, [r4, #4]
 80083ec:	bf08      	it	eq
 80083ee:	6031      	streq	r1, [r6, #0]
 80083f0:	5162      	str	r2, [r4, r5]
 80083f2:	604b      	str	r3, [r1, #4]
 80083f4:	4638      	mov	r0, r7
 80083f6:	f104 060b 	add.w	r6, r4, #11
 80083fa:	f000 fbbd 	bl	8008b78 <__malloc_unlock>
 80083fe:	f026 0607 	bic.w	r6, r6, #7
 8008402:	1d23      	adds	r3, r4, #4
 8008404:	1af2      	subs	r2, r6, r3
 8008406:	d0b6      	beq.n	8008376 <_malloc_r+0x22>
 8008408:	1b9b      	subs	r3, r3, r6
 800840a:	50a3      	str	r3, [r4, r2]
 800840c:	e7b3      	b.n	8008376 <_malloc_r+0x22>
 800840e:	6862      	ldr	r2, [r4, #4]
 8008410:	42a3      	cmp	r3, r4
 8008412:	bf0c      	ite	eq
 8008414:	6032      	streq	r2, [r6, #0]
 8008416:	605a      	strne	r2, [r3, #4]
 8008418:	e7ec      	b.n	80083f4 <_malloc_r+0xa0>
 800841a:	4623      	mov	r3, r4
 800841c:	6864      	ldr	r4, [r4, #4]
 800841e:	e7b2      	b.n	8008386 <_malloc_r+0x32>
 8008420:	4634      	mov	r4, r6
 8008422:	6876      	ldr	r6, [r6, #4]
 8008424:	e7b9      	b.n	800839a <_malloc_r+0x46>
 8008426:	230c      	movs	r3, #12
 8008428:	603b      	str	r3, [r7, #0]
 800842a:	4638      	mov	r0, r7
 800842c:	f000 fba4 	bl	8008b78 <__malloc_unlock>
 8008430:	e7a1      	b.n	8008376 <_malloc_r+0x22>
 8008432:	6025      	str	r5, [r4, #0]
 8008434:	e7de      	b.n	80083f4 <_malloc_r+0xa0>
 8008436:	bf00      	nop
 8008438:	20000408 	.word	0x20000408

0800843c <__sfputc_r>:
 800843c:	6893      	ldr	r3, [r2, #8]
 800843e:	3b01      	subs	r3, #1
 8008440:	2b00      	cmp	r3, #0
 8008442:	b410      	push	{r4}
 8008444:	6093      	str	r3, [r2, #8]
 8008446:	da08      	bge.n	800845a <__sfputc_r+0x1e>
 8008448:	6994      	ldr	r4, [r2, #24]
 800844a:	42a3      	cmp	r3, r4
 800844c:	db01      	blt.n	8008452 <__sfputc_r+0x16>
 800844e:	290a      	cmp	r1, #10
 8008450:	d103      	bne.n	800845a <__sfputc_r+0x1e>
 8008452:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008456:	f7ff bc31 	b.w	8007cbc <__swbuf_r>
 800845a:	6813      	ldr	r3, [r2, #0]
 800845c:	1c58      	adds	r0, r3, #1
 800845e:	6010      	str	r0, [r2, #0]
 8008460:	7019      	strb	r1, [r3, #0]
 8008462:	4608      	mov	r0, r1
 8008464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008468:	4770      	bx	lr

0800846a <__sfputs_r>:
 800846a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846c:	4606      	mov	r6, r0
 800846e:	460f      	mov	r7, r1
 8008470:	4614      	mov	r4, r2
 8008472:	18d5      	adds	r5, r2, r3
 8008474:	42ac      	cmp	r4, r5
 8008476:	d101      	bne.n	800847c <__sfputs_r+0x12>
 8008478:	2000      	movs	r0, #0
 800847a:	e007      	b.n	800848c <__sfputs_r+0x22>
 800847c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008480:	463a      	mov	r2, r7
 8008482:	4630      	mov	r0, r6
 8008484:	f7ff ffda 	bl	800843c <__sfputc_r>
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	d1f3      	bne.n	8008474 <__sfputs_r+0xa>
 800848c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008490 <_vfiprintf_r>:
 8008490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008494:	460d      	mov	r5, r1
 8008496:	b09d      	sub	sp, #116	; 0x74
 8008498:	4614      	mov	r4, r2
 800849a:	4698      	mov	r8, r3
 800849c:	4606      	mov	r6, r0
 800849e:	b118      	cbz	r0, 80084a8 <_vfiprintf_r+0x18>
 80084a0:	6983      	ldr	r3, [r0, #24]
 80084a2:	b90b      	cbnz	r3, 80084a8 <_vfiprintf_r+0x18>
 80084a4:	f7ff fde4 	bl	8008070 <__sinit>
 80084a8:	4b89      	ldr	r3, [pc, #548]	; (80086d0 <_vfiprintf_r+0x240>)
 80084aa:	429d      	cmp	r5, r3
 80084ac:	d11b      	bne.n	80084e6 <_vfiprintf_r+0x56>
 80084ae:	6875      	ldr	r5, [r6, #4]
 80084b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084b2:	07d9      	lsls	r1, r3, #31
 80084b4:	d405      	bmi.n	80084c2 <_vfiprintf_r+0x32>
 80084b6:	89ab      	ldrh	r3, [r5, #12]
 80084b8:	059a      	lsls	r2, r3, #22
 80084ba:	d402      	bmi.n	80084c2 <_vfiprintf_r+0x32>
 80084bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084be:	f7ff fe75 	bl	80081ac <__retarget_lock_acquire_recursive>
 80084c2:	89ab      	ldrh	r3, [r5, #12]
 80084c4:	071b      	lsls	r3, r3, #28
 80084c6:	d501      	bpl.n	80084cc <_vfiprintf_r+0x3c>
 80084c8:	692b      	ldr	r3, [r5, #16]
 80084ca:	b9eb      	cbnz	r3, 8008508 <_vfiprintf_r+0x78>
 80084cc:	4629      	mov	r1, r5
 80084ce:	4630      	mov	r0, r6
 80084d0:	f7ff fc46 	bl	8007d60 <__swsetup_r>
 80084d4:	b1c0      	cbz	r0, 8008508 <_vfiprintf_r+0x78>
 80084d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084d8:	07dc      	lsls	r4, r3, #31
 80084da:	d50e      	bpl.n	80084fa <_vfiprintf_r+0x6a>
 80084dc:	f04f 30ff 	mov.w	r0, #4294967295
 80084e0:	b01d      	add	sp, #116	; 0x74
 80084e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e6:	4b7b      	ldr	r3, [pc, #492]	; (80086d4 <_vfiprintf_r+0x244>)
 80084e8:	429d      	cmp	r5, r3
 80084ea:	d101      	bne.n	80084f0 <_vfiprintf_r+0x60>
 80084ec:	68b5      	ldr	r5, [r6, #8]
 80084ee:	e7df      	b.n	80084b0 <_vfiprintf_r+0x20>
 80084f0:	4b79      	ldr	r3, [pc, #484]	; (80086d8 <_vfiprintf_r+0x248>)
 80084f2:	429d      	cmp	r5, r3
 80084f4:	bf08      	it	eq
 80084f6:	68f5      	ldreq	r5, [r6, #12]
 80084f8:	e7da      	b.n	80084b0 <_vfiprintf_r+0x20>
 80084fa:	89ab      	ldrh	r3, [r5, #12]
 80084fc:	0598      	lsls	r0, r3, #22
 80084fe:	d4ed      	bmi.n	80084dc <_vfiprintf_r+0x4c>
 8008500:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008502:	f7ff fe54 	bl	80081ae <__retarget_lock_release_recursive>
 8008506:	e7e9      	b.n	80084dc <_vfiprintf_r+0x4c>
 8008508:	2300      	movs	r3, #0
 800850a:	9309      	str	r3, [sp, #36]	; 0x24
 800850c:	2320      	movs	r3, #32
 800850e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008512:	f8cd 800c 	str.w	r8, [sp, #12]
 8008516:	2330      	movs	r3, #48	; 0x30
 8008518:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80086dc <_vfiprintf_r+0x24c>
 800851c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008520:	f04f 0901 	mov.w	r9, #1
 8008524:	4623      	mov	r3, r4
 8008526:	469a      	mov	sl, r3
 8008528:	f813 2b01 	ldrb.w	r2, [r3], #1
 800852c:	b10a      	cbz	r2, 8008532 <_vfiprintf_r+0xa2>
 800852e:	2a25      	cmp	r2, #37	; 0x25
 8008530:	d1f9      	bne.n	8008526 <_vfiprintf_r+0x96>
 8008532:	ebba 0b04 	subs.w	fp, sl, r4
 8008536:	d00b      	beq.n	8008550 <_vfiprintf_r+0xc0>
 8008538:	465b      	mov	r3, fp
 800853a:	4622      	mov	r2, r4
 800853c:	4629      	mov	r1, r5
 800853e:	4630      	mov	r0, r6
 8008540:	f7ff ff93 	bl	800846a <__sfputs_r>
 8008544:	3001      	adds	r0, #1
 8008546:	f000 80aa 	beq.w	800869e <_vfiprintf_r+0x20e>
 800854a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800854c:	445a      	add	r2, fp
 800854e:	9209      	str	r2, [sp, #36]	; 0x24
 8008550:	f89a 3000 	ldrb.w	r3, [sl]
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 80a2 	beq.w	800869e <_vfiprintf_r+0x20e>
 800855a:	2300      	movs	r3, #0
 800855c:	f04f 32ff 	mov.w	r2, #4294967295
 8008560:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008564:	f10a 0a01 	add.w	sl, sl, #1
 8008568:	9304      	str	r3, [sp, #16]
 800856a:	9307      	str	r3, [sp, #28]
 800856c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008570:	931a      	str	r3, [sp, #104]	; 0x68
 8008572:	4654      	mov	r4, sl
 8008574:	2205      	movs	r2, #5
 8008576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800857a:	4858      	ldr	r0, [pc, #352]	; (80086dc <_vfiprintf_r+0x24c>)
 800857c:	f7f7 fe48 	bl	8000210 <memchr>
 8008580:	9a04      	ldr	r2, [sp, #16]
 8008582:	b9d8      	cbnz	r0, 80085bc <_vfiprintf_r+0x12c>
 8008584:	06d1      	lsls	r1, r2, #27
 8008586:	bf44      	itt	mi
 8008588:	2320      	movmi	r3, #32
 800858a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800858e:	0713      	lsls	r3, r2, #28
 8008590:	bf44      	itt	mi
 8008592:	232b      	movmi	r3, #43	; 0x2b
 8008594:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008598:	f89a 3000 	ldrb.w	r3, [sl]
 800859c:	2b2a      	cmp	r3, #42	; 0x2a
 800859e:	d015      	beq.n	80085cc <_vfiprintf_r+0x13c>
 80085a0:	9a07      	ldr	r2, [sp, #28]
 80085a2:	4654      	mov	r4, sl
 80085a4:	2000      	movs	r0, #0
 80085a6:	f04f 0c0a 	mov.w	ip, #10
 80085aa:	4621      	mov	r1, r4
 80085ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085b0:	3b30      	subs	r3, #48	; 0x30
 80085b2:	2b09      	cmp	r3, #9
 80085b4:	d94e      	bls.n	8008654 <_vfiprintf_r+0x1c4>
 80085b6:	b1b0      	cbz	r0, 80085e6 <_vfiprintf_r+0x156>
 80085b8:	9207      	str	r2, [sp, #28]
 80085ba:	e014      	b.n	80085e6 <_vfiprintf_r+0x156>
 80085bc:	eba0 0308 	sub.w	r3, r0, r8
 80085c0:	fa09 f303 	lsl.w	r3, r9, r3
 80085c4:	4313      	orrs	r3, r2
 80085c6:	9304      	str	r3, [sp, #16]
 80085c8:	46a2      	mov	sl, r4
 80085ca:	e7d2      	b.n	8008572 <_vfiprintf_r+0xe2>
 80085cc:	9b03      	ldr	r3, [sp, #12]
 80085ce:	1d19      	adds	r1, r3, #4
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	9103      	str	r1, [sp, #12]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	bfbb      	ittet	lt
 80085d8:	425b      	neglt	r3, r3
 80085da:	f042 0202 	orrlt.w	r2, r2, #2
 80085de:	9307      	strge	r3, [sp, #28]
 80085e0:	9307      	strlt	r3, [sp, #28]
 80085e2:	bfb8      	it	lt
 80085e4:	9204      	strlt	r2, [sp, #16]
 80085e6:	7823      	ldrb	r3, [r4, #0]
 80085e8:	2b2e      	cmp	r3, #46	; 0x2e
 80085ea:	d10c      	bne.n	8008606 <_vfiprintf_r+0x176>
 80085ec:	7863      	ldrb	r3, [r4, #1]
 80085ee:	2b2a      	cmp	r3, #42	; 0x2a
 80085f0:	d135      	bne.n	800865e <_vfiprintf_r+0x1ce>
 80085f2:	9b03      	ldr	r3, [sp, #12]
 80085f4:	1d1a      	adds	r2, r3, #4
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	9203      	str	r2, [sp, #12]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	bfb8      	it	lt
 80085fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8008602:	3402      	adds	r4, #2
 8008604:	9305      	str	r3, [sp, #20]
 8008606:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80086ec <_vfiprintf_r+0x25c>
 800860a:	7821      	ldrb	r1, [r4, #0]
 800860c:	2203      	movs	r2, #3
 800860e:	4650      	mov	r0, sl
 8008610:	f7f7 fdfe 	bl	8000210 <memchr>
 8008614:	b140      	cbz	r0, 8008628 <_vfiprintf_r+0x198>
 8008616:	2340      	movs	r3, #64	; 0x40
 8008618:	eba0 000a 	sub.w	r0, r0, sl
 800861c:	fa03 f000 	lsl.w	r0, r3, r0
 8008620:	9b04      	ldr	r3, [sp, #16]
 8008622:	4303      	orrs	r3, r0
 8008624:	3401      	adds	r4, #1
 8008626:	9304      	str	r3, [sp, #16]
 8008628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800862c:	482c      	ldr	r0, [pc, #176]	; (80086e0 <_vfiprintf_r+0x250>)
 800862e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008632:	2206      	movs	r2, #6
 8008634:	f7f7 fdec 	bl	8000210 <memchr>
 8008638:	2800      	cmp	r0, #0
 800863a:	d03f      	beq.n	80086bc <_vfiprintf_r+0x22c>
 800863c:	4b29      	ldr	r3, [pc, #164]	; (80086e4 <_vfiprintf_r+0x254>)
 800863e:	bb1b      	cbnz	r3, 8008688 <_vfiprintf_r+0x1f8>
 8008640:	9b03      	ldr	r3, [sp, #12]
 8008642:	3307      	adds	r3, #7
 8008644:	f023 0307 	bic.w	r3, r3, #7
 8008648:	3308      	adds	r3, #8
 800864a:	9303      	str	r3, [sp, #12]
 800864c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800864e:	443b      	add	r3, r7
 8008650:	9309      	str	r3, [sp, #36]	; 0x24
 8008652:	e767      	b.n	8008524 <_vfiprintf_r+0x94>
 8008654:	fb0c 3202 	mla	r2, ip, r2, r3
 8008658:	460c      	mov	r4, r1
 800865a:	2001      	movs	r0, #1
 800865c:	e7a5      	b.n	80085aa <_vfiprintf_r+0x11a>
 800865e:	2300      	movs	r3, #0
 8008660:	3401      	adds	r4, #1
 8008662:	9305      	str	r3, [sp, #20]
 8008664:	4619      	mov	r1, r3
 8008666:	f04f 0c0a 	mov.w	ip, #10
 800866a:	4620      	mov	r0, r4
 800866c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008670:	3a30      	subs	r2, #48	; 0x30
 8008672:	2a09      	cmp	r2, #9
 8008674:	d903      	bls.n	800867e <_vfiprintf_r+0x1ee>
 8008676:	2b00      	cmp	r3, #0
 8008678:	d0c5      	beq.n	8008606 <_vfiprintf_r+0x176>
 800867a:	9105      	str	r1, [sp, #20]
 800867c:	e7c3      	b.n	8008606 <_vfiprintf_r+0x176>
 800867e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008682:	4604      	mov	r4, r0
 8008684:	2301      	movs	r3, #1
 8008686:	e7f0      	b.n	800866a <_vfiprintf_r+0x1da>
 8008688:	ab03      	add	r3, sp, #12
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	462a      	mov	r2, r5
 800868e:	4b16      	ldr	r3, [pc, #88]	; (80086e8 <_vfiprintf_r+0x258>)
 8008690:	a904      	add	r1, sp, #16
 8008692:	4630      	mov	r0, r6
 8008694:	f3af 8000 	nop.w
 8008698:	4607      	mov	r7, r0
 800869a:	1c78      	adds	r0, r7, #1
 800869c:	d1d6      	bne.n	800864c <_vfiprintf_r+0x1bc>
 800869e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086a0:	07d9      	lsls	r1, r3, #31
 80086a2:	d405      	bmi.n	80086b0 <_vfiprintf_r+0x220>
 80086a4:	89ab      	ldrh	r3, [r5, #12]
 80086a6:	059a      	lsls	r2, r3, #22
 80086a8:	d402      	bmi.n	80086b0 <_vfiprintf_r+0x220>
 80086aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086ac:	f7ff fd7f 	bl	80081ae <__retarget_lock_release_recursive>
 80086b0:	89ab      	ldrh	r3, [r5, #12]
 80086b2:	065b      	lsls	r3, r3, #25
 80086b4:	f53f af12 	bmi.w	80084dc <_vfiprintf_r+0x4c>
 80086b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086ba:	e711      	b.n	80084e0 <_vfiprintf_r+0x50>
 80086bc:	ab03      	add	r3, sp, #12
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	462a      	mov	r2, r5
 80086c2:	4b09      	ldr	r3, [pc, #36]	; (80086e8 <_vfiprintf_r+0x258>)
 80086c4:	a904      	add	r1, sp, #16
 80086c6:	4630      	mov	r0, r6
 80086c8:	f000 f880 	bl	80087cc <_printf_i>
 80086cc:	e7e4      	b.n	8008698 <_vfiprintf_r+0x208>
 80086ce:	bf00      	nop
 80086d0:	08008ce0 	.word	0x08008ce0
 80086d4:	08008d00 	.word	0x08008d00
 80086d8:	08008cc0 	.word	0x08008cc0
 80086dc:	08008d20 	.word	0x08008d20
 80086e0:	08008d2a 	.word	0x08008d2a
 80086e4:	00000000 	.word	0x00000000
 80086e8:	0800846b 	.word	0x0800846b
 80086ec:	08008d26 	.word	0x08008d26

080086f0 <_printf_common>:
 80086f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f4:	4616      	mov	r6, r2
 80086f6:	4699      	mov	r9, r3
 80086f8:	688a      	ldr	r2, [r1, #8]
 80086fa:	690b      	ldr	r3, [r1, #16]
 80086fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008700:	4293      	cmp	r3, r2
 8008702:	bfb8      	it	lt
 8008704:	4613      	movlt	r3, r2
 8008706:	6033      	str	r3, [r6, #0]
 8008708:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800870c:	4607      	mov	r7, r0
 800870e:	460c      	mov	r4, r1
 8008710:	b10a      	cbz	r2, 8008716 <_printf_common+0x26>
 8008712:	3301      	adds	r3, #1
 8008714:	6033      	str	r3, [r6, #0]
 8008716:	6823      	ldr	r3, [r4, #0]
 8008718:	0699      	lsls	r1, r3, #26
 800871a:	bf42      	ittt	mi
 800871c:	6833      	ldrmi	r3, [r6, #0]
 800871e:	3302      	addmi	r3, #2
 8008720:	6033      	strmi	r3, [r6, #0]
 8008722:	6825      	ldr	r5, [r4, #0]
 8008724:	f015 0506 	ands.w	r5, r5, #6
 8008728:	d106      	bne.n	8008738 <_printf_common+0x48>
 800872a:	f104 0a19 	add.w	sl, r4, #25
 800872e:	68e3      	ldr	r3, [r4, #12]
 8008730:	6832      	ldr	r2, [r6, #0]
 8008732:	1a9b      	subs	r3, r3, r2
 8008734:	42ab      	cmp	r3, r5
 8008736:	dc26      	bgt.n	8008786 <_printf_common+0x96>
 8008738:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800873c:	1e13      	subs	r3, r2, #0
 800873e:	6822      	ldr	r2, [r4, #0]
 8008740:	bf18      	it	ne
 8008742:	2301      	movne	r3, #1
 8008744:	0692      	lsls	r2, r2, #26
 8008746:	d42b      	bmi.n	80087a0 <_printf_common+0xb0>
 8008748:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800874c:	4649      	mov	r1, r9
 800874e:	4638      	mov	r0, r7
 8008750:	47c0      	blx	r8
 8008752:	3001      	adds	r0, #1
 8008754:	d01e      	beq.n	8008794 <_printf_common+0xa4>
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	68e5      	ldr	r5, [r4, #12]
 800875a:	6832      	ldr	r2, [r6, #0]
 800875c:	f003 0306 	and.w	r3, r3, #6
 8008760:	2b04      	cmp	r3, #4
 8008762:	bf08      	it	eq
 8008764:	1aad      	subeq	r5, r5, r2
 8008766:	68a3      	ldr	r3, [r4, #8]
 8008768:	6922      	ldr	r2, [r4, #16]
 800876a:	bf0c      	ite	eq
 800876c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008770:	2500      	movne	r5, #0
 8008772:	4293      	cmp	r3, r2
 8008774:	bfc4      	itt	gt
 8008776:	1a9b      	subgt	r3, r3, r2
 8008778:	18ed      	addgt	r5, r5, r3
 800877a:	2600      	movs	r6, #0
 800877c:	341a      	adds	r4, #26
 800877e:	42b5      	cmp	r5, r6
 8008780:	d11a      	bne.n	80087b8 <_printf_common+0xc8>
 8008782:	2000      	movs	r0, #0
 8008784:	e008      	b.n	8008798 <_printf_common+0xa8>
 8008786:	2301      	movs	r3, #1
 8008788:	4652      	mov	r2, sl
 800878a:	4649      	mov	r1, r9
 800878c:	4638      	mov	r0, r7
 800878e:	47c0      	blx	r8
 8008790:	3001      	adds	r0, #1
 8008792:	d103      	bne.n	800879c <_printf_common+0xac>
 8008794:	f04f 30ff 	mov.w	r0, #4294967295
 8008798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800879c:	3501      	adds	r5, #1
 800879e:	e7c6      	b.n	800872e <_printf_common+0x3e>
 80087a0:	18e1      	adds	r1, r4, r3
 80087a2:	1c5a      	adds	r2, r3, #1
 80087a4:	2030      	movs	r0, #48	; 0x30
 80087a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087aa:	4422      	add	r2, r4
 80087ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087b4:	3302      	adds	r3, #2
 80087b6:	e7c7      	b.n	8008748 <_printf_common+0x58>
 80087b8:	2301      	movs	r3, #1
 80087ba:	4622      	mov	r2, r4
 80087bc:	4649      	mov	r1, r9
 80087be:	4638      	mov	r0, r7
 80087c0:	47c0      	blx	r8
 80087c2:	3001      	adds	r0, #1
 80087c4:	d0e6      	beq.n	8008794 <_printf_common+0xa4>
 80087c6:	3601      	adds	r6, #1
 80087c8:	e7d9      	b.n	800877e <_printf_common+0x8e>
	...

080087cc <_printf_i>:
 80087cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087d0:	7e0f      	ldrb	r7, [r1, #24]
 80087d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087d4:	2f78      	cmp	r7, #120	; 0x78
 80087d6:	4691      	mov	r9, r2
 80087d8:	4680      	mov	r8, r0
 80087da:	460c      	mov	r4, r1
 80087dc:	469a      	mov	sl, r3
 80087de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087e2:	d807      	bhi.n	80087f4 <_printf_i+0x28>
 80087e4:	2f62      	cmp	r7, #98	; 0x62
 80087e6:	d80a      	bhi.n	80087fe <_printf_i+0x32>
 80087e8:	2f00      	cmp	r7, #0
 80087ea:	f000 80d8 	beq.w	800899e <_printf_i+0x1d2>
 80087ee:	2f58      	cmp	r7, #88	; 0x58
 80087f0:	f000 80a3 	beq.w	800893a <_printf_i+0x16e>
 80087f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087fc:	e03a      	b.n	8008874 <_printf_i+0xa8>
 80087fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008802:	2b15      	cmp	r3, #21
 8008804:	d8f6      	bhi.n	80087f4 <_printf_i+0x28>
 8008806:	a101      	add	r1, pc, #4	; (adr r1, 800880c <_printf_i+0x40>)
 8008808:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800880c:	08008865 	.word	0x08008865
 8008810:	08008879 	.word	0x08008879
 8008814:	080087f5 	.word	0x080087f5
 8008818:	080087f5 	.word	0x080087f5
 800881c:	080087f5 	.word	0x080087f5
 8008820:	080087f5 	.word	0x080087f5
 8008824:	08008879 	.word	0x08008879
 8008828:	080087f5 	.word	0x080087f5
 800882c:	080087f5 	.word	0x080087f5
 8008830:	080087f5 	.word	0x080087f5
 8008834:	080087f5 	.word	0x080087f5
 8008838:	08008985 	.word	0x08008985
 800883c:	080088a9 	.word	0x080088a9
 8008840:	08008967 	.word	0x08008967
 8008844:	080087f5 	.word	0x080087f5
 8008848:	080087f5 	.word	0x080087f5
 800884c:	080089a7 	.word	0x080089a7
 8008850:	080087f5 	.word	0x080087f5
 8008854:	080088a9 	.word	0x080088a9
 8008858:	080087f5 	.word	0x080087f5
 800885c:	080087f5 	.word	0x080087f5
 8008860:	0800896f 	.word	0x0800896f
 8008864:	682b      	ldr	r3, [r5, #0]
 8008866:	1d1a      	adds	r2, r3, #4
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	602a      	str	r2, [r5, #0]
 800886c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008870:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008874:	2301      	movs	r3, #1
 8008876:	e0a3      	b.n	80089c0 <_printf_i+0x1f4>
 8008878:	6820      	ldr	r0, [r4, #0]
 800887a:	6829      	ldr	r1, [r5, #0]
 800887c:	0606      	lsls	r6, r0, #24
 800887e:	f101 0304 	add.w	r3, r1, #4
 8008882:	d50a      	bpl.n	800889a <_printf_i+0xce>
 8008884:	680e      	ldr	r6, [r1, #0]
 8008886:	602b      	str	r3, [r5, #0]
 8008888:	2e00      	cmp	r6, #0
 800888a:	da03      	bge.n	8008894 <_printf_i+0xc8>
 800888c:	232d      	movs	r3, #45	; 0x2d
 800888e:	4276      	negs	r6, r6
 8008890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008894:	485e      	ldr	r0, [pc, #376]	; (8008a10 <_printf_i+0x244>)
 8008896:	230a      	movs	r3, #10
 8008898:	e019      	b.n	80088ce <_printf_i+0x102>
 800889a:	680e      	ldr	r6, [r1, #0]
 800889c:	602b      	str	r3, [r5, #0]
 800889e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088a2:	bf18      	it	ne
 80088a4:	b236      	sxthne	r6, r6
 80088a6:	e7ef      	b.n	8008888 <_printf_i+0xbc>
 80088a8:	682b      	ldr	r3, [r5, #0]
 80088aa:	6820      	ldr	r0, [r4, #0]
 80088ac:	1d19      	adds	r1, r3, #4
 80088ae:	6029      	str	r1, [r5, #0]
 80088b0:	0601      	lsls	r1, r0, #24
 80088b2:	d501      	bpl.n	80088b8 <_printf_i+0xec>
 80088b4:	681e      	ldr	r6, [r3, #0]
 80088b6:	e002      	b.n	80088be <_printf_i+0xf2>
 80088b8:	0646      	lsls	r6, r0, #25
 80088ba:	d5fb      	bpl.n	80088b4 <_printf_i+0xe8>
 80088bc:	881e      	ldrh	r6, [r3, #0]
 80088be:	4854      	ldr	r0, [pc, #336]	; (8008a10 <_printf_i+0x244>)
 80088c0:	2f6f      	cmp	r7, #111	; 0x6f
 80088c2:	bf0c      	ite	eq
 80088c4:	2308      	moveq	r3, #8
 80088c6:	230a      	movne	r3, #10
 80088c8:	2100      	movs	r1, #0
 80088ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088ce:	6865      	ldr	r5, [r4, #4]
 80088d0:	60a5      	str	r5, [r4, #8]
 80088d2:	2d00      	cmp	r5, #0
 80088d4:	bfa2      	ittt	ge
 80088d6:	6821      	ldrge	r1, [r4, #0]
 80088d8:	f021 0104 	bicge.w	r1, r1, #4
 80088dc:	6021      	strge	r1, [r4, #0]
 80088de:	b90e      	cbnz	r6, 80088e4 <_printf_i+0x118>
 80088e0:	2d00      	cmp	r5, #0
 80088e2:	d04d      	beq.n	8008980 <_printf_i+0x1b4>
 80088e4:	4615      	mov	r5, r2
 80088e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80088ea:	fb03 6711 	mls	r7, r3, r1, r6
 80088ee:	5dc7      	ldrb	r7, [r0, r7]
 80088f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088f4:	4637      	mov	r7, r6
 80088f6:	42bb      	cmp	r3, r7
 80088f8:	460e      	mov	r6, r1
 80088fa:	d9f4      	bls.n	80088e6 <_printf_i+0x11a>
 80088fc:	2b08      	cmp	r3, #8
 80088fe:	d10b      	bne.n	8008918 <_printf_i+0x14c>
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	07de      	lsls	r6, r3, #31
 8008904:	d508      	bpl.n	8008918 <_printf_i+0x14c>
 8008906:	6923      	ldr	r3, [r4, #16]
 8008908:	6861      	ldr	r1, [r4, #4]
 800890a:	4299      	cmp	r1, r3
 800890c:	bfde      	ittt	le
 800890e:	2330      	movle	r3, #48	; 0x30
 8008910:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008914:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008918:	1b52      	subs	r2, r2, r5
 800891a:	6122      	str	r2, [r4, #16]
 800891c:	f8cd a000 	str.w	sl, [sp]
 8008920:	464b      	mov	r3, r9
 8008922:	aa03      	add	r2, sp, #12
 8008924:	4621      	mov	r1, r4
 8008926:	4640      	mov	r0, r8
 8008928:	f7ff fee2 	bl	80086f0 <_printf_common>
 800892c:	3001      	adds	r0, #1
 800892e:	d14c      	bne.n	80089ca <_printf_i+0x1fe>
 8008930:	f04f 30ff 	mov.w	r0, #4294967295
 8008934:	b004      	add	sp, #16
 8008936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800893a:	4835      	ldr	r0, [pc, #212]	; (8008a10 <_printf_i+0x244>)
 800893c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008940:	6829      	ldr	r1, [r5, #0]
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	f851 6b04 	ldr.w	r6, [r1], #4
 8008948:	6029      	str	r1, [r5, #0]
 800894a:	061d      	lsls	r5, r3, #24
 800894c:	d514      	bpl.n	8008978 <_printf_i+0x1ac>
 800894e:	07df      	lsls	r7, r3, #31
 8008950:	bf44      	itt	mi
 8008952:	f043 0320 	orrmi.w	r3, r3, #32
 8008956:	6023      	strmi	r3, [r4, #0]
 8008958:	b91e      	cbnz	r6, 8008962 <_printf_i+0x196>
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	f023 0320 	bic.w	r3, r3, #32
 8008960:	6023      	str	r3, [r4, #0]
 8008962:	2310      	movs	r3, #16
 8008964:	e7b0      	b.n	80088c8 <_printf_i+0xfc>
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	f043 0320 	orr.w	r3, r3, #32
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	2378      	movs	r3, #120	; 0x78
 8008970:	4828      	ldr	r0, [pc, #160]	; (8008a14 <_printf_i+0x248>)
 8008972:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008976:	e7e3      	b.n	8008940 <_printf_i+0x174>
 8008978:	0659      	lsls	r1, r3, #25
 800897a:	bf48      	it	mi
 800897c:	b2b6      	uxthmi	r6, r6
 800897e:	e7e6      	b.n	800894e <_printf_i+0x182>
 8008980:	4615      	mov	r5, r2
 8008982:	e7bb      	b.n	80088fc <_printf_i+0x130>
 8008984:	682b      	ldr	r3, [r5, #0]
 8008986:	6826      	ldr	r6, [r4, #0]
 8008988:	6961      	ldr	r1, [r4, #20]
 800898a:	1d18      	adds	r0, r3, #4
 800898c:	6028      	str	r0, [r5, #0]
 800898e:	0635      	lsls	r5, r6, #24
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	d501      	bpl.n	8008998 <_printf_i+0x1cc>
 8008994:	6019      	str	r1, [r3, #0]
 8008996:	e002      	b.n	800899e <_printf_i+0x1d2>
 8008998:	0670      	lsls	r0, r6, #25
 800899a:	d5fb      	bpl.n	8008994 <_printf_i+0x1c8>
 800899c:	8019      	strh	r1, [r3, #0]
 800899e:	2300      	movs	r3, #0
 80089a0:	6123      	str	r3, [r4, #16]
 80089a2:	4615      	mov	r5, r2
 80089a4:	e7ba      	b.n	800891c <_printf_i+0x150>
 80089a6:	682b      	ldr	r3, [r5, #0]
 80089a8:	1d1a      	adds	r2, r3, #4
 80089aa:	602a      	str	r2, [r5, #0]
 80089ac:	681d      	ldr	r5, [r3, #0]
 80089ae:	6862      	ldr	r2, [r4, #4]
 80089b0:	2100      	movs	r1, #0
 80089b2:	4628      	mov	r0, r5
 80089b4:	f7f7 fc2c 	bl	8000210 <memchr>
 80089b8:	b108      	cbz	r0, 80089be <_printf_i+0x1f2>
 80089ba:	1b40      	subs	r0, r0, r5
 80089bc:	6060      	str	r0, [r4, #4]
 80089be:	6863      	ldr	r3, [r4, #4]
 80089c0:	6123      	str	r3, [r4, #16]
 80089c2:	2300      	movs	r3, #0
 80089c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089c8:	e7a8      	b.n	800891c <_printf_i+0x150>
 80089ca:	6923      	ldr	r3, [r4, #16]
 80089cc:	462a      	mov	r2, r5
 80089ce:	4649      	mov	r1, r9
 80089d0:	4640      	mov	r0, r8
 80089d2:	47d0      	blx	sl
 80089d4:	3001      	adds	r0, #1
 80089d6:	d0ab      	beq.n	8008930 <_printf_i+0x164>
 80089d8:	6823      	ldr	r3, [r4, #0]
 80089da:	079b      	lsls	r3, r3, #30
 80089dc:	d413      	bmi.n	8008a06 <_printf_i+0x23a>
 80089de:	68e0      	ldr	r0, [r4, #12]
 80089e0:	9b03      	ldr	r3, [sp, #12]
 80089e2:	4298      	cmp	r0, r3
 80089e4:	bfb8      	it	lt
 80089e6:	4618      	movlt	r0, r3
 80089e8:	e7a4      	b.n	8008934 <_printf_i+0x168>
 80089ea:	2301      	movs	r3, #1
 80089ec:	4632      	mov	r2, r6
 80089ee:	4649      	mov	r1, r9
 80089f0:	4640      	mov	r0, r8
 80089f2:	47d0      	blx	sl
 80089f4:	3001      	adds	r0, #1
 80089f6:	d09b      	beq.n	8008930 <_printf_i+0x164>
 80089f8:	3501      	adds	r5, #1
 80089fa:	68e3      	ldr	r3, [r4, #12]
 80089fc:	9903      	ldr	r1, [sp, #12]
 80089fe:	1a5b      	subs	r3, r3, r1
 8008a00:	42ab      	cmp	r3, r5
 8008a02:	dcf2      	bgt.n	80089ea <_printf_i+0x21e>
 8008a04:	e7eb      	b.n	80089de <_printf_i+0x212>
 8008a06:	2500      	movs	r5, #0
 8008a08:	f104 0619 	add.w	r6, r4, #25
 8008a0c:	e7f5      	b.n	80089fa <_printf_i+0x22e>
 8008a0e:	bf00      	nop
 8008a10:	08008d31 	.word	0x08008d31
 8008a14:	08008d42 	.word	0x08008d42

08008a18 <_sbrk_r>:
 8008a18:	b538      	push	{r3, r4, r5, lr}
 8008a1a:	4d06      	ldr	r5, [pc, #24]	; (8008a34 <_sbrk_r+0x1c>)
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	4604      	mov	r4, r0
 8008a20:	4608      	mov	r0, r1
 8008a22:	602b      	str	r3, [r5, #0]
 8008a24:	f7f9 fc14 	bl	8002250 <_sbrk>
 8008a28:	1c43      	adds	r3, r0, #1
 8008a2a:	d102      	bne.n	8008a32 <_sbrk_r+0x1a>
 8008a2c:	682b      	ldr	r3, [r5, #0]
 8008a2e:	b103      	cbz	r3, 8008a32 <_sbrk_r+0x1a>
 8008a30:	6023      	str	r3, [r4, #0]
 8008a32:	bd38      	pop	{r3, r4, r5, pc}
 8008a34:	20000410 	.word	0x20000410

08008a38 <__sread>:
 8008a38:	b510      	push	{r4, lr}
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a40:	f000 f8a0 	bl	8008b84 <_read_r>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	bfab      	itete	ge
 8008a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8008a4c:	181b      	addge	r3, r3, r0
 8008a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a52:	bfac      	ite	ge
 8008a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a56:	81a3      	strhlt	r3, [r4, #12]
 8008a58:	bd10      	pop	{r4, pc}

08008a5a <__swrite>:
 8008a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a5e:	461f      	mov	r7, r3
 8008a60:	898b      	ldrh	r3, [r1, #12]
 8008a62:	05db      	lsls	r3, r3, #23
 8008a64:	4605      	mov	r5, r0
 8008a66:	460c      	mov	r4, r1
 8008a68:	4616      	mov	r6, r2
 8008a6a:	d505      	bpl.n	8008a78 <__swrite+0x1e>
 8008a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a70:	2302      	movs	r3, #2
 8008a72:	2200      	movs	r2, #0
 8008a74:	f000 f868 	bl	8008b48 <_lseek_r>
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a82:	81a3      	strh	r3, [r4, #12]
 8008a84:	4632      	mov	r2, r6
 8008a86:	463b      	mov	r3, r7
 8008a88:	4628      	mov	r0, r5
 8008a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a8e:	f000 b817 	b.w	8008ac0 <_write_r>

08008a92 <__sseek>:
 8008a92:	b510      	push	{r4, lr}
 8008a94:	460c      	mov	r4, r1
 8008a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a9a:	f000 f855 	bl	8008b48 <_lseek_r>
 8008a9e:	1c43      	adds	r3, r0, #1
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	bf15      	itete	ne
 8008aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008aae:	81a3      	strheq	r3, [r4, #12]
 8008ab0:	bf18      	it	ne
 8008ab2:	81a3      	strhne	r3, [r4, #12]
 8008ab4:	bd10      	pop	{r4, pc}

08008ab6 <__sclose>:
 8008ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aba:	f000 b813 	b.w	8008ae4 <_close_r>
	...

08008ac0 <_write_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4d07      	ldr	r5, [pc, #28]	; (8008ae0 <_write_r+0x20>)
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	4608      	mov	r0, r1
 8008ac8:	4611      	mov	r1, r2
 8008aca:	2200      	movs	r2, #0
 8008acc:	602a      	str	r2, [r5, #0]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	f7f9 fb6d 	bl	80021ae <_write>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d102      	bne.n	8008ade <_write_r+0x1e>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	b103      	cbz	r3, 8008ade <_write_r+0x1e>
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	20000410 	.word	0x20000410

08008ae4 <_close_r>:
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	4d06      	ldr	r5, [pc, #24]	; (8008b00 <_close_r+0x1c>)
 8008ae8:	2300      	movs	r3, #0
 8008aea:	4604      	mov	r4, r0
 8008aec:	4608      	mov	r0, r1
 8008aee:	602b      	str	r3, [r5, #0]
 8008af0:	f7f9 fb79 	bl	80021e6 <_close>
 8008af4:	1c43      	adds	r3, r0, #1
 8008af6:	d102      	bne.n	8008afe <_close_r+0x1a>
 8008af8:	682b      	ldr	r3, [r5, #0]
 8008afa:	b103      	cbz	r3, 8008afe <_close_r+0x1a>
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	bd38      	pop	{r3, r4, r5, pc}
 8008b00:	20000410 	.word	0x20000410

08008b04 <_fstat_r>:
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	4d07      	ldr	r5, [pc, #28]	; (8008b24 <_fstat_r+0x20>)
 8008b08:	2300      	movs	r3, #0
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	4608      	mov	r0, r1
 8008b0e:	4611      	mov	r1, r2
 8008b10:	602b      	str	r3, [r5, #0]
 8008b12:	f7f9 fb74 	bl	80021fe <_fstat>
 8008b16:	1c43      	adds	r3, r0, #1
 8008b18:	d102      	bne.n	8008b20 <_fstat_r+0x1c>
 8008b1a:	682b      	ldr	r3, [r5, #0]
 8008b1c:	b103      	cbz	r3, 8008b20 <_fstat_r+0x1c>
 8008b1e:	6023      	str	r3, [r4, #0]
 8008b20:	bd38      	pop	{r3, r4, r5, pc}
 8008b22:	bf00      	nop
 8008b24:	20000410 	.word	0x20000410

08008b28 <_isatty_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	4d06      	ldr	r5, [pc, #24]	; (8008b44 <_isatty_r+0x1c>)
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4608      	mov	r0, r1
 8008b32:	602b      	str	r3, [r5, #0]
 8008b34:	f7f9 fb73 	bl	800221e <_isatty>
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	d102      	bne.n	8008b42 <_isatty_r+0x1a>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	b103      	cbz	r3, 8008b42 <_isatty_r+0x1a>
 8008b40:	6023      	str	r3, [r4, #0]
 8008b42:	bd38      	pop	{r3, r4, r5, pc}
 8008b44:	20000410 	.word	0x20000410

08008b48 <_lseek_r>:
 8008b48:	b538      	push	{r3, r4, r5, lr}
 8008b4a:	4d07      	ldr	r5, [pc, #28]	; (8008b68 <_lseek_r+0x20>)
 8008b4c:	4604      	mov	r4, r0
 8008b4e:	4608      	mov	r0, r1
 8008b50:	4611      	mov	r1, r2
 8008b52:	2200      	movs	r2, #0
 8008b54:	602a      	str	r2, [r5, #0]
 8008b56:	461a      	mov	r2, r3
 8008b58:	f7f9 fb6c 	bl	8002234 <_lseek>
 8008b5c:	1c43      	adds	r3, r0, #1
 8008b5e:	d102      	bne.n	8008b66 <_lseek_r+0x1e>
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	b103      	cbz	r3, 8008b66 <_lseek_r+0x1e>
 8008b64:	6023      	str	r3, [r4, #0]
 8008b66:	bd38      	pop	{r3, r4, r5, pc}
 8008b68:	20000410 	.word	0x20000410

08008b6c <__malloc_lock>:
 8008b6c:	4801      	ldr	r0, [pc, #4]	; (8008b74 <__malloc_lock+0x8>)
 8008b6e:	f7ff bb1d 	b.w	80081ac <__retarget_lock_acquire_recursive>
 8008b72:	bf00      	nop
 8008b74:	20000404 	.word	0x20000404

08008b78 <__malloc_unlock>:
 8008b78:	4801      	ldr	r0, [pc, #4]	; (8008b80 <__malloc_unlock+0x8>)
 8008b7a:	f7ff bb18 	b.w	80081ae <__retarget_lock_release_recursive>
 8008b7e:	bf00      	nop
 8008b80:	20000404 	.word	0x20000404

08008b84 <_read_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4d07      	ldr	r5, [pc, #28]	; (8008ba4 <_read_r+0x20>)
 8008b88:	4604      	mov	r4, r0
 8008b8a:	4608      	mov	r0, r1
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	2200      	movs	r2, #0
 8008b90:	602a      	str	r2, [r5, #0]
 8008b92:	461a      	mov	r2, r3
 8008b94:	f7f9 faee 	bl	8002174 <_read>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d102      	bne.n	8008ba2 <_read_r+0x1e>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	b103      	cbz	r3, 8008ba2 <_read_r+0x1e>
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	20000410 	.word	0x20000410

08008ba8 <_init>:
 8008ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008baa:	bf00      	nop
 8008bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bae:	bc08      	pop	{r3}
 8008bb0:	469e      	mov	lr, r3
 8008bb2:	4770      	bx	lr

08008bb4 <_fini>:
 8008bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb6:	bf00      	nop
 8008bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bba:	bc08      	pop	{r3}
 8008bbc:	469e      	mov	lr, r3
 8008bbe:	4770      	bx	lr
